using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DAL.Models;

#nullable disable

namespace DAL.DBContext
{
    public partial class WaWiContext : DbContext
    {
        public WaWiContext()
        {
        }

        public WaWiContext(DbContextOptions<WaWiContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountData> AccountData { get; set; }
        public virtual DbSet<AmeiseExporttyp> AmeiseExporttyp { get; set; }
        public virtual DbSet<AmeiseExportvorgang> AmeiseExportvorgang { get; set; }
        public virtual DbSet<AmeiseExportvorlage> AmeiseExportvorlage { get; set; }
        public virtual DbSet<AmeiseExportvorlagefeld> AmeiseExportvorlagefeld { get; set; }
        public virtual DbSet<AmeiseExportvorlagefilter> AmeiseExportvorlagefilter { get; set; }
        public virtual DbSet<AmeiseExportvorlagefilterext> AmeiseExportvorlagefilterext { get; set; }
        public virtual DbSet<AmeiseExportvorlagefilterfeld> AmeiseExportvorlagefilterfeld { get; set; }
        public virtual DbSet<AmeiseImportdurchgang> AmeiseImportdurchgang { get; set; }
        public virtual DbSet<AmeiseImportdurchgangartikel> AmeiseImportdurchgangartikel { get; set; }
        public virtual DbSet<AmeiseImporttyp> AmeiseImporttyp { get; set; }
        public virtual DbSet<AmeiseImporttypeinstellung> AmeiseImporttypeinstellung { get; set; }
        public virtual DbSet<AmeiseImporttypeinstellungwert> AmeiseImporttypeinstellungwert { get; set; }
        public virtual DbSet<AmeiseImporttypfeld> AmeiseImporttypfeld { get; set; }
        public virtual DbSet<AmeiseImportvorgang> AmeiseImportvorgang { get; set; }
        public virtual DbSet<AmeiseImportvorlage> AmeiseImportvorlage { get; set; }
        public virtual DbSet<AmeiseImportvorlageeinstellung> AmeiseImportvorlageeinstellung { get; set; }
        public virtual DbSet<AmeiseImportvorlagefeld> AmeiseImportvorlagefeld { get; set; }
        public virtual DbSet<AmeiseImportvorlagefeldps> AmeiseImportvorlagefeldps { get; set; }
        public virtual DbSet<AmeiseImportvorlagefilter> AmeiseImportvorlagefilter { get; set; }
        public virtual DbSet<AmeiseUpdateOptimizer> AmeiseUpdateOptimizer { get; set; }
        public virtual DbSet<ArtikelBildShop> ArtikelBildShop { get; set; }
        public virtual DbSet<Artikelzustand> Artikelzustand { get; set; }
        public virtual DbSet<BestellposTypenName> BestellposTypenName { get; set; }
        public virtual DbSet<BinLocation> BinLocation { get; set; }
        public virtual DbSet<BinLocationItem> BinLocationItem { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<CustomerAttribute> CustomerAttribute { get; set; }
        public virtual DbSet<CustomerBillToAddress> CustomerBillToAddress { get; set; }
        public virtual DbSet<CustomerGroup> CustomerGroup { get; set; }
        public virtual DbSet<CustomerOtherAddress> CustomerOtherAddress { get; set; }
        public virtual DbSet<CustomerShipToAddress> CustomerShipToAddress { get; set; }
        public virtual DbSet<DeliveryNote> DeliveryNote { get; set; }
        public virtual DbSet<DeliveryNoteBillToAddress> DeliveryNoteBillToAddress { get; set; }
        public virtual DbSet<DeliveryNoteFbabarcode> DeliveryNoteFbabarcode { get; set; }
        public virtual DbSet<DeliveryNotePosition> DeliveryNotePosition { get; set; }
        public virtual DbSet<DeliveryNotePositionConfiguration> DeliveryNotePositionConfiguration { get; set; }
        public virtual DbSet<DeliveryNotePositionDeliveryDetails> DeliveryNotePositionDeliveryDetails { get; set; }
        public virtual DbSet<DeliveryNoteShipToAddress> DeliveryNoteShipToAddress { get; set; }
        public virtual DbSet<Dunning> Dunning { get; set; }
        public virtual DbSet<DunningInvoice> DunningInvoice { get; set; }
        public virtual DbSet<DunningInvoiceBillToAddress> DunningInvoiceBillToAddress { get; set; }
        public virtual DbSet<DunningInvoicePayments> DunningInvoicePayments { get; set; }
        public virtual DbSet<EbayAlienitem> EbayAlienitem { get; set; }
        public virtual DbSet<EbayAttributSetArray> EbayAttributSetArray { get; set; }
        public virtual DbSet<EbayBeschreibungstemplate> EbayBeschreibungstemplate { get; set; }
        public virtual DbSet<EbayBestoffer> EbayBestoffer { get; set; }
        public virtual DbSet<EbayBuyer> EbayBuyer { get; set; }
        public virtual DbSet<EbayCheckout> EbayCheckout { get; set; }
        public virtual DbSet<EbayCheckoutpos> EbayCheckoutpos { get; set; }
        public virtual DbSet<EbayCoposeigenschaft> EbayCoposeigenschaft { get; set; }
        public virtual DbSet<EbayDataFeedback> EbayDataFeedback { get; set; }
        public virtual DbSet<EbayDataFeedbackIn> EbayDataFeedbackIn { get; set; }
        public virtual DbSet<EbayDataFeedbackOut> EbayDataFeedbackOut { get; set; }
        public virtual DbSet<EbayDataFeedbackmgr> EbayDataFeedbackmgr { get; set; }
        public virtual DbSet<EbayDataHtmltemplatetagcontent> EbayDataHtmltemplatetagcontent { get; set; }
        public virtual DbSet<EbayDataMembermessageIn> EbayDataMembermessageIn { get; set; }
        public virtual DbSet<EbayDataMembermessageOut> EbayDataMembermessageOut { get; set; }
        public virtual DbSet<EbayDataStore> EbayDataStore { get; set; }
        public virtual DbSet<EbayDeAttribute> EbayDeAttribute { get; set; }
        public virtual DbSet<EbayDeCategories> EbayDeCategories { get; set; }
        public virtual DbSet<EbayDeCategory2Cs> EbayDeCategory2Cs { get; set; }
        public virtual DbSet<EbayDeCondition> EbayDeCondition { get; set; }
        public virtual DbSet<EbayDeDependency> EbayDeDependency { get; set; }
        public virtual DbSet<EbayDeGebAngebotsgebuehr> EbayDeGebAngebotsgebuehr { get; set; }
        public virtual DbSet<EbayDeGebAngebotsgebuehrausnahmen> EbayDeGebAngebotsgebuehrausnahmen { get; set; }
        public virtual DbSet<EbayDeGebErweiterungen> EbayDeGebErweiterungen { get; set; }
        public virtual DbSet<EbayDeIs> EbayDeIs { get; set; }
        public virtual DbSet<EbayDeIsglobalname> EbayDeIsglobalname { get; set; }
        public virtual DbSet<EbayDeIsglobalvalue> EbayDeIsglobalvalue { get; set; }
        public virtual DbSet<EbayDeIsrelation> EbayDeIsrelation { get; set; }
        public virtual DbSet<EbayDeIsvalue> EbayDeIsvalue { get; set; }
        public virtual DbSet<EbayDeLaender> EbayDeLaender { get; set; }
        public virtual DbSet<EbayDeSidewideCs> EbayDeSidewideCs { get; set; }
        public virtual DbSet<EbayDeSidewideExCategories> EbayDeSidewideExCategories { get; set; }
        public virtual DbSet<EbayDeUpdateTables> EbayDeUpdateTables { get; set; }
        public virtual DbSet<EbayDeValidationrules> EbayDeValidationrules { get; set; }
        public virtual DbSet<EbayDeValue> EbayDeValue { get; set; }
        public virtual DbSet<EbayDeVersandarten> EbayDeVersandarten { get; set; }
        public virtual DbSet<EbayDeVersandlaender> EbayDeVersandlaender { get; set; }
        public virtual DbSet<EbayDeVersions> EbayDeVersions { get; set; }
        public virtual DbSet<EbayDeWaehrung> EbayDeWaehrung { get; set; }
        public virtual DbSet<EbayDeZahlungsmethoden> EbayDeZahlungsmethoden { get; set; }
        public virtual DbSet<EbayDeleteCoPos> EbayDeleteCoPos { get; set; }
        public virtual DbSet<EbayEinstellungen> EbayEinstellungen { get; set; }
        public virtual DbSet<EbayGeaenderteLaufendeAngebote> EbayGeaenderteLaufendeAngebote { get; set; }
        public virtual DbSet<EbayGlobaletexte> EbayGlobaletexte { get; set; }
        public virtual DbSet<EbayInternationalShippingServiceOption> EbayInternationalShippingServiceOption { get; set; }
        public virtual DbSet<EbayItem> EbayItem { get; set; }
        public virtual DbSet<EbayItem2kombi> EbayItem2kombi { get; set; }
        public virtual DbSet<EbayItem2xsell> EbayItem2xsell { get; set; }
        public virtual DbSet<EbayItemAdderror> EbayItemAdderror { get; set; }
        public virtual DbSet<EbayItemDuplicateLog> EbayItemDuplicateLog { get; set; }
        public virtual DbSet<EbayItemReviseerror> EbayItemReviseerror { get; set; }
        public virtual DbSet<EbayItemcompBike> EbayItemcompBike { get; set; }
        public virtual DbSet<EbayItemcompatibility> EbayItemcompatibility { get; set; }
        public virtual DbSet<EbayLastSynch> EbayLastSynch { get; set; }
        public virtual DbSet<EbayLeecherVariationMapping> EbayLeecherVariationMapping { get; set; }
        public virtual DbSet<EbayLog> EbayLog { get; set; }
        public virtual DbSet<EbayLogbuch> EbayLogbuch { get; set; }
        public virtual DbSet<EbayMapitem> EbayMapitem { get; set; }
        public virtual DbSet<EbayMapitemArtikelZuordnungen> EbayMapitemArtikelZuordnungen { get; set; }
        public virtual DbSet<EbayMapitemSuchStrings> EbayMapitemSuchStrings { get; set; }
        public virtual DbSet<EbayPlanung> EbayPlanung { get; set; }
        public virtual DbSet<EbayQueueOut> EbayQueueOut { get; set; }
        public virtual DbSet<EbayShippingCarrierCode> EbayShippingCarrierCode { get; set; }
        public virtual DbSet<EbayShippingServiceOptions> EbayShippingServiceOptions { get; set; }
        public virtual DbSet<EbayShippingprofiles> EbayShippingprofiles { get; set; }
        public virtual DbSet<EbayShopCategory> EbayShopCategory { get; set; }
        public virtual DbSet<EbaySpecific> EbaySpecific { get; set; }
        public virtual DbSet<EbaySynch> EbaySynch { get; set; }
        public virtual DbSet<EbaySynchartikel> EbaySynchartikel { get; set; }
        public virtual DbSet<EbayTransaction> EbayTransaction { get; set; }
        public virtual DbSet<EbayTransactionDeleted> EbayTransactionDeleted { get; set; }
        public virtual DbSet<EbayUser> EbayUser { get; set; }
        public virtual DbSet<EbayUsermessagequeue> EbayUsermessagequeue { get; set; }
        public virtual DbSet<EbayUserprofile> EbayUserprofile { get; set; }
        public virtual DbSet<EbayUsersites> EbayUsersites { get; set; }
        public virtual DbSet<EbayUsertexte> EbayUsertexte { get; set; }
        public virtual DbSet<EbayVersandOut> EbayVersandOut { get; set; }
        public virtual DbSet<EbayVersandZahlung> EbayVersandZahlung { get; set; }
        public virtual DbSet<EbayVwEignertext> EbayVwEignertext { get; set; }
        public virtual DbSet<EbayVwHtmltemplate> EbayVwHtmltemplate { get; set; }
        public virtual DbSet<EbayVwHtmltemplatedata> EbayVwHtmltemplatedata { get; set; }
        public virtual DbSet<EbayVwHtmltemplatepreview> EbayVwHtmltemplatepreview { get; set; }
        public virtual DbSet<EbayVwHtmltemplaterendered> EbayVwHtmltemplaterendered { get; set; }
        public virtual DbSet<EbayVwHtmltemplatetag> EbayVwHtmltemplatetag { get; set; }
        public virtual DbSet<EbayXxBearbeitungszeiten> EbayXxBearbeitungszeiten { get; set; }
        public virtual DbSet<EbayXxCategories> EbayXxCategories { get; set; }
        public virtual DbSet<EbayXxCondition> EbayXxCondition { get; set; }
        public virtual DbSet<EbayXxIs> EbayXxIs { get; set; }
        public virtual DbSet<EbayXxIsglobalname> EbayXxIsglobalname { get; set; }
        public virtual DbSet<EbayXxIsglobalvalue> EbayXxIsglobalvalue { get; set; }
        public virtual DbSet<EbayXxIsrelation> EbayXxIsrelation { get; set; }
        public virtual DbSet<EbayXxIsvalue> EbayXxIsvalue { get; set; }
        public virtual DbSet<EbayXxLaufzeiten> EbayXxLaufzeiten { get; set; }
        public virtual DbSet<EbayXxRueckgabe> EbayXxRueckgabe { get; set; }
        public virtual DbSet<EbayXxSites> EbayXxSites { get; set; }
        public virtual DbSet<EbayXxVersandarten> EbayXxVersandarten { get; set; }
        public virtual DbSet<EbayXxVersandlaender> EbayXxVersandlaender { get; set; }
        public virtual DbSet<EbayXxZahlungsmethoden> EbayXxZahlungsmethoden { get; set; }
        public virtual DbSet<EbayZahlungOut> EbayZahlungOut { get; set; }
        public virtual DbSet<FulfilmentOrder> FulfilmentOrder { get; set; }
        public virtual DbSet<FulfilmentOrderPosition> FulfilmentOrderPosition { get; set; }
        public virtual DbSet<FulfilmentOrderShipToAddress> FulfilmentOrderShipToAddress { get; set; }
        public virtual DbSet<InventoryDifferenceList> InventoryDifferenceList { get; set; }
        public virtual DbSet<InventoryDifferenceListPosition> InventoryDifferenceListPosition { get; set; }
        public virtual DbSet<Invoice> Invoice { get; set; }
        public virtual DbSet<InvoiceBillToAddress> InvoiceBillToAddress { get; set; }
        public virtual DbSet<InvoiceCorrection> InvoiceCorrection { get; set; }
        public virtual DbSet<InvoiceCorrectionBillToAddress> InvoiceCorrectionBillToAddress { get; set; }
        public virtual DbSet<InvoiceCorrectionPosition> InvoiceCorrectionPosition { get; set; }
        public virtual DbSet<InvoiceCorrectionPositionConfiguration> InvoiceCorrectionPositionConfiguration { get; set; }
        public virtual DbSet<InvoiceCorrectionPositionDeliveryDetails> InvoiceCorrectionPositionDeliveryDetails { get; set; }
        public virtual DbSet<InvoicePaymentInformation> InvoicePaymentInformation { get; set; }
        public virtual DbSet<InvoicePayments> InvoicePayments { get; set; }
        public virtual DbSet<InvoicePosition> InvoicePosition { get; set; }
        public virtual DbSet<InvoicePositionConfiguration> InvoicePositionConfiguration { get; set; }
        public virtual DbSet<InvoicePositionDeliveryDetails> InvoicePositionDeliveryDetails { get; set; }
        public virtual DbSet<InvoiceShipToAddress> InvoiceShipToAddress { get; set; }
        public virtual DbSet<Lieferantenfaktoren> Lieferantenfaktoren { get; set; }
        public virtual DbSet<LvAbonnements> LvAbonnements { get; set; }
        public virtual DbSet<LvAbrechnung> LvAbrechnung { get; set; }
        public virtual DbSet<LvAbrechnungEinzelnachweis> LvAbrechnungEinzelnachweis { get; set; }
        public virtual DbSet<LvAbrechnungPositionen> LvAbrechnungPositionen { get; set; }
        public virtual DbSet<LvAmazonAbgleichAngebote> LvAmazonAbgleichAngebote { get; set; }
        public virtual DbSet<LvAmazonAbgleichBestellungPos> LvAmazonAbgleichBestellungPos { get; set; }
        public virtual DbSet<LvAmazonAbgleichBestellungen> LvAmazonAbgleichBestellungen { get; set; }
        public virtual DbSet<LvAmazonAbrechnungsdaten> LvAmazonAbrechnungsdaten { get; set; }
        public virtual DbSet<LvAmazonAbrechnungsdatenPos> LvAmazonAbrechnungsdatenPos { get; set; }
        public virtual DbSet<LvAmazonAngebote> LvAmazonAngebote { get; set; }
        public virtual DbSet<LvAmazonAufzuschaltendeAngebote> LvAmazonAufzuschaltendeAngebote { get; set; }
        public virtual DbSet<LvAmazonBestellungPos> LvAmazonBestellungPos { get; set; }
        public virtual DbSet<LvAmazonBestellungen> LvAmazonBestellungen { get; set; }
        public virtual DbSet<LvAmazonFulfillmentAuftraege> LvAmazonFulfillmentAuftraege { get; set; }
        public virtual DbSet<LvAmazonFulfillmentAuftragPos> LvAmazonFulfillmentAuftragPos { get; set; }
        public virtual DbSet<LvAmazonItems> LvAmazonItems { get; set; }
        public virtual DbSet<LvAmazonLogsitzung> LvAmazonLogsitzung { get; set; }
        public virtual DbSet<LvAngebote> LvAngebote { get; set; }
        public virtual DbSet<LvAngebotsposition> LvAngebotsposition { get; set; }
        public virtual DbSet<LvAngebotsverwaltung> LvAngebotsverwaltung { get; set; }
        public virtual DbSet<LvArtikelVerkaeufe> LvArtikelVerkaeufe { get; set; }
        public virtual DbSet<LvAuftraege> LvAuftraege { get; set; }
        public virtual DbSet<LvAuftrag> LvAuftrag { get; set; }
        public virtual DbSet<LvAuftragsposition> LvAuftragsposition { get; set; }
        public virtual DbSet<LvAuftragsposition1> LvAuftragsposition1 { get; set; }
        public virtual DbSet<LvAuftragspositionsvariation> LvAuftragspositionsvariation { get; set; }
        public virtual DbSet<LvAuftragsverwaltung> LvAuftragsverwaltung { get; set; }
        public virtual DbSet<LvAuftragsverwaltungCache> LvAuftragsverwaltungCache { get; set; }
        public virtual DbSet<LvAuftragsverwaltungDetail> LvAuftragsverwaltungDetail { get; set; }
        public virtual DbSet<LvBestellPosGutschriftErstellbar> LvBestellPosGutschriftErstellbar { get; set; }
        public virtual DbSet<LvBestellPositionen> LvBestellPositionen { get; set; }
        public virtual DbSet<LvBestellung> LvBestellung { get; set; }
        public virtual DbSet<LvDbeSlogeintrag> LvDbeSlogeintrag { get; set; }
        public virtual DbSet<LvEbayAngebote> LvEbayAngebote { get; set; }
        public virtual DbSet<LvEbayKundenanfragen> LvEbayKundenanfragen { get; set; }
        public virtual DbSet<LvEbayKundenfeedback> LvEbayKundenfeedback { get; set; }
        public virtual DbSet<LvEbayPreisvorschlaege> LvEbayPreisvorschlaege { get; set; }
        public virtual DbSet<LvEbayTransactions> LvEbayTransactions { get; set; }
        public virtual DbSet<LvEbayZuAktualisierendeAngebote> LvEbayZuAktualisierendeAngebote { get; set; }
        public virtual DbSet<LvEingangsrechnung> LvEingangsrechnung { get; set; }
        public virtual DbSet<LvEingangsrechnungBestellung> LvEingangsrechnungBestellung { get; set; }
        public virtual DbSet<LvEingangsrechnungPos> LvEingangsrechnungPos { get; set; }
        public virtual DbSet<LvEinkaufsliste> LvEinkaufsliste { get; set; }
        public virtual DbSet<LvFulfillmentauftrag> LvFulfillmentauftrag { get; set; }
        public virtual DbSet<LvFulfillmentauftragsposition> LvFulfillmentauftragsposition { get; set; }
        public virtual DbSet<LvJtlTrackingPakete> LvJtlTrackingPakete { get; set; }
        public virtual DbSet<LvKunde> LvKunde { get; set; }
        public virtual DbSet<LvKundenDaten> LvKundenDaten { get; set; }
        public virtual DbSet<LvLagerUebersicht> LvLagerUebersicht { get; set; }
        public virtual DbSet<LvLagerkosten> LvLagerkosten { get; set; }
        public virtual DbSet<LvLagerkostenRegeln> LvLagerkostenRegeln { get; set; }
        public virtual DbSet<LvLagerkostenUebersicht> LvLagerkostenUebersicht { get; set; }
        public virtual DbSet<LvLieferant> LvLieferant { get; set; }
        public virtual DbSet<LvLieferschein> LvLieferschein { get; set; }
        public virtual DbSet<LvLieferscheinWarenlagerausgang> LvLieferscheinWarenlagerausgang { get; set; }
        public virtual DbSet<LvLieferscheinpaket> LvLieferscheinpaket { get; set; }
        public virtual DbSet<LvLieferscheinposition> LvLieferscheinposition { get; set; }
        public virtual DbSet<LvLieferschwellen> LvLieferschwellen { get; set; }
        public virtual DbSet<LvLogbuch> LvLogbuch { get; set; }
        public virtual DbSet<LvLogeintrag> LvLogeintrag { get; set; }
        public virtual DbSet<LvLogsitzung> LvLogsitzung { get; set; }
        public virtual DbSet<LvLogsitzung1> LvLogsitzung1 { get; set; }
        public virtual DbSet<LvOffenePosten> LvOffenePosten { get; set; }
        public virtual DbSet<LvPakete> LvPakete { get; set; }
        public virtual DbSet<LvPickliste> LvPickliste { get; set; }
        public virtual DbSet<LvPicklistenposition> LvPicklistenposition { get; set; }
        public virtual DbSet<LvPosLogeintrag> LvPosLogeintrag { get; set; }
        public virtual DbSet<LvPreisanfrage> LvPreisanfrage { get; set; }
        public virtual DbSet<LvPreisanfragePos> LvPreisanfragePos { get; set; }
        public virtual DbSet<LvRechnungen> LvRechnungen { get; set; }
        public virtual DbSet<LvRechnungskorrekturen> LvRechnungskorrekturen { get; set; }
        public virtual DbSet<LvRechnungskorrekturposition> LvRechnungskorrekturposition { get; set; }
        public virtual DbSet<LvRechnungskorrekturverwaltung> LvRechnungskorrekturverwaltung { get; set; }
        public virtual DbSet<LvRechnungsposition> LvRechnungsposition { get; set; }
        public virtual DbSet<LvRechnungsverwaltung> LvRechnungsverwaltung { get; set; }
        public virtual DbSet<LvRetoure> LvRetoure { get; set; }
        public virtual DbSet<LvRetourePosition> LvRetourePosition { get; set; }
        public virtual DbSet<LvRetouren> LvRetouren { get; set; }
        public virtual DbSet<LvRueckstandserinnerung> LvRueckstandserinnerung { get; set; }
        public virtual DbSet<LvRueckstandserinnerungLieferanten> LvRueckstandserinnerungLieferanten { get; set; }
        public virtual DbSet<LvRueckstandserinnerungsposition> LvRueckstandserinnerungsposition { get; set; }
        public virtual DbSet<LvUmsatzuebersicht> LvUmsatzuebersicht { get; set; }
        public virtual DbSet<LvVcsselfInvoiceLogeintrag> LvVcsselfInvoiceLogeintrag { get; set; }
        public virtual DbSet<LvWiederkehrendeAuftraegeVerwaltung> LvWiederkehrendeAuftraegeVerwaltung { get; set; }
        public virtual DbSet<LvWiederkehrenderAuftragPosition> LvWiederkehrenderAuftragPosition { get; set; }
        public virtual DbSet<LvZahlung> LvZahlung { get; set; }
        public virtual DbSet<LvZahlungsabgleichLogeintrag> LvZahlungsabgleichLogeintrag { get; set; }
        public virtual DbSet<LvZahlungsausgangLogeintrag> LvZahlungsausgangLogeintrag { get; set; }
        public virtual DbSet<LvZahlungsausganguebersicht> LvZahlungsausganguebersicht { get; set; }
        public virtual DbSet<LvZahlungszuordnung> LvZahlungszuordnung { get; set; }
        public virtual DbSet<Parcels> Parcels { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethod { get; set; }
        public virtual DbSet<PfAmazonAngebot> PfAmazonAngebot { get; set; }
        public virtual DbSet<PfAmazonAngebotExt> PfAmazonAngebotExt { get; set; }
        public virtual DbSet<PfAmazonAngebotFba> PfAmazonAngebotFba { get; set; }
        public virtual DbSet<PfAmazonAngebotMapping> PfAmazonAngebotMapping { get; set; }
        public virtual DbSet<PfAmazonAngebotNeu> PfAmazonAngebotNeu { get; set; }
        public virtual DbSet<PfAmazonAngebotNeuSettings> PfAmazonAngebotNeuSettings { get; set; }
        public virtual DbSet<PfAmazonAngebotSelbstErstellt> PfAmazonAngebotSelbstErstellt { get; set; }
        public virtual DbSet<PfAmazonAngebotVater> PfAmazonAngebotVater { get; set; }
        public virtual DbSet<PfAmazonApaPreis> PfAmazonApaPreis { get; set; }
        public virtual DbSet<PfAmazonApaUsersettings> PfAmazonApaUsersettings { get; set; }
        public virtual DbSet<PfAmazonBestandAnDatum> PfAmazonBestandAnDatum { get; set; }
        public virtual DbSet<PfAmazonBestellung> PfAmazonBestellung { get; set; }
        public virtual DbSet<PfAmazonBestellungStorno> PfAmazonBestellungStorno { get; set; }
        public virtual DbSet<PfAmazonBestellungVersand> PfAmazonBestellungVersand { get; set; }
        public virtual DbSet<PfAmazonBestellungpos> PfAmazonBestellungpos { get; set; }
        public virtual DbSet<PfAmazonBestellungstatus> PfAmazonBestellungstatus { get; set; }
        public virtual DbSet<PfAmazonComboboxImage> PfAmazonComboboxImage { get; set; }
        public virtual DbSet<PfAmazonDotLiquidMapping> PfAmazonDotLiquidMapping { get; set; }
        public virtual DbSet<PfAmazonFbaKommentar> PfAmazonFbaKommentar { get; set; }
        public virtual DbSet<PfAmazonFeederror> PfAmazonFeederror { get; set; }
        public virtual DbSet<PfAmazonGroup> PfAmazonGroup { get; set; }
        public virtual DbSet<PfAmazonItem> PfAmazonItem { get; set; }
        public virtual DbSet<PfAmazonItemMapping> PfAmazonItemMapping { get; set; }
        public virtual DbSet<PfAmazonLagerbewegung> PfAmazonLagerbewegung { get; set; }
        public virtual DbSet<PfAmazonLogZuordnen> PfAmazonLogZuordnen { get; set; }
        public virtual DbSet<PfAmazonMappingAmazonVariationen> PfAmazonMappingAmazonVariationen { get; set; }
        public virtual DbSet<PfAmazonMappingItemsToVariationTheme> PfAmazonMappingItemsToVariationTheme { get; set; }
        public virtual DbSet<PfAmazonMappingVariationThemes> PfAmazonMappingVariationThemes { get; set; }
        public virtual DbSet<PfAmazonMappingVariationsnamen> PfAmazonMappingVariationsnamen { get; set; }
        public virtual DbSet<PfAmazonMappingVariationswerte> PfAmazonMappingVariationswerte { get; set; }
        public virtual DbSet<PfAmazonQueue> PfAmazonQueue { get; set; }
        public virtual DbSet<PfAmazonRepricehistory> PfAmazonRepricehistory { get; set; }
        public virtual DbSet<PfAmazonRetourmeldung> PfAmazonRetourmeldung { get; set; }
        public virtual DbSet<PfAmazonRetourmeldungadjustment> PfAmazonRetourmeldungadjustment { get; set; }
        public virtual DbSet<PfAmazonRetourpos> PfAmazonRetourpos { get; set; }
        public virtual DbSet<PfAmazonSettlement> PfAmazonSettlement { get; set; }
        public virtual DbSet<PfAmazonSettlementpos> PfAmazonSettlementpos { get; set; }
        public virtual DbSet<PfAmazonSteuercodes> PfAmazonSteuercodes { get; set; }
        public virtual DbSet<PfAmazonValidation> PfAmazonValidation { get; set; }
        public virtual DbSet<PfAmazonVcs> PfAmazonVcs { get; set; }
        public virtual DbSet<PfAmazonVcsHistory> PfAmazonVcsHistory { get; set; }
        public virtual DbSet<PfAmazonVersandgruppen> PfAmazonVersandgruppen { get; set; }
        public virtual DbSet<PfAmazonXmlKat> PfAmazonXmlKat { get; set; }
        public virtual DbSet<PfAmazonXmlTrans> PfAmazonXmlTrans { get; set; }
        public virtual DbSet<PfAmazonXmlVersion> PfAmazonXmlVersion { get; set; }
        public virtual DbSet<PfBestellposVater> PfBestellposVater { get; set; }
        public virtual DbSet<PfListviewColors> PfListviewColors { get; set; }
        public virtual DbSet<PfLogbuch> PfLogbuch { get; set; }
        public virtual DbSet<PfLveinstellungen> PfLveinstellungen { get; set; }
        public virtual DbSet<PfLvsummary> PfLvsummary { get; set; }
        public virtual DbSet<PfSynccheckboxen> PfSynccheckboxen { get; set; }
        public virtual DbSet<PfUser> PfUser { get; set; }
        public virtual DbSet<PickList> PickList { get; set; }
        public virtual DbSet<PickListPositionOrder> PickListPositionOrder { get; set; }
        public virtual DbSet<PickListPositionOrderConfiguration> PickListPositionOrderConfiguration { get; set; }
        public virtual DbSet<PickListPositionWarehouse> PickListPositionWarehouse { get; set; }
        public virtual DbSet<PickListPositionWarehouseConfiguration> PickListPositionWarehouseConfiguration { get; set; }
        public virtual DbSet<PickListSalesOrder> PickListSalesOrder { get; set; }
        public virtual DbSet<PickListSalesOrderBillToAddress> PickListSalesOrderBillToAddress { get; set; }
        public virtual DbSet<PickListSalesOrderShipToAddress> PickListSalesOrderShipToAddress { get; set; }
        public virtual DbSet<Platform> Platform { get; set; }
        public virtual DbSet<PosAnfangEnde> PosAnfangEnde { get; set; }
        public virtual DbSet<PosAuswahl> PosAuswahl { get; set; }
        public virtual DbSet<PosAuswahlPosition> PosAuswahlPosition { get; set; }
        public virtual DbSet<PosBenutzer> PosBenutzer { get; set; }
        public virtual DbSet<PosBon> PosBon { get; set; }
        public virtual DbSet<PosBonIc> PosBonIc { get; set; }
        public virtual DbSet<PosBonIcwarenLager> PosBonIcwarenLager { get; set; }
        public virtual DbSet<PosBonPosition> PosBonPosition { get; set; }
        public virtual DbSet<PosBonPositionEigenschaftwert> PosBonPositionEigenschaftwert { get; set; }
        public virtual DbSet<PosBonPositionRueckgabe> PosBonPositionRueckgabe { get; set; }
        public virtual DbSet<PosBonPositionStorno> PosBonPositionStorno { get; set; }
        public virtual DbSet<PosBonRueckgabe> PosBonRueckgabe { get; set; }
        public virtual DbSet<PosBonStorno> PosBonStorno { get; set; }
        public virtual DbSet<PosBonpark> PosBonpark { get; set; }
        public virtual DbSet<PosDruckvorlagen> PosDruckvorlagen { get; set; }
        public virtual DbSet<PosEinnahmeAusgabe> PosEinnahmeAusgabe { get; set; }
        public virtual DbSet<PosElPayPayment> PosElPayPayment { get; set; }
        public virtual DbSet<PosGutscheine> PosGutscheine { get; set; }
        public virtual DbSet<PosHardwareTreiber> PosHardwareTreiber { get; set; }
        public virtual DbSet<PosKassen> PosKassen { get; set; }
        public virtual DbSet<PosKassenBenutzer> PosKassenBenutzer { get; set; }
        public virtual DbSet<PosKassenBuch> PosKassenBuch { get; set; }
        public virtual DbSet<PosKassenKonfiguration> PosKassenKonfiguration { get; set; }
        public virtual DbSet<PosKassenOption> PosKassenOption { get; set; }
        public virtual DbSet<PosKassenPlugin> PosKassenPlugin { get; set; }
        public virtual DbSet<PosKassensturz> PosKassensturz { get; set; }
        public virtual DbSet<PosKonfiguration> PosKonfiguration { get; set; }
        public virtual DbSet<PosKundenBild> PosKundenBild { get; set; }
        public virtual DbSet<PosLaufendeNummern> PosLaufendeNummern { get; set; }
        public virtual DbSet<PosLog> PosLog { get; set; }
        public virtual DbSet<PosMitarbeiterBild> PosMitarbeiterBild { get; set; }
        public virtual DbSet<PosPlugin> PosPlugin { get; set; }
        public virtual DbSet<PosShopgutscheine> PosShopgutscheine { get; set; }
        public virtual DbSet<PosSignatur> PosSignatur { get; set; }
        public virtual DbSet<PosSplitzahlung> PosSplitzahlung { get; set; }
        public virtual DbSet<PosSystemLog> PosSystemLog { get; set; }
        public virtual DbSet<PosTeleCashPayment> PosTeleCashPayment { get; set; }
        public virtual DbSet<PosUmsaetze> PosUmsaetze { get; set; }
        public virtual DbSet<PosZvt700payment> PosZvt700payment { get; set; }
        public virtual DbSet<PosefstaBelege> PosefstaBelege { get; set; }
        public virtual DbSet<PosefstaDropOut> PosefstaDropOut { get; set; }
        public virtual DbSet<PosgastroDrucker> PosgastroDrucker { get; set; }
        public virtual DbSet<PosgastroDruckerWarengruppe> PosgastroDruckerWarengruppe { get; set; }
        public virtual DbSet<PosgastroGastroBon> PosgastroGastroBon { get; set; }
        public virtual DbSet<PosgastroItems> PosgastroItems { get; set; }
        public virtual DbSet<PosgastroRaum> PosgastroRaum { get; set; }
        public virtual DbSet<PosgastroTischSperre> PosgastroTischSperre { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrder { get; set; }
        public virtual DbSet<PurchaseOrderBillToAddress> PurchaseOrderBillToAddress { get; set; }
        public virtual DbSet<PurchaseOrderPosition> PurchaseOrderPosition { get; set; }
        public virtual DbSet<PurchaseOrderShipToAddress> PurchaseOrderShipToAddress { get; set; }
        public virtual DbSet<PurchaseOrderSupplier> PurchaseOrderSupplier { get; set; }
        public virtual DbSet<ReceiptOfPayment> ReceiptOfPayment { get; set; }
        public virtual DbSet<SalesOrder> SalesOrder { get; set; }
        public virtual DbSet<SalesOrderAttribute> SalesOrderAttribute { get; set; }
        public virtual DbSet<SalesOrderBillToAddress> SalesOrderBillToAddress { get; set; }
        public virtual DbSet<SalesOrderPaymentInformation> SalesOrderPaymentInformation { get; set; }
        public virtual DbSet<SalesOrderPayments> SalesOrderPayments { get; set; }
        public virtual DbSet<SalesOrderPosition> SalesOrderPosition { get; set; }
        public virtual DbSet<SalesOrderPositionConfiguration> SalesOrderPositionConfiguration { get; set; }
        public virtual DbSet<SalesOrderPositionDeliveryDetails> SalesOrderPositionDeliveryDetails { get; set; }
        public virtual DbSet<SalesOrderShipToAddress> SalesOrderShipToAddress { get; set; }
        public virtual DbSet<SalesQuotation> SalesQuotation { get; set; }
        public virtual DbSet<SalesQuotationBillToAddress> SalesQuotationBillToAddress { get; set; }
        public virtual DbSet<SalesQuotationPosition> SalesQuotationPosition { get; set; }
        public virtual DbSet<SalesQuotationPositionConfiguration> SalesQuotationPositionConfiguration { get; set; }
        public virtual DbSet<SalesQuotationPositionDeliveryDetails> SalesQuotationPositionDeliveryDetails { get; set; }
        public virtual DbSet<SalesQuotationShipToAddress> SalesQuotationShipToAddress { get; set; }
        public virtual DbSet<ShippingMethod> ShippingMethod { get; set; }
        public virtual DbSet<ShippingNotification> ShippingNotification { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<TAbrechnung> TAbrechnung { get; set; }
        public virtual DbSet<TAbrechnungEinzelnachweis> TAbrechnungEinzelnachweis { get; set; }
        public virtual DbSet<TAbrechnungLagerplatz> TAbrechnungLagerplatz { get; set; }
        public virtual DbSet<TAbrechnungLagerplatzPreview> TAbrechnungLagerplatzPreview { get; set; }
        public virtual DbSet<TAbrechnungPos> TAbrechnungPos { get; set; }
        public virtual DbSet<TAbverkauf> TAbverkauf { get; set; }
        public virtual DbSet<TAdressExportFelder> TAdressExportFelder { get; set; }
        public virtual DbSet<TAdressExportFelderErweitert> TAdressExportFelderErweitert { get; set; }
        public virtual DbSet<TAdressExportVorlage> TAdressExportVorlage { get; set; }
        public virtual DbSet<TAdresse> TAdresse { get; set; }
        public virtual DbSet<TAgentAngeseheneTickets> TAgentAngeseheneTickets { get; set; }
        public virtual DbSet<TAgentLiestTicket> TAgentLiestTicket { get; set; }
        public virtual DbSet<TAktiverAbgleich> TAktiverAbgleich { get; set; }
        public virtual DbSet<TAmazonAngebotFehler> TAmazonAngebotFehler { get; set; }
        public virtual DbSet<TAmazonBuyBoxStrategy> TAmazonBuyBoxStrategy { get; set; }
        public virtual DbSet<TAmazonCompetitor> TAmazonCompetitor { get; set; }
        public virtual DbSet<TAmazonCompetitorAsinStrategy> TAmazonCompetitorAsinStrategy { get; set; }
        public virtual DbSet<TAmazonShippingDruckereinstellungen> TAmazonShippingDruckereinstellungen { get; set; }
        public virtual DbSet<TAmazonTask> TAmazonTask { get; set; }
        public virtual DbSet<TAmazonVersandschnittstellenkonfiguration> TAmazonVersandschnittstellenkonfiguration { get; set; }
        public virtual DbSet<TAmazonabgleichLogsitzung> TAmazonabgleichLogsitzung { get; set; }
        public virtual DbSet<TAmazonbestellpositionVcszuordnung> TAmazonbestellpositionVcszuordnung { get; set; }
        public virtual DbSet<TAnfangsNr> TAnfangsNr { get; set; }
        public virtual DbSet<TAntwortkanal> TAntwortkanal { get; set; }
        public virtual DbSet<TArtikel> TArtikel { get; set; }
        public virtual DbSet<TArtikelAbnahme> TArtikelAbnahme { get; set; }
        public virtual DbSet<TArtikelAttribut> TArtikelAttribut { get; set; }
        public virtual DbSet<TArtikelAttributSprache> TArtikelAttributSprache { get; set; }
        public virtual DbSet<TArtikelBeschreibung> TArtikelBeschreibung { get; set; }
        public virtual DbSet<TArtikelEinkaufsliste> TArtikelEinkaufsliste { get; set; }
        public virtual DbSet<TArtikelEpid> TArtikelEpid { get; set; }
        public virtual DbSet<TArtikelHistory> TArtikelHistory { get; set; }
        public virtual DbSet<TArtikelLabel> TArtikelLabel { get; set; }
        public virtual DbSet<TArtikelLagerOrt> TArtikelLagerOrt { get; set; }
        public virtual DbSet<TArtikelMehrzweckGutschein> TArtikelMehrzweckGutschein { get; set; }
        public virtual DbSet<TArtikelMerkmal> TArtikelMerkmal { get; set; }
        public virtual DbSet<TArtikelRankingGlobal> TArtikelRankingGlobal { get; set; }
        public virtual DbSet<TArtikelRankingZeitraum> TArtikelRankingZeitraum { get; set; }
        public virtual DbSet<TArtikelShop> TArtikelShop { get; set; }
        public virtual DbSet<TArtikelSichtbarkeit> TArtikelSichtbarkeit { get; set; }
        public virtual DbSet<TArtikelSonderpreis> TArtikelSonderpreis { get; set; }
        public virtual DbSet<TArtikelSpeicher> TArtikelSpeicher { get; set; }
        public virtual DbSet<TArtikelSperre> TArtikelSperre { get; set; }
        public virtual DbSet<TArtikelUpload> TArtikelUpload { get; set; }
        public virtual DbSet<TArtikelUploadSprache> TArtikelUploadSprache { get; set; }
        public virtual DbSet<TArtikelZustand> TArtikelZustand { get; set; }
        public virtual DbSet<TArtikelbildPlattform> TArtikelbildPlattform { get; set; }
        public virtual DbSet<TArtikelbildPlattformSeo> TArtikelbildPlattformSeo { get; set; }
        public virtual DbSet<TAttribut> TAttribut { get; set; }
        public virtual DbSet<TAttributShop> TAttributShop { get; set; }
        public virtual DbSet<TAttributSprache> TAttributSprache { get; set; }
        public virtual DbSet<TAttributWarengruppe> TAttributWarengruppe { get; set; }
        public virtual DbSet<TAuftragLabel> TAuftragLabel { get; set; }
        public virtual DbSet<TAuftragMapping> TAuftragMapping { get; set; }
        public virtual DbSet<TAuftragPositionAttribut> TAuftragPositionAttribut { get; set; }
        public virtual DbSet<TAuftragPositionMapping> TAuftragPositionMapping { get; set; }
        public virtual DbSet<TAusgangskanalEmail> TAusgangskanalEmail { get; set; }
        public virtual DbSet<TAusgangskanalEmailBenutzerSignatur> TAusgangskanalEmailBenutzerSignatur { get; set; }
        public virtual DbSet<TAuthCode> TAuthCode { get; set; }
        public virtual DbSet<TB2bartikel> TB2bartikel { get; set; }
        public virtual DbSet<TBackup> TBackup { get; set; }
        public virtual DbSet<TBemerkungen> TBemerkungen { get; set; }
        public virtual DbSet<TBenutzerAktiv> TBenutzerAktiv { get; set; }
        public virtual DbSet<TBenutzerFirma> TBenutzerFirma { get; set; }
        public virtual DbSet<TBenutzerLog> TBenutzerLog { get; set; }
        public virtual DbSet<TBenutzerSuchfilter> TBenutzerSuchfilter { get; set; }
        public virtual DbSet<TBestellHinweis> TBestellHinweis { get; set; }
        public virtual DbSet<TBestellung> TBestellung { get; set; }
        public virtual DbSet<TBestellungAlt> TBestellungAlt { get; set; }
        public virtual DbSet<TBestellungAttribute> TBestellungAttribute { get; set; }
        public virtual DbSet<TBestellungAttributeKey> TBestellungAttributeKey { get; set; }
        public virtual DbSet<TBestellungColor> TBestellungColor { get; set; }
        public virtual DbSet<TBestellungDokument> TBestellungDokument { get; set; }
        public virtual DbSet<TBestellungEckDaten> TBestellungEckDaten { get; set; }
        public virtual DbSet<TBestellungGebuehr> TBestellungGebuehr { get; set; }
        public virtual DbSet<TBestellungKampagne> TBestellungKampagne { get; set; }
        public virtual DbSet<TBestellungPicklisteLock> TBestellungPicklisteLock { get; set; }
        public virtual DbSet<TBestellungSperre> TBestellungSperre { get; set; }
        public virtual DbSet<TBestellungWmsfreigabe> TBestellungWmsfreigabe { get; set; }
        public virtual DbSet<TBestellvorschlagPlugin> TBestellvorschlagPlugin { get; set; }
        public virtual DbSet<TBild> TBild { get; set; }
        public virtual DbSet<TBroken> TBroken { get; set; }
        public virtual DbSet<TBuchungsArt> TBuchungsArt { get; set; }
        public virtual DbSet<TBundesland> TBundesland { get; set; }
        public virtual DbSet<TCategoryRef> TCategoryRef { get; set; }
        public virtual DbSet<TConfiguration> TConfiguration { get; set; }
        public virtual DbSet<TConnectorKategorieTemp> TConnectorKategorieTemp { get; set; }
        public virtual DbSet<TConnectorStuecklisteTemp> TConnectorStuecklisteTemp { get; set; }
        public virtual DbSet<TCryptoSlot> TCryptoSlot { get; set; }
        public virtual DbSet<TCryptoVault> TCryptoVault { get; set; }
        public virtual DbSet<TCsvSettings> TCsvSettings { get; set; }
        public virtual DbSet<TCustomerQuery> TCustomerQuery { get; set; }
        public virtual DbSet<TCustomerQueryColumn> TCustomerQueryColumn { get; set; }
        public virtual DbSet<TCustomerQueryOverview> TCustomerQueryOverview { get; set; }
        public virtual DbSet<TCustomerQueryOverviewRecht> TCustomerQueryOverviewRecht { get; set; }
        public virtual DbSet<TCustomerQueryRecht> TCustomerQueryRecht { get; set; }
        public virtual DbSet<TCustomerQueryUser> TCustomerQueryUser { get; set; }
        public virtual DbSet<TDateityp> TDateityp { get; set; }
        public virtual DbSet<TDatevConfig> TDatevConfig { get; set; }
        public virtual DbSet<TDatevLogs> TDatevLogs { get; set; }
        public virtual DbSet<TDbHash> TDbHash { get; set; }
        public virtual DbSet<TDbeSlogeintrag> TDbeSlogeintrag { get; set; }
        public virtual DbSet<TDeliveryQueue> TDeliveryQueue { get; set; }
        public virtual DbSet<TDhlekp> TDhlekp { get; set; }
        public virtual DbSet<TDownload> TDownload { get; set; }
        public virtual DbSet<TDownloadShop> TDownloadShop { get; set; }
        public virtual DbSet<TDropShippingPos> TDropShippingPos { get; set; }
        public virtual DbSet<TDruckEinstellung> TDruckEinstellung { get; set; }
        public virtual DbSet<TDruckQueue> TDruckQueue { get; set; }
        public virtual DbSet<TDruckvorlage> TDruckvorlage { get; set; }
        public virtual DbSet<TDtaus> TDtaus { get; set; }
        public virtual DbSet<TEan> TEan { get; set; }
        public virtual DbSet<TEazyShippingVerpackQueue> TEazyShippingVerpackQueue { get; set; }
        public virtual DbSet<TEbayAbgleichLogeintrag> TEbayAbgleichLogeintrag { get; set; }
        public virtual DbSet<TEbayAbgleichLogsitzung> TEbayAbgleichLogsitzung { get; set; }
        public virtual DbSet<TEigenschaftKombiWert> TEigenschaftKombiWert { get; set; }
        public virtual DbSet<TEigenschaftSichtbarkeit> TEigenschaftSichtbarkeit { get; set; }
        public virtual DbSet<TEigenschaftSprache> TEigenschaftSprache { get; set; }
        public virtual DbSet<TEigenschaftWertAbhaengigkeit> TEigenschaftWertAbhaengigkeit { get; set; }
        public virtual DbSet<TEigenschaftWertAufpreis> TEigenschaftWertAufpreis { get; set; }
        public virtual DbSet<TEigenschaftWertPict> TEigenschaftWertPict { get; set; }
        public virtual DbSet<TEigenschaftWertSichtbarkeit> TEigenschaftWertSichtbarkeit { get; set; }
        public virtual DbSet<TEigenschaftWertSprache> TEigenschaftWertSprache { get; set; }
        public virtual DbSet<TEingangskanalEmail> TEingangskanalEmail { get; set; }
        public virtual DbSet<TEingangskanalEmailLabel> TEingangskanalEmailLabel { get; set; }
        public virtual DbSet<TEingangsrechnung> TEingangsrechnung { get; set; }
        public virtual DbSet<TEingangsrechnungPos> TEingangsrechnungPos { get; set; }
        public virtual DbSet<TEingangsrechnungPosZusatzkosten> TEingangsrechnungPosZusatzkosten { get; set; }
        public virtual DbSet<TEingangsrechnungzusatzkosten> TEingangsrechnungzusatzkosten { get; set; }
        public virtual DbSet<TEinheit> TEinheit { get; set; }
        public virtual DbSet<TEinheitSprache> TEinheitSprache { get; set; }
        public virtual DbSet<TEmailEinstellung> TEmailEinstellung { get; set; }
        public virtual DbSet<TEntityPlatform> TEntityPlatform { get; set; }
        public virtual DbSet<TEntityTracking> TEntityTracking { get; set; }
        public virtual DbSet<TErlaubterDateityp> TErlaubterDateityp { get; set; }
        public virtual DbSet<TErloeskonten> TErloeskonten { get; set; }
        public virtual DbSet<TErreichbarkeit> TErreichbarkeit { get; set; }
        public virtual DbSet<TErrorlog> TErrorlog { get; set; }
        public virtual DbSet<TEtikett> TEtikett { get; set; }
        public virtual DbSet<TFehler> TFehler { get; set; }
        public virtual DbSet<TFeldTyp> TFeldTyp { get; set; }
        public virtual DbSet<TFile> TFile { get; set; }
        public virtual DbSet<TFirmaUstIdNr> TFirmaUstIdNr { get; set; }
        public virtual DbSet<TFormular> TFormular { get; set; }
        public virtual DbSet<TFormularAnhangDaten> TFormularAnhangDaten { get; set; }
        public virtual DbSet<TFormularDruckEinstellung> TFormularDruckEinstellung { get; set; }
        public virtual DbSet<TFormularEmailEinstellung> TFormularEmailEinstellung { get; set; }
        public virtual DbSet<TFormularEmailVorlageAnhang> TFormularEmailVorlageAnhang { get; set; }
        public virtual DbSet<TFormularFaxEinstellung> TFormularFaxEinstellung { get; set; }
        public virtual DbSet<TFormularLlvorlageDaten> TFormularLlvorlageDaten { get; set; }
        public virtual DbSet<TFormularVorlage> TFormularVorlage { get; set; }
        public virtual DbSet<TFulfillerEinstellungen> TFulfillerEinstellungen { get; set; }
        public virtual DbSet<TFulfillerLieferscheinRef> TFulfillerLieferscheinRef { get; set; }
        public virtual DbSet<TFulfillmentAuftrag> TFulfillmentAuftrag { get; set; }
        public virtual DbSet<TFulfillmentAuftragPos> TFulfillmentAuftragPos { get; set; }
        public virtual DbSet<TFulfillmentLog> TFulfillmentLog { get; set; }
        public virtual DbSet<TFulfillmentWorker> TFulfillmentWorker { get; set; }
        public virtual DbSet<TGebinde> TGebinde { get; set; }
        public virtual DbSet<TGebuehrtyp> TGebuehrtyp { get; set; }
        public virtual DbSet<TGeleseneEmail> TGeleseneEmail { get; set; }
        public virtual DbSet<TGlobalsQueue> TGlobalsQueue { get; set; }
        public virtual DbSet<TGutschein> TGutschein { get; set; }
        public virtual DbSet<TGutschriftPos> TGutschriftPos { get; set; }
        public virtual DbSet<TGutschriftSperre> TGutschriftSperre { get; set; }
        public virtual DbSet<THersteller> THersteller { get; set; }
        public virtual DbSet<THerstellerBildPlattform> THerstellerBildPlattform { get; set; }
        public virtual DbSet<THerstellerSprache> THerstellerSprache { get; set; }
        public virtual DbSet<THintergrundDienst> THintergrundDienst { get; set; }
        public virtual DbSet<THistorie> THistorie { get; set; }
        public virtual DbSet<TInboundRef> TInboundRef { get; set; }
        public virtual DbSet<TInetAdresseShop> TInetAdresseShop { get; set; }
        public virtual DbSet<TInetBestellungAttribute> TInetBestellungAttribute { get; set; }
        public virtual DbSet<TInetKundeShop> TInetKundeShop { get; set; }
        public virtual DbSet<TInetKundenAttribute> TInetKundenAttribute { get; set; }
        public virtual DbSet<TInetShopZahlung> TInetShopZahlung { get; set; }
        public virtual DbSet<TInkassoUser> TInkassoUser { get; set; }
        public virtual DbSet<TInteropQueue> TInteropQueue { get; set; }
        public virtual DbSet<TIntervallZahlungsInfo> TIntervallZahlungsInfo { get; set; }
        public virtual DbSet<TInventur> TInventur { get; set; }
        public virtual DbSet<TKategorieAttribut> TKategorieAttribut { get; set; }
        public virtual DbSet<TKategorieAttributSprache> TKategorieAttributSprache { get; set; }
        public virtual DbSet<TKategorieMapping> TKategorieMapping { get; set; }
        public virtual DbSet<TKategorieRabatt> TKategorieRabatt { get; set; }
        public virtual DbSet<TKategorieShop> TKategorieShop { get; set; }
        public virtual DbSet<TKategorieSichtbarkeit> TKategorieSichtbarkeit { get; set; }
        public virtual DbSet<TKategorieSperre> TKategorieSperre { get; set; }
        public virtual DbSet<TKategorieSprache> TKategorieSprache { get; set; }
        public virtual DbSet<TKategoriebildPlattform> TKategoriebildPlattform { get; set; }
        public virtual DbSet<TKundeEigenesFeld> TKundeEigenesFeld { get; set; }
        public virtual DbSet<TKundeLabel> TKundeLabel { get; set; }
        public virtual DbSet<TKundeSuche> TKundeSuche { get; set; }
        public virtual DbSet<TKundenDrucktext> TKundenDrucktext { get; set; }
        public virtual DbSet<TKundenDrucktextSprache> TKundenDrucktextSprache { get; set; }
        public virtual DbSet<TKundenGruppe> TKundenGruppe { get; set; }
        public virtual DbSet<TKundenGruppeAttribute> TKundenGruppeAttribute { get; set; }
        public virtual DbSet<TKundenGruppeSprache> TKundenGruppeSprache { get; set; }
        public virtual DbSet<TKundenKategorie> TKundenKategorie { get; set; }
        public virtual DbSet<TKundenRankingGlobal> TKundenRankingGlobal { get; set; }
        public virtual DbSet<TKundenRankingZeitraum> TKundenRankingZeitraum { get; set; }
        public virtual DbSet<TKundenSperre> TKundenSperre { get; set; }
        public virtual DbSet<TLabel> TLabel { get; set; }
        public virtual DbSet<TLabelBenutzergruppeRechte> TLabelBenutzergruppeRechte { get; set; }
        public virtual DbSet<TLagerArtikel> TLagerArtikel { get; set; }
        public virtual DbSet<TLagerbestandBackup> TLagerbestandBackup { get; set; }
        public virtual DbSet<TLandSteuersatz> TLandSteuersatz { get; set; }
        public virtual DbSet<TLaufendeNummern> TLaufendeNummern { get; set; }
        public virtual DbSet<TLfdnrKunde> TLfdnrKunde { get; set; }
        public virtual DbSet<TLhm> TLhm { get; set; }
        public virtual DbSet<TLhmattribut> TLhmattribut { get; set; }
        public virtual DbSet<TLhmstatus> TLhmstatus { get; set; }
        public virtual DbSet<TLhmtyp> TLhmtyp { get; set; }
        public virtual DbSet<TLiefArtikelPreis> TLiefArtikelPreis { get; set; }
        public virtual DbSet<TLieferInfoVersand> TLieferInfoVersand { get; set; }
        public virtual DbSet<TLieferStatus> TLieferStatus { get; set; }
        public virtual DbSet<TLieferantErlaubteLieferlaender> TLieferantErlaubteLieferlaender { get; set; }
        public virtual DbSet<TLieferantRabattStaffel> TLieferantRabattStaffel { get; set; }
        public virtual DbSet<TLieferantSperre> TLieferantSperre { get; set; }
        public virtual DbSet<TLieferantWarenlager> TLieferantWarenlager { get; set; }
        public virtual DbSet<TLieferantenBestellung> TLieferantenBestellung { get; set; }
        public virtual DbSet<TLieferantenBestellungErinnerung> TLieferantenBestellungErinnerung { get; set; }
        public virtual DbSet<TLieferantenBestellungErinnerungPos> TLieferantenBestellungErinnerungPos { get; set; }
        public virtual DbSet<TLieferantenBestellungLa> TLieferantenBestellungLa { get; set; }
        public virtual DbSet<TLieferantenBestellungLieferant> TLieferantenBestellungLieferant { get; set; }
        public virtual DbSet<TLieferantenBestellungLock> TLieferantenBestellungLock { get; set; }
        public virtual DbSet<TLieferantenBestellungPos> TLieferantenBestellungPos { get; set; }
        public virtual DbSet<TLieferantenBestellungRa> TLieferantenBestellungRa { get; set; }
        public virtual DbSet<TLieferantenRankingGlobal> TLieferantenRankingGlobal { get; set; }
        public virtual DbSet<TLieferantenRankingZeitraum> TLieferantenRankingZeitraum { get; set; }
        public virtual DbSet<TLieferschein> TLieferschein { get; set; }
        public virtual DbSet<TLieferscheinPos> TLieferscheinPos { get; set; }
        public virtual DbSet<TListViewExColor> TListViewExColor { get; set; }
        public virtual DbSet<TListViewExDateTimeFilter> TListViewExDateTimeFilter { get; set; }
        public virtual DbSet<TListViewExHeader> TListViewExHeader { get; set; }
        public virtual DbSet<TListViewExSummary> TListViewExSummary { get; set; }
        public virtual DbSet<TListViewSpalten> TListViewSpalten { get; set; }
        public virtual DbSet<TLizenz> TLizenz { get; set; }
        public virtual DbSet<TLizenzInfo> TLizenzInfo { get; set; }
        public virtual DbSet<TLizenzlog> TLizenzlog { get; set; }
        public virtual DbSet<TLlvorlage> TLlvorlage { get; set; }
        public virtual DbSet<TLog> TLog { get; set; }
        public virtual DbSet<TLogin> TLogin { get; set; }
        public virtual DbSet<TLogistik> TLogistik { get; set; }
        public virtual DbSet<TMahnstufe> TMahnstufe { get; set; }
        public virtual DbSet<TMailVorlage> TMailVorlage { get; set; }
        public virtual DbSet<TMandant> TMandant { get; set; }
        public virtual DbSet<TMargensteigerung> TMargensteigerung { get; set; }
        public virtual DbSet<TMarktplatz> TMarktplatz { get; set; }
        public virtual DbSet<TMassEinheit> TMassEinheit { get; set; }
        public virtual DbSet<TMassEinheitSprache> TMassEinheitSprache { get; set; }
        public virtual DbSet<TMdelog> TMdelog { get; set; }
        public virtual DbSet<TMedienDatei> TMedienDatei { get; set; }
        public virtual DbSet<TMedienDateiAttribut> TMedienDateiAttribut { get; set; }
        public virtual DbSet<TMedienDateiShop> TMedienDateiShop { get; set; }
        public virtual DbSet<TMedienDateiSprache> TMedienDateiSprache { get; set; }
        public virtual DbSet<TMedienDir> TMedienDir { get; set; }
        public virtual DbSet<TMedienFile> TMedienFile { get; set; }
        public virtual DbSet<TMerchantInboundShippingNotificationRef> TMerchantInboundShippingNotificationRef { get; set; }
        public virtual DbSet<TMerchantStockChange> TMerchantStockChange { get; set; }
        public virtual DbSet<TMerchantStockChangeRef> TMerchantStockChangeRef { get; set; }
        public virtual DbSet<TMerchantVersandRef> TMerchantVersandRef { get; set; }
        public virtual DbSet<TMerkmal> TMerkmal { get; set; }
        public virtual DbSet<TMerkmalBildPlattform> TMerkmalBildPlattform { get; set; }
        public virtual DbSet<TMerkmalGruppe> TMerkmalGruppe { get; set; }
        public virtual DbSet<TMerkmalGruppeMerkmal> TMerkmalGruppeMerkmal { get; set; }
        public virtual DbSet<TMerkmalSprache> TMerkmalSprache { get; set; }
        public virtual DbSet<TMerkmalWert> TMerkmalWert { get; set; }
        public virtual DbSet<TMerkmalWertSprache> TMerkmalWertSprache { get; set; }
        public virtual DbSet<TMerkmalwertBildPlattform> TMerkmalwertBildPlattform { get; set; }
        public virtual DbSet<TMessage> TMessage { get; set; }
        public virtual DbSet<TMessages> TMessages { get; set; }
        public virtual DbSet<TNachricht> TNachricht { get; set; }
        public virtual DbSet<TNachrichtAngebot> TNachrichtAngebot { get; set; }
        public virtual DbSet<TNachrichtArtikel> TNachrichtArtikel { get; set; }
        public virtual DbSet<TNachrichtAuftrag> TNachrichtAuftrag { get; set; }
        public virtual DbSet<TNachrichtBenutzerOptionen> TNachrichtBenutzerOptionen { get; set; }
        public virtual DbSet<TNachrichtEingangsrechnung> TNachrichtEingangsrechnung { get; set; }
        public virtual DbSet<TNachrichtEntwurf> TNachrichtEntwurf { get; set; }
        public virtual DbSet<TNachrichtEntwurfAnhang> TNachrichtEntwurfAnhang { get; set; }
        public virtual DbSet<TNachrichtEntwurfTyp> TNachrichtEntwurfTyp { get; set; }
        public virtual DbSet<TNachrichtLieferantenbestellung> TNachrichtLieferantenbestellung { get; set; }
        public virtual DbSet<TNachrichtPreisanfrage> TNachrichtPreisanfrage { get; set; }
        public virtual DbSet<TNachrichtRechnung> TNachrichtRechnung { get; set; }
        public virtual DbSet<TNachrichtRechnungskorrektur> TNachrichtRechnungskorrektur { get; set; }
        public virtual DbSet<TNachrichtRetoure> TNachrichtRetoure { get; set; }
        public virtual DbSet<TNachrichtTyp> TNachrichtTyp { get; set; }
        public virtual DbSet<TNachrichtenanhang> TNachrichtenanhang { get; set; }
        public virtual DbSet<TNotiz> TNotiz { get; set; }
        public virtual DbSet<TNotiz1> TNotiz1 { get; set; }
        public virtual DbSet<TNotizAnhang> TNotizAnhang { get; set; }
        public virtual DbSet<TNotizEntwurf> TNotizEntwurf { get; set; }
        public virtual DbSet<TNotizEntwurfAnhang> TNotizEntwurfAnhang { get; set; }
        public virtual DbSet<TOauthConfig> TOauthConfig { get; set; }
        public virtual DbSet<TOauthToken> TOauthToken { get; set; }
        public virtual DbSet<TOptions> TOptions { get; set; }
        public virtual DbSet<TOutboundItemRef> TOutboundItemRef { get; set; }
        public virtual DbSet<TOutboundRef> TOutboundRef { get; set; }
        public virtual DbSet<TPackage> TPackage { get; set; }
        public virtual DbSet<TPicVersand> TPicVersand { get; set; }
        public virtual DbSet<TPickliste> TPickliste { get; set; }
        public virtual DbSet<TPicklistePos> TPicklistePos { get; set; }
        public virtual DbSet<TPicklistePosStatus> TPicklistePosStatus { get; set; }
        public virtual DbSet<TPicklisteStatus> TPicklisteStatus { get; set; }
        public virtual DbSet<TPicklisteVorlage> TPicklisteVorlage { get; set; }
        public virtual DbSet<TPicklisteVorlageArtikelZustand> TPicklisteVorlageArtikelZustand { get; set; }
        public virtual DbSet<TPicklisteVorlageBoxen> TPicklisteVorlageBoxen { get; set; }
        public virtual DbSet<TPicklisteVorlageEigeneFelder> TPicklisteVorlageEigeneFelder { get; set; }
        public virtual DbSet<TPicklistenVorschauSync> TPicklistenVorschauSync { get; set; }
        public virtual DbSet<TPlattform> TPlattform { get; set; }
        public virtual DbSet<TPlz> TPlz { get; set; }
        public virtual DbSet<TPosLogeintrag> TPosLogeintrag { get; set; }
        public virtual DbSet<TPreis> TPreis { get; set; }
        public virtual DbSet<TPreisDetail> TPreisDetail { get; set; }
        public virtual DbSet<TPreisExportVorlage> TPreisExportVorlage { get; set; }
        public virtual DbSet<TPreisImportVorlage> TPreisImportVorlage { get; set; }
        public virtual DbSet<TPreiskalkulation> TPreiskalkulation { get; set; }
        public virtual DbSet<TPreiskalkulationLogbuch> TPreiskalkulationLogbuch { get; set; }
        public virtual DbSet<TPreiskalkulationLogbuchDetails> TPreiskalkulationLogbuchDetails { get; set; }
        public virtual DbSet<TPreiskalkulationSetting> TPreiskalkulationSetting { get; set; }
        public virtual DbSet<TPrintDocumentType> TPrintDocumentType { get; set; }
        public virtual DbSet<TProductPictureRef> TProductPictureRef { get; set; }
        public virtual DbSet<TProductRef> TProductRef { get; set; }
        public virtual DbSet<TQueue> TQueue { get; set; }
        public virtual DbSet<TQueue1> TQueue1 { get; set; }
        public virtual DbSet<TQueue2> TQueue2 { get; set; }
        public virtual DbSet<TRechnungBackup> TRechnungBackup { get; set; }
        public virtual DbSet<TRechnungLabel> TRechnungLabel { get; set; }
        public virtual DbSet<TRecht> TRecht { get; set; }
        public virtual DbSet<TRechtBenutzerGruppe> TRechtBenutzerGruppe { get; set; }
        public virtual DbSet<TRechtBenutzerGruppenZuordnung> TRechtBenutzerGruppenZuordnung { get; set; }
        public virtual DbSet<TRechte> TRechte { get; set; }
        public virtual DbSet<TReports> TReports { get; set; }
        public virtual DbSet<TReportsDataSet> TReportsDataSet { get; set; }
        public virtual DbSet<TRepricerProcess> TRepricerProcess { get; set; }
        public virtual DbSet<TReserviert> TReserviert { get; set; }
        public virtual DbSet<TRetourPosGutschriftMapping> TRetourPosGutschriftMapping { get; set; }
        public virtual DbSet<TRmgrund> TRmgrund { get; set; }
        public virtual DbSet<TRmgrundKategorie> TRmgrundKategorie { get; set; }
        public virtual DbSet<TRmgrundSprache> TRmgrundSprache { get; set; }
        public virtual DbSet<TRmgrundWarengruppe> TRmgrundWarengruppe { get; set; }
        public virtual DbSet<TRmretoure> TRmretoure { get; set; }
        public virtual DbSet<TRmretoureAbholAdresse> TRmretoureAbholAdresse { get; set; }
        public virtual DbSet<TRmretoureAustauschArtikel> TRmretoureAustauschArtikel { get; set; }
        public virtual DbSet<TRmretourePos> TRmretourePos { get; set; }
        public virtual DbSet<TRmretourenEtikett> TRmretourenEtikett { get; set; }
        public virtual DbSet<TRmstatus> TRmstatus { get; set; }
        public virtual DbSet<TRmstatusBerechtigung> TRmstatusBerechtigung { get; set; }
        public virtual DbSet<TRmstatusSprache> TRmstatusSprache { get; set; }
        public virtual DbSet<TRmstatusVerlauf> TRmstatusVerlauf { get; set; }
        public virtual DbSet<TRmstatusWorkflow> TRmstatusWorkflow { get; set; }
        public virtual DbSet<TRueckhalteGrund> TRueckhalteGrund { get; set; }
        public virtual DbSet<TScopeType> TScopeType { get; set; }
        public virtual DbSet<TServerConfig> TServerConfig { get; set; }
        public virtual DbSet<TServerStatus> TServerStatus { get; set; }
        public virtual DbSet<TSessionId> TSessionId { get; set; }
        public virtual DbSet<TSetting> TSetting { get; set; }
        public virtual DbSet<TSettings> TSettings { get; set; }
        public virtual DbSet<TShipperAccount> TShipperAccount { get; set; }
        public virtual DbSet<TShippingDocument> TShippingDocument { get; set; }
        public virtual DbSet<TShippingMessage> TShippingMessage { get; set; }
        public virtual DbSet<TShippingMethodMapping> TShippingMethodMapping { get; set; }
        public virtual DbSet<TShippingPrinterConfiguration> TShippingPrinterConfiguration { get; set; }
        public virtual DbSet<TShippingServiceProvider> TShippingServiceProvider { get; set; }
        public virtual DbSet<TShop> TShop { get; set; }
        public virtual DbSet<TShopConnectorFunktion> TShopConnectorFunktion { get; set; }
        public virtual DbSet<TShopConnectorSynchronisierung> TShopConnectorSynchronisierung { get; set; }
        public virtual DbSet<TShopKonfiguration> TShopKonfiguration { get; set; }
        public virtual DbSet<TShopKundenGruppe> TShopKundenGruppe { get; set; }
        public virtual DbSet<TShopMappingKundengruppe> TShopMappingKundengruppe { get; set; }
        public virtual DbSet<TShopSprache> TShopSprache { get; set; }
        public virtual DbSet<TShopSubshop> TShopSubshop { get; set; }
        public virtual DbSet<TShopWaehrung> TShopWaehrung { get; set; }
        public virtual DbSet<TSonderpreise> TSonderpreise { get; set; }
        public virtual DbSet<TSpracheUsed> TSpracheUsed { get; set; }
        public virtual DbSet<TSprachen> TSprachen { get; set; }
        public virtual DbSet<TSqlError> TSqlError { get; set; }
        public virtual DbSet<TSqlErrorMessages> TSqlErrorMessages { get; set; }
        public virtual DbSet<TStampit> TStampit { get; set; }
        public virtual DbSet<TState> TState { get; set; }
        public virtual DbSet<TStatistikAuswertungstyp> TStatistikAuswertungstyp { get; set; }
        public virtual DbSet<TStatistikBenutzerordner> TStatistikBenutzerordner { get; set; }
        public virtual DbSet<TStatistikEazyShipping> TStatistikEazyShipping { get; set; }
        public virtual DbSet<TStatistikPicklisten> TStatistikPicklisten { get; set; }
        public virtual DbSet<TStatistikSteuerelement> TStatistikSteuerelement { get; set; }
        public virtual DbSet<TStatistikVorlage> TStatistikVorlage { get; set; }
        public virtual DbSet<TStatistikVorlageChartEinstellung> TStatistikVorlageChartEinstellung { get; set; }
        public virtual DbSet<TStatistikVorlageOrdner> TStatistikVorlageOrdner { get; set; }
        public virtual DbSet<TStatistikvorlagenOrdnerzuordnung> TStatistikvorlagenOrdnerzuordnung { get; set; }
        public virtual DbSet<TStatistikvorlagenserialisierung> TStatistikvorlagenserialisierung { get; set; }
        public virtual DbSet<TStatus> TStatus { get; set; }
        public virtual DbSet<TSteuerSammelkonten> TSteuerSammelkonten { get; set; }
        public virtual DbSet<TSteuercache> TSteuercache { get; set; }
        public virtual DbSet<TSteuerklasse> TSteuerklasse { get; set; }
        public virtual DbSet<TSteuersatz> TSteuersatz { get; set; }
        public virtual DbSet<TSteuersatzschluessel> TSteuersatzschluessel { get; set; }
        public virtual DbSet<TSteuerschluessel> TSteuerschluessel { get; set; }
        public virtual DbSet<TSteuerzone> TSteuerzone { get; set; }
        public virtual DbSet<TSteuerzoneLand> TSteuerzoneLand { get; set; }
        public virtual DbSet<TStockRef> TStockRef { get; set; }
        public virtual DbSet<TStueckliste> TStueckliste { get; set; }
        public virtual DbSet<TSubStatistikZustand> TSubStatistikZustand { get; set; }
        public virtual DbSet<TSubscriptionInformation> TSubscriptionInformation { get; set; }
        public virtual DbSet<TSyncLogsitzung> TSyncLogsitzung { get; set; }
        public virtual DbSet<TSyncType> TSyncType { get; set; }
        public virtual DbSet<TTelefonat> TTelefonat { get; set; }
        public virtual DbSet<TTelefonatAnhang> TTelefonatAnhang { get; set; }
        public virtual DbSet<TTelefonatEntwurf> TTelefonatEntwurf { get; set; }
        public virtual DbSet<TTelefonatEntwurfAnhang> TTelefonatEntwurfAnhang { get; set; }
        public virtual DbSet<TText> TText { get; set; }
        public virtual DbSet<TTextFiltersSplitStreetExceptions> TTextFiltersSplitStreetExceptions { get; set; }
        public virtual DbSet<TTextFiltersSplitStreetExpressions> TTextFiltersSplitStreetExpressions { get; set; }
        public virtual DbSet<TTexteMitValues> TTexteMitValues { get; set; }
        public virtual DbSet<TTicket> TTicket { get; set; }
        public virtual DbSet<TTicketBeobachter> TTicketBeobachter { get; set; }
        public virtual DbSet<TTicketEckdaten> TTicketEckdaten { get; set; }
        public virtual DbSet<TTicketLabel> TTicketLabel { get; set; }
        public virtual DbSet<TTicketRelation> TTicketRelation { get; set; }
        public virtual DbSet<TTrackAndTraceConfiguration> TTrackAndTraceConfiguration { get; set; }
        public virtual DbSet<TTrackingLogs> TTrackingLogs { get; set; }
        public virtual DbSet<TUmlagerung> TUmlagerung { get; set; }
        public virtual DbSet<TUmsatzSteuerPruefung> TUmsatzSteuerPruefung { get; set; }
        public virtual DbSet<TUmsatzzuordnungLog> TUmsatzzuordnungLog { get; set; }
        public virtual DbSet<TUniqueSession> TUniqueSession { get; set; }
        public virtual DbSet<TUpdateInfo> TUpdateInfo { get; set; }
        public virtual DbSet<TUpdateLog> TUpdateLog { get; set; }
        public virtual DbSet<TUserControlSetting> TUserControlSetting { get; set; }
        public virtual DbSet<TUserLayout> TUserLayout { get; set; }
        public virtual DbSet<TUserSetting> TUserSetting { get; set; }
        public virtual DbSet<TUserType> TUserType { get; set; }
        public virtual DbSet<TVaterLabelLabel> TVaterLabelLabel { get; set; }
        public virtual DbSet<TVcsSelfInvoice> TVcsSelfInvoice { get; set; }
        public virtual DbSet<TVcsSelfInvoiceHistory> TVcsSelfInvoiceHistory { get; set; }
        public virtual DbSet<TVcsSelfInvoicePosMapping> TVcsSelfInvoicePosMapping { get; set; }
        public virtual DbSet<TVcsUploadData> TVcsUploadData { get; set; }
        public virtual DbSet<TVcsUploadDataQueue> TVcsUploadDataQueue { get; set; }
        public virtual DbSet<TVcsselfInvoiceLogeintrag> TVcsselfInvoiceLogeintrag { get; set; }
        public virtual DbSet<TVerfuegbarkeitsAnfrage> TVerfuegbarkeitsAnfrage { get; set; }
        public virtual DbSet<TVersand> TVersand { get; set; }
        public virtual DbSet<TVersandInfo> TVersandInfo { get; set; }
        public virtual DbSet<TVersandKonfiguration> TVersandKonfiguration { get; set; }
        public virtual DbSet<TVersandKonfigurationArtikelZustand> TVersandKonfigurationArtikelZustand { get; set; }
        public virtual DbSet<TVersandKonfigurationEigeneFelder> TVersandKonfigurationEigeneFelder { get; set; }
        public virtual DbSet<TVersandPos> TVersandPos { get; set; }
        public virtual DbSet<TVersandVorlage> TVersandVorlage { get; set; }
        public virtual DbSet<TVersandartSprache> TVersandartSprache { get; set; }
        public virtual DbSet<TVersanddatenExportVorlage> TVersanddatenExportVorlage { get; set; }
        public virtual DbSet<TVersanddatenImportVorlage> TVersanddatenImportVorlage { get; set; }
        public virtual DbSet<TVersandklasse> TVersandklasse { get; set; }
        public virtual DbSet<TVersandlager> TVersandlager { get; set; }
        public virtual DbSet<TVersandschnittstellenKonfiguration> TVersandschnittstellenKonfiguration { get; set; }
        public virtual DbSet<TVersandtoolDruckEinstellung> TVersandtoolDruckEinstellung { get; set; }
        public virtual DbSet<TVertrauenswuerdigerAbsender> TVertrauenswuerdigerAbsender { get; set; }
        public virtual DbSet<TVordefinierteAntwort> TVordefinierteAntwort { get; set; }
        public virtual DbSet<TVorgang> TVorgang { get; set; }
        public virtual DbSet<TVorgangFulfillmentLog> TVorgangFulfillmentLog { get; set; }
        public virtual DbSet<TVorgangQueue> TVorgangQueue { get; set; }
        public virtual DbSet<TVorgangType> TVorgangType { get; set; }
        public virtual DbSet<TVorgangsfarbe> TVorgangsfarbe { get; set; }
        public virtual DbSet<TVorgangsstatus> TVorgangsstatus { get; set; }
        public virtual DbSet<TVorlage> TVorlage { get; set; }
        public virtual DbSet<TVorlage1> TVorlage1 { get; set; }
        public virtual DbSet<TVorlagenset> TVorlagenset { get; set; }
        public virtual DbSet<TVorlagensetEinstellung> TVorlagensetEinstellung { get; set; }
        public virtual DbSet<TWaehrung> TWaehrung { get; set; }
        public virtual DbSet<TWaehrungAlt> TWaehrungAlt { get; set; }
        public virtual DbSet<TWaehrungIso> TWaehrungIso { get; set; }
        public virtual DbSet<TWarenLager> TWarenLager { get; set; }
        public virtual DbSet<TWarenLagerAusgang> TWarenLagerAusgang { get; set; }
        public virtual DbSet<TWarenLagerDimensionTyp> TWarenLagerDimensionTyp { get; set; }
        public virtual DbSet<TWarenLagerEingang> TWarenLagerEingang { get; set; }
        public virtual DbSet<TWarenLagerEingangHistorie> TWarenLagerEingangHistorie { get; set; }
        public virtual DbSet<TWarenLagerFulFillmentDienstleister> TWarenLagerFulFillmentDienstleister { get; set; }
        public virtual DbSet<TWarenLagerOptionen> TWarenLagerOptionen { get; set; }
        public virtual DbSet<TWarenLagerPlatz> TWarenLagerPlatz { get; set; }
        public virtual DbSet<TWarenLagerPlatzArtikel> TWarenLagerPlatzArtikel { get; set; }
        public virtual DbSet<TWarenLagerPlatzDefault> TWarenLagerPlatzDefault { get; set; }
        public virtual DbSet<TWarenLagerPrioGlobal> TWarenLagerPrioGlobal { get; set; }
        public virtual DbSet<TWarengruppe> TWarengruppe { get; set; }
        public virtual DbSet<TWarenlagerArtikelOptionen> TWarenlagerArtikelOptionen { get; set; }
        public virtual DbSet<TWarenlagerOptionenArtikelbild> TWarenlagerOptionenArtikelbild { get; set; }
        public virtual DbSet<TWarenlagerOptionenAuftragDetails> TWarenlagerOptionenAuftragDetails { get; set; }
        public virtual DbSet<TWawiAttribut> TWawiAttribut { get; set; }
        public virtual DbSet<TWawiAttributSprache> TWawiAttributSprache { get; set; }
        public virtual DbSet<TWebshopModule> TWebshopModule { get; set; }
        public virtual DbSet<TWidget> TWidget { get; set; }
        public virtual DbSet<TWidgetBenutzer> TWidgetBenutzer { get; set; }
        public virtual DbSet<TWidgetLayout> TWidgetLayout { get; set; }
        public virtual DbSet<TWidgetSettings> TWidgetSettings { get; set; }
        public virtual DbSet<TWidgetTemplate> TWidgetTemplate { get; set; }
        public virtual DbSet<TWidgetTemplateSettings> TWidgetTemplateSettings { get; set; }
        public virtual DbSet<TWmsInventur> TWmsInventur { get; set; }
        public virtual DbSet<TWmsInventurlog> TWmsInventurlog { get; set; }
        public virtual DbSet<TWmsboxenPackVerpackteSerNos> TWmsboxenPackVerpackteSerNos { get; set; }
        public virtual DbSet<TWmsbyLight> TWmsbyLight { get; set; }
        public virtual DbSet<TWmslagerBereich> TWmslagerBereich { get; set; }
        public virtual DbSet<TWmslagerBereichPlatz> TWmslagerBereichPlatz { get; set; }
        public virtual DbSet<TWmsoptionen> TWmsoptionen { get; set; }
        public virtual DbSet<TWmspackItem> TWmspackItem { get; set; }
        public virtual DbSet<TWmspackItemData> TWmspackItemData { get; set; }
        public virtual DbSet<TWmsversandLock> TWmsversandLock { get; set; }
        public virtual DbSet<TWorkerInfo> TWorkerInfo { get; set; }
        public virtual DbSet<TWorkflow> TWorkflow { get; set; }
        public virtual DbSet<TWorkflowAktion> TWorkflowAktion { get; set; }
        public virtual DbSet<TWorkflowBedingung> TWorkflowBedingung { get; set; }
        public virtual DbSet<TWorkflowEigenschaft> TWorkflowEigenschaft { get; set; }
        public virtual DbSet<TWorkflowEvent> TWorkflowEvent { get; set; }
        public virtual DbSet<TWorkflowLog> TWorkflowLog { get; set; }
        public virtual DbSet<TWorkflowQueue> TWorkflowQueue { get; set; }
        public virtual DbSet<TWorklog> TWorklog { get; set; }
        public virtual DbSet<TXmlbestellImport> TXmlbestellImport { get; set; }
        public virtual DbSet<TXmlgutschriftImport> TXmlgutschriftImport { get; set; }
        public virtual DbSet<TXmlimportvorlage> TXmlimportvorlage { get; set; }
        public virtual DbSet<TXsell> TXsell { get; set; }
        public virtual DbSet<TXsellGruppe> TXsellGruppe { get; set; }
        public virtual DbSet<TXsellGruppeArtikel> TXsellGruppeArtikel { get; set; }
        public virtual DbSet<TZahlen> TZahlen { get; set; }
        public virtual DbSet<TZahlung> TZahlung { get; set; }
        public virtual DbSet<TZahlungsArtSprache> TZahlungsArtSprache { get; set; }
        public virtual DbSet<TZahlungsErinnerung> TZahlungsErinnerung { get; set; }
        public virtual DbSet<TZahlungsabgleichAmaPayReportRequests> TZahlungsabgleichAmaPayReportRequests { get; set; }
        public virtual DbSet<TZahlungsabgleichAusgang> TZahlungsabgleichAusgang { get; set; }
        public virtual DbSet<TZahlungsabgleichFilter> TZahlungsabgleichFilter { get; set; }
        public virtual DbSet<TZahlungsabgleichLogeintrag> TZahlungsabgleichLogeintrag { get; set; }
        public virtual DbSet<TZahlungsabgleichLogsitzung> TZahlungsabgleichLogsitzung { get; set; }
        public virtual DbSet<TZahlungsabgleichModul> TZahlungsabgleichModul { get; set; }
        public virtual DbSet<TZahlungsabgleichUmsatz> TZahlungsabgleichUmsatz { get; set; }
        public virtual DbSet<TZahlungsart> TZahlungsart { get; set; }
        public virtual DbSet<TZahlungsausgangLogeintrag> TZahlungsausgangLogeintrag { get; set; }
        public virtual DbSet<TZalog> TZalog { get; set; }
        public virtual DbSet<TZavorlage> TZavorlage { get; set; }
        public virtual DbSet<TZustand> TZustand { get; set; }
        public virtual DbSet<TZustandKategorie> TZustandKategorie { get; set; }
        public virtual DbSet<TZustandSprache> TZustandSprache { get; set; }
        public virtual DbSet<TZustandWarengruppe> TZustandWarengruppe { get; set; }
        public virtual DbSet<Tangebotnr> Tangebotnr { get; set; }
        public virtual DbSet<Tansprechpartner> Tansprechpartner { get; set; }
        public virtual DbSet<Tartikeldownload> Tartikeldownload { get; set; }
        public virtual DbSet<Tartikelkonfiggruppe> Tartikelkonfiggruppe { get; set; }
        public virtual DbSet<Tbenutzer> Tbenutzer { get; set; }
        public virtual DbSet<Tbenutzerrechte> Tbenutzerrechte { get; set; }
        public virtual DbSet<Tbestelleigenschaft> Tbestelleigenschaft { get; set; }
        public virtual DbSet<Tbestellnr> Tbestellnr { get; set; }
        public virtual DbSet<Tbestellpos> Tbestellpos { get; set; }
        public virtual DbSet<Tdblog> Tdblog { get; set; }
        public virtual DbSet<Tdownloadsprache> Tdownloadsprache { get; set; }
        public virtual DbSet<Teigenschaft> Teigenschaft { get; set; }
        public virtual DbSet<Teigenschaftwert> Teigenschaftwert { get; set; }
        public virtual DbSet<Teinstellungen> Teinstellungen { get; set; }
        public virtual DbSet<Teklieferantpreise> Teklieferantpreise { get; set; }
        public virtual DbSet<Tfirma> Tfirma { get; set; }
        public virtual DbSet<Tgutschrift> Tgutschrift { get; set; }
        public virtual DbSet<Tgutschrifteigenschaft> Tgutschrifteigenschaft { get; set; }
        public virtual DbSet<Tinetadress> Tinetadress { get; set; }
        public virtual DbSet<Tinetbestellpos> Tinetbestellpos { get; set; }
        public virtual DbSet<Tinetbestellposeigenschaft> Tinetbestellposeigenschaft { get; set; }
        public virtual DbSet<Tinetbestellung> Tinetbestellung { get; set; }
        public virtual DbSet<Tinetkunde> Tinetkunde { get; set; }
        public virtual DbSet<Tinetzahlungsinfo> Tinetzahlungsinfo { get; set; }
        public virtual DbSet<Tintervall> Tintervall { get; set; }
        public virtual DbSet<Tintervallauftrag> Tintervallauftrag { get; set; }
        public virtual DbSet<Tintervallpos> Tintervallpos { get; set; }
        public virtual DbSet<Tintervallposeigenschaft> Tintervallposeigenschaft { get; set; }
        public virtual DbSet<Tkategorie> Tkategorie { get; set; }
        public virtual DbSet<Tkategorieartikel> Tkategorieartikel { get; set; }
        public virtual DbSet<Tkonfiggruppe> Tkonfiggruppe { get; set; }
        public virtual DbSet<Tkonfiggruppesprache> Tkonfiggruppesprache { get; set; }
        public virtual DbSet<Tkonfigitem> Tkonfigitem { get; set; }
        public virtual DbSet<Tkonfigitempreis> Tkonfigitempreis { get; set; }
        public virtual DbSet<Tkonfigitemsprache> Tkonfigitemsprache { get; set; }
        public virtual DbSet<Tkonfigshop> Tkonfigshop { get; set; }
        public virtual DbSet<Tkontodaten> Tkontodaten { get; set; }
        public virtual DbSet<Tkunde> Tkunde { get; set; }
        public virtual DbSet<Tlager> Tlager { get; set; }
        public virtual DbSet<Tlagerbestand> Tlagerbestand { get; set; }
        public virtual DbSet<TlagerbestandProLagerLagerartikel> TlagerbestandProLagerLagerartikel { get; set; }
        public virtual DbSet<Tlagerort> Tlagerort { get; set; }
        public virtual DbSet<Tland> Tland { get; set; }
        public virtual DbSet<Tliefartikel> Tliefartikel { get; set; }
        public virtual DbSet<Tlieferadresse> Tlieferadresse { get; set; }
        public virtual DbSet<Tlieferant> Tlieferant { get; set; }
        public virtual DbSet<Tmahnung> Tmahnung { get; set; }
        public virtual DbSet<Tmahnungstext> Tmahnungstext { get; set; }
        public virtual DbSet<Tnews> Tnews { get; set; }
        public virtual DbSet<Tnummern> Tnummern { get; set; }
        public virtual DbSet<TotalsInvoice> TotalsInvoice { get; set; }
        public virtual DbSet<TotalsInvoiceCorrection> TotalsInvoiceCorrection { get; set; }
        public virtual DbSet<TotalsPurchaseOrder> TotalsPurchaseOrder { get; set; }
        public virtual DbSet<TotalsSalesOrder> TotalsSalesOrder { get; set; }
        public virtual DbSet<TotalsSalesQuotation> TotalsSalesQuotation { get; set; }
        public virtual DbSet<Tpk> Tpk { get; set; }
        public virtual DbSet<Tprintform> Tprintform { get; set; }
        public virtual DbSet<Trechnung> Trechnung { get; set; }
        public virtual DbSet<Trechnungnr> Trechnungnr { get; set; }
        public virtual DbSet<Trechnungsadresse> Trechnungsadresse { get; set; }
        public virtual DbSet<Tsynch> Tsynch { get; set; }
        public virtual DbSet<Tversandart> Tversandart { get; set; }
        public virtual DbSet<Tversion> Tversion { get; set; }
        public virtual DbSet<Twebversand> Twebversand { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<V360GradSicht> V360GradSicht { get; set; }
        public virtual DbSet<VAbrechnung> VAbrechnung { get; set; }
        public virtual DbSet<VAmazonSfpOrderdata> VAmazonSfpOrderdata { get; set; }
        public virtual DbSet<VAmazonSfpShippingdata> VAmazonSfpShippingdata { get; set; }
        public virtual DbSet<VAmeiseStandardArtikel> VAmeiseStandardArtikel { get; set; }
        public virtual DbSet<VArtikelAttributSprachePlattform> VArtikelAttributSprachePlattform { get; set; }
        public virtual DbSet<VArtikelHistory> VArtikelHistory { get; set; }
        public virtual DbSet<VArtikelMerkmalWertKombination> VArtikelMerkmalWertKombination { get; set; }
        public virtual DbSet<VArtikelStuecklistenKomponenten> VArtikelStuecklistenKomponenten { get; set; }
        public virtual DbSet<VArtikelZustandMitStandardZustand> VArtikelZustandMitStandardZustand { get; set; }
        public virtual DbSet<VArtikelliste> VArtikelliste { get; set; }
        public virtual DbSet<VAuftrag> VAuftrag { get; set; }
        public virtual DbSet<VAuftragPos> VAuftragPos { get; set; }
        public virtual DbSet<VAuftragsfarben> VAuftragsfarben { get; set; }
        public virtual DbSet<VBestand> VBestand { get; set; }
        public virtual DbSet<VBestand1> VBestand1 { get; set; }
        public virtual DbSet<VBestellPos> VBestellPos { get; set; }
        public virtual DbSet<VBestellPosLieferInfo> VBestellPosLieferInfo { get; set; }
        public virtual DbSet<VBestellPosLieferInfoFifo2012> VBestellPosLieferInfoFifo2012 { get; set; }
        public virtual DbSet<VBestellPosLieferInfoNonFifo> VBestellPosLieferInfoNonFifo { get; set; }
        public virtual DbSet<VBestellPosLieferInfoProLager> VBestellPosLieferInfoProLager { get; set; }
        public virtual DbSet<VBestellPosLieferInfoProLagerFifo2012> VBestellPosLieferInfoProLagerFifo2012 { get; set; }
        public virtual DbSet<VBestellPosLieferInfoProLagerNonFifo> VBestellPosLieferInfoProLagerNonFifo { get; set; }
        public virtual DbSet<VBestellPosLieferInfoProLagerVirtuell> VBestellPosLieferInfoProLagerVirtuell { get; set; }
        public virtual DbSet<VBestellPosOffen> VBestellPosOffen { get; set; }
        public virtual DbSet<VBestellPosOffenFifo2012> VBestellPosOffenFifo2012 { get; set; }
        public virtual DbSet<VBestellPosOffenNonFifo> VBestellPosOffenNonFifo { get; set; }
        public virtual DbSet<VBestellung> VBestellung { get; set; }
        public virtual DbSet<VBestellungBezahlt> VBestellungBezahlt { get; set; }
        public virtual DbSet<VBestellungDropshippingLieferbar> VBestellungDropshippingLieferbar { get; set; }
        public virtual DbSet<VBestellungEckdaten> VBestellungEckdaten { get; set; }
        public virtual DbSet<VBestellungLieferInfo> VBestellungLieferInfo { get; set; }
        public virtual DbSet<VBestellungLieferInfoFifo2012> VBestellungLieferInfoFifo2012 { get; set; }
        public virtual DbSet<VBestellungLieferInfoNonFifo> VBestellungLieferInfoNonFifo { get; set; }
        public virtual DbSet<VBestellungLieferInfoProLager> VBestellungLieferInfoProLager { get; set; }
        public virtual DbSet<VBestellungLieferInfoProLagerFifo2012> VBestellungLieferInfoProLagerFifo2012 { get; set; }
        public virtual DbSet<VBestellungLieferInfoProLagerNonFifo> VBestellungLieferInfoProLagerNonFifo { get; set; }
        public virtual DbSet<VCategory> VCategory { get; set; }
        public virtual DbSet<VCategoryFamilyTree> VCategoryFamilyTree { get; set; }
        public virtual DbSet<VConfigurationGroup> VConfigurationGroup { get; set; }
        public virtual DbSet<VConfigurationItem> VConfigurationItem { get; set; }
        public virtual DbSet<VCustomer> VCustomer { get; set; }
        public virtual DbSet<VCustomerGroup> VCustomerGroup { get; set; }
        public virtual DbSet<VDeletedEntity> VDeletedEntity { get; set; }
        public virtual DbSet<VDeliveryMethod> VDeliveryMethod { get; set; }
        public virtual DbSet<VEbayUserBestellungen> VEbayUserBestellungen { get; set; }
        public virtual DbSet<VEbayVorlagen> VEbayVorlagen { get; set; }
        public virtual DbSet<VFbabestand> VFbabestand { get; set; }
        public virtual DbSet<VFulfillerLieferscheinPos> VFulfillerLieferscheinPos { get; set; }
        public virtual DbSet<VFulfillerLieferscheinWarehouseInfo> VFulfillerLieferscheinWarehouseInfo { get; set; }
        public virtual DbSet<VFulfillerOutboundInfo> VFulfillerOutboundInfo { get; set; }
        public virtual DbSet<VFulfillerPackages> VFulfillerPackages { get; set; }
        public virtual DbSet<VFulfillerPendingLieferscheine> VFulfillerPendingLieferscheine { get; set; }
        public virtual DbSet<VFulfillerProductPicture> VFulfillerProductPicture { get; set; }
        public virtual DbSet<VFulfillmentKunde> VFulfillmentKunde { get; set; }
        public virtual DbSet<VGlobaleTexte> VGlobaleTexte { get; set; }
        public virtual DbSet<VIndividuellePreise> VIndividuellePreise { get; set; }
        public virtual DbSet<VInventur> VInventur { get; set; }
        public virtual DbSet<VKategorien> VKategorien { get; set; }
        public virtual DbSet<VKategorienMitSubKategorien> VKategorienMitSubKategorien { get; set; }
        public virtual DbSet<VKunde> VKunde { get; set; }
        public virtual DbSet<VKundenAttribute> VKundenAttribute { get; set; }
        public virtual DbSet<VKundenGruppeShop> VKundenGruppeShop { get; set; }
        public virtual DbSet<VKundenGruppeShopVerfuegbar> VKundenGruppeShopVerfuegbar { get; set; }
        public virtual DbSet<VLagerBestandProLagerAlle> VLagerBestandProLagerAlle { get; set; }
        public virtual DbSet<VLagerartikel> VLagerartikel { get; set; }
        public virtual DbSet<VLagerbestand> VLagerbestand { get; set; }
        public virtual DbSet<VLagerbestand1> VLagerbestand1 { get; set; }
        public virtual DbSet<VLagerbestandEx> VLagerbestandEx { get; set; }
        public virtual DbSet<VLagerbestandFba> VLagerbestandFba { get; set; }
        public virtual DbSet<VLagerbestandNormaleArtikel> VLagerbestandNormaleArtikel { get; set; }
        public virtual DbSet<VLagerbestandProLager> VLagerbestandProLager { get; set; }
        public virtual DbSet<VLagerbestandProLager1> VLagerbestandProLager1 { get; set; }
        public virtual DbSet<VLagerbestandStueckliste> VLagerbestandStueckliste { get; set; }
        public virtual DbSet<VLagerbestandStuecklisteProLager> VLagerbestandStuecklisteProLager { get; set; }
        public virtual DbSet<VLagerbestandStuecklisten> VLagerbestandStuecklisten { get; set; }
        public virtual DbSet<VLagerbestandVariationen> VLagerbestandVariationen { get; set; }
        public virtual DbSet<VLagerbestandVarkombination> VLagerbestandVarkombination { get; set; }
        public virtual DbSet<VLieferantenbestand> VLieferantenbestand { get; set; }
        public virtual DbSet<VLieferschein> VLieferschein { get; set; }
        public virtual DbSet<VLieferscheinPos> VLieferscheinPos { get; set; }
        public virtual DbSet<VLieferscheinPosDetail> VLieferscheinPosDetail { get; set; }
        public virtual DbSet<VLogsitzung> VLogsitzung { get; set; }
        public virtual DbSet<VMappedProductKeys> VMappedProductKeys { get; set; }
        public virtual DbSet<VMerchantFailureInbound> VMerchantFailureInbound { get; set; }
        public virtual DbSet<VMerchantInbound> VMerchantInbound { get; set; }
        public virtual DbSet<VMerchantInboundItem> VMerchantInboundItem { get; set; }
        public virtual DbSet<VMerchantPendingInbound> VMerchantPendingInbound { get; set; }
        public virtual DbSet<VMerchantPendingInboundShippingNotification> VMerchantPendingInboundShippingNotification { get; set; }
        public virtual DbSet<VMerchantPendingStockChanges> VMerchantPendingStockChanges { get; set; }
        public virtual DbSet<VMerchantProductPicture> VMerchantProductPicture { get; set; }
        public virtual DbSet<VNaechsterZulaufLagerartikel> VNaechsterZulaufLagerartikel { get; set; }
        public virtual DbSet<VObjectBrowserArtikel> VObjectBrowserArtikel { get; set; }
        public virtual DbSet<VOffeneBestellpositionen> VOffeneBestellpositionen { get; set; }
        public virtual DbSet<VOffenerPosten> VOffenerPosten { get; set; }
        public virtual DbSet<VOffenerPostenEbay> VOffenerPostenEbay { get; set; }
        public virtual DbSet<VOffenerPostenEingangsrechnung> VOffenerPostenEingangsrechnung { get; set; }
        public virtual DbSet<VOffenerPostenEingangsrechnungZahlung> VOffenerPostenEingangsrechnungZahlung { get; set; }
        public virtual DbSet<VOffenerPostenZahlung> VOffenerPostenZahlung { get; set; }
        public virtual DbSet<VOffenerUmsatz> VOffenerUmsatz { get; set; }
        public virtual DbSet<VOrder> VOrder { get; set; }
        public virtual DbSet<VOrderBillingAddress> VOrderBillingAddress { get; set; }
        public virtual DbSet<VOrderItem> VOrderItem { get; set; }
        public virtual DbSet<VOrderLotNumberBestBeforeDate> VOrderLotNumberBestBeforeDate { get; set; }
        public virtual DbSet<VOrderPayment> VOrderPayment { get; set; }
        public virtual DbSet<VOrderSerialNumber> VOrderSerialNumber { get; set; }
        public virtual DbSet<VOrderShippingAddress> VOrderShippingAddress { get; set; }
        public virtual DbSet<VPendingStocks> VPendingStocks { get; set; }
        public virtual DbSet<VPreislisteNetto> VPreislisteNetto { get; set; }
        public virtual DbSet<VProduct> VProduct { get; set; }
        public virtual DbSet<VProduct1> VProduct1 { get; set; }
        public virtual DbSet<VProduct2> VProduct2 { get; set; }
        public virtual DbSet<VProductAttrAndValues> VProductAttrAndValues { get; set; }
        public virtual DbSet<VProductAttribute> VProductAttribute { get; set; }
        public virtual DbSet<VProductBundles> VProductBundles { get; set; }
        public virtual DbSet<VProductComposite> VProductComposite { get; set; }
        public virtual DbSet<VProductOption> VProductOption { get; set; }
        public virtual DbSet<VProductPosAttribute> VProductPosAttribute { get; set; }
        public virtual DbSet<VProductVariant> VProductVariant { get; set; }
        public virtual DbSet<VProzentGeliefert> VProzentGeliefert { get; set; }
        public virtual DbSet<VRetoure> VRetoure { get; set; }
        public virtual DbSet<VRetoureBestellung> VRetoureBestellung { get; set; }
        public virtual DbSet<VRetoureEtikett> VRetoureEtikett { get; set; }
        public virtual DbSet<VRetoureInfo> VRetoureInfo { get; set; }
        public virtual DbSet<VRetourePositionenExportData> VRetourePositionenExportData { get; set; }
        public virtual DbSet<VRetouren> VRetouren { get; set; }
        public virtual DbSet<VRetourenposition> VRetourenposition { get; set; }
        public virtual DbSet<VStandardArtikel> VStandardArtikel { get; set; }
        public virtual DbSet<VStandardBestellung> VStandardBestellung { get; set; }
        public virtual DbSet<VStandardBestellungCache> VStandardBestellungCache { get; set; }
        public virtual DbSet<VStandardKategorie> VStandardKategorie { get; set; }
        public virtual DbSet<VStandardMerkmal> VStandardMerkmal { get; set; }
        public virtual DbSet<VStandardadresse> VStandardadresse { get; set; }
        public virtual DbSet<VSteuercache> VSteuercache { get; set; }
        public virtual DbSet<VStuecklisteGutschriftPos> VStuecklisteGutschriftPos { get; set; }
        public virtual DbSet<VStuecklisteInBestellung> VStuecklisteInBestellung { get; set; }
        public virtual DbSet<VStuecklisten> VStuecklisten { get; set; }
        public virtual DbSet<VTicketLabels> VTicketLabels { get; set; }
        public virtual DbSet<VTicketliste> VTicketliste { get; set; }
        public virtual DbSet<VTrackAndTraceConfigurations> VTrackAndTraceConfigurations { get; set; }
        public virtual DbSet<VVersandlager> VVersandlager { get; set; }
        public virtual DbSet<VVorgang> VVorgang { get; set; }
        public virtual DbSet<VWarehouse> VWarehouse { get; set; }
        public virtual DbSet<VWarehouseMerchant> VWarehouseMerchant { get; set; }
        public virtual DbSet<VWareneingangsarchiv> VWareneingangsarchiv { get; set; }
        public virtual DbSet<VWarenlagerEingang> VWarenlagerEingang { get; set; }
        public virtual DbSet<VWarenlagerPlatzArtikel> VWarenlagerPlatzArtikel { get; set; }
        public virtual DbSet<VWmsartikel> VWmsartikel { get; set; }
        public virtual DbSet<VWmsartikelSimple> VWmsartikelSimple { get; set; }
        public virtual DbSet<VWmsartikelWe> VWmsartikelWe { get; set; }
        public virtual DbSet<VWmsboxArtikel> VWmsboxArtikel { get; set; }
        public virtual DbSet<VZulaufLagerartikel> VZulaufLagerartikel { get; set; }
        public virtual DbSet<VZustandsartikel> VZustandsartikel { get; set; }
        public virtual DbSet<Voucher> Voucher { get; set; }
        public virtual DbSet<Warehouse> Warehouse { get; set; }
        public virtual DbSet<ZM1Rabattgruppen> ZM1Rabattgruppen { get; set; }
        public virtual DbSet<ZZmListe> ZZmListe { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=DESKTOP-L3OQ8K1\\JTLWAWI;Database=eazybusiness;Trusted_Connection=True;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<AccountData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AccountData", "Report");

                entity.Property(e => e.AccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name des Kontoinhabers");

                entity.Property(e => e.Bank)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Enthält den Namen des Bankinstituts");

                entity.Property(e => e.Bic)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("BIC")
                    .HasComment("Enthält die BIC");

                entity.Property(e => e.CustomerInternalId).HasComment("Enthält die interne Kunden-ID zur Verknüpfung auf die Kundentabelle");

                entity.Property(e => e.Iban)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("IBAN")
                    .HasComment("Enthält die IBAN");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Kontodeten");
            });

            modelBuilder.Entity<AmeiseExporttyp>(entity =>
            {
                entity.HasKey(e => e.KExportTyp);

                entity.ToTable("ameise_exporttyp");

                entity.Property(e => e.KExportTyp)
                    .ValueGeneratedNever()
                    .HasColumnName("kExportTyp");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KExportTypParent)
                    .HasColumnName("kExportTypParent")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<AmeiseExportvorgang>(entity =>
            {
                entity.HasKey(e => e.KExportVorgang);

                entity.ToTable("ameise_exportvorgang");

                entity.Property(e => e.KExportVorgang).HasColumnName("kExportVorgang");

                entity.Property(e => e.CDatei)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDatei");

                entity.Property(e => e.CMandant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMandant");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KExportTyp).HasColumnName("kExportTyp");

                entity.Property(e => e.KExportVorlage).HasColumnName("kExportVorlage");

                entity.Property(e => e.NAnzahlExportiert).HasColumnName("nAnzahlExportiert");

                entity.Property(e => e.NAnzahlExportiertVon).HasColumnName("nAnzahlExportiertVon");

                entity.Property(e => e.NDauer).HasColumnName("nDauer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<AmeiseExportvorlage>(entity =>
            {
                entity.HasKey(e => e.KExportVorlage);

                entity.ToTable("ameise_exportvorlage");

                entity.Property(e => e.KExportVorlage).HasColumnName("kExportVorlage");

                entity.Property(e => e.CEncoding)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cEncoding")
                    .HasDefaultValueSql("('Windows1252')");

                entity.Property(e => e.CExt)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cExt");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CUebersicht)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cUebersicht");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KExportTyp).HasColumnName("kExportTyp");

                entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");

                entity.Property(e => e.KStandardVorlage).HasColumnName("kStandardVorlage");

                entity.Property(e => e.NDateiformat).HasColumnName("nDateiformat");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NDezimalTrennzeichen).HasColumnName("nDezimalTrennzeichen");

                entity.Property(e => e.NEscape).HasColumnName("nEscape");

                entity.Property(e => e.NKopfzeile).HasColumnName("nKopfzeile");

                entity.Property(e => e.NNachkommastellen).HasColumnName("nNachkommastellen");

                entity.Property(e => e.NQuote).HasColumnName("nQuote");

                entity.Property(e => e.NSpaltenbegrenzer).HasColumnName("nSpaltenbegrenzer");

                entity.Property(e => e.NTausenderTrennzeichen).HasColumnName("nTausenderTrennzeichen");
            });

            modelBuilder.Entity<AmeiseExportvorlagefeld>(entity =>
            {
                entity.HasKey(e => e.KExportVorlageFeld);

                entity.ToTable("ameise_exportvorlagefeld");

                entity.Property(e => e.KExportVorlageFeld).HasColumnName("kExportVorlageFeld");

                entity.Property(e => e.CDbname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDBName");

                entity.Property(e => e.CKopfzeilenbeschriftung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKopfzeilenbeschriftung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KExportVorlage).HasColumnName("kExportVorlage");

                entity.Property(e => e.NSpalte).HasColumnName("nSpalte");
            });

            modelBuilder.Entity<AmeiseExportvorlagefilter>(entity =>
            {
                entity.HasKey(e => e.KExportVorlageFilter);

                entity.ToTable("ameise_exportvorlagefilter");

                entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");

                entity.Property(e => e.CExt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExt");

                entity.Property(e => e.CExtAttribute)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExtAttribute");

                entity.Property(e => e.CExtEigeneFelder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExtEigeneFelder");

                entity.Property(e => e.CExtMerkmale)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExtMerkmale");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSortierReihenfolge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSortierReihenfolge");

                entity.Property(e => e.CSortierSpalte)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSortierSpalte");

                entity.Property(e => e.CUebersicht)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cUebersicht");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KStandardfilter).HasColumnName("kStandardfilter");

                entity.Property(e => e.NFilterArt).HasColumnName("nFilterArt");
            });

            modelBuilder.Entity<AmeiseExportvorlagefilterext>(entity =>
            {
                entity.HasKey(e => e.KExportVorlageFilterExt);

                entity.ToTable("ameise_exportvorlagefilterext");

                entity.Property(e => e.KExportVorlageFilterExt).HasColumnName("kExportVorlageFilterExt");

                entity.Property(e => e.CAdd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdd");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");
            });

            modelBuilder.Entity<AmeiseExportvorlagefilterfeld>(entity =>
            {
                entity.HasKey(e => e.KExportVorlageFilterFeld);

                entity.ToTable("ameise_exportvorlagefilterfeld");

                entity.Property(e => e.KExportVorlageFilterFeld).HasColumnName("kExportVorlageFilterFeld");

                entity.Property(e => e.CDbname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDBName");

                entity.Property(e => e.CTable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTable");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KExportVorlageFilter).HasColumnName("kExportVorlageFilter");

                entity.Property(e => e.NOperator).HasColumnName("nOperator");
            });

            modelBuilder.Entity<AmeiseImportdurchgang>(entity =>
            {
                entity.HasKey(e => e.KImportDurchgang);

                entity.ToTable("ameise_importdurchgang");

                entity.Property(e => e.KImportDurchgang).HasColumnName("kImportDurchgang");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");
            });

            modelBuilder.Entity<AmeiseImportdurchgangartikel>(entity =>
            {
                entity.HasKey(e => new { e.KImportDurchgang, e.KArtikel });

                entity.ToTable("ameise_importdurchgangartikel");

                entity.Property(e => e.KImportDurchgang).HasColumnName("kImportDurchgang");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<AmeiseImporttyp>(entity =>
            {
                entity.HasKey(e => e.KImportTyp);

                entity.ToTable("ameise_importtyp");

                entity.Property(e => e.KImportTyp)
                    .ValueGeneratedNever()
                    .HasColumnName("kImportTyp");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KImportTypParent)
                    .HasColumnName("kImportTypParent")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<AmeiseImporttypeinstellung>(entity =>
            {
                entity.HasKey(e => e.KImportTypEinstellung);

                entity.ToTable("ameise_importtypeinstellung");

                entity.Property(e => e.KImportTypEinstellung)
                    .ValueGeneratedNever()
                    .HasColumnName("kImportTypEinstellung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<AmeiseImporttypeinstellungwert>(entity =>
            {
                entity.HasKey(e => e.KImportTypEinstellungWert);

                entity.ToTable("ameise_importtypeinstellungwert");

                entity.Property(e => e.KImportTypEinstellungWert)
                    .ValueGeneratedNever()
                    .HasColumnName("kImportTypEinstellungWert");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KImportTypEinstellung).HasColumnName("kImportTypEinstellung");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<AmeiseImporttypfeld>(entity =>
            {
                entity.HasKey(e => e.KImportTypFeld);

                entity.ToTable("ameise_importtypfeld");

                entity.Property(e => e.KImportTypFeld)
                    .ValueGeneratedNever()
                    .HasColumnName("kImportTypFeld");

                entity.Property(e => e.CDbname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDBName");

                entity.Property(e => e.CDbtyp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cDBTyp");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CStandardWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStandardWert");

                entity.Property(e => e.CTable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTable");

                entity.Property(e => e.CValidation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValidation");

                entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");

                entity.Property(e => e.NLaenge).HasColumnName("nLaenge");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<AmeiseImportvorgang>(entity =>
            {
                entity.HasKey(e => e.KImportVorgang);

                entity.ToTable("ameise_importvorgang");

                entity.Property(e => e.KImportVorgang).HasColumnName("kImportVorgang");

                entity.Property(e => e.CImportdatei)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cImportdatei");

                entity.Property(e => e.CMandant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMandant");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");

                entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");

                entity.Property(e => e.NAbZeile).HasColumnName("nAbZeile");

                entity.Property(e => e.NAnzahlAktualisiert).HasColumnName("nAnzahlAktualisiert");

                entity.Property(e => e.NAnzahlFehler).HasColumnName("nAnzahlFehler");

                entity.Property(e => e.NAnzahlImportiert).HasColumnName("nAnzahlImportiert");

                entity.Property(e => e.NAnzahlWarnungen).HasColumnName("nAnzahlWarnungen");

                entity.Property(e => e.NDauer).HasColumnName("nDauer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<AmeiseImportvorlage>(entity =>
            {
                entity.HasKey(e => e.KImportVorlage);

                entity.ToTable("ameise_importvorlage");

                entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CUebersicht)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cUebersicht");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");

                entity.Property(e => e.KStandardVorlage).HasColumnName("kStandardVorlage");

                entity.Property(e => e.NAbZeile).HasColumnName("nAbZeile");

                entity.Property(e => e.NDateiformat).HasColumnName("nDateiformat");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NEscape).HasColumnName("nEscape");

                entity.Property(e => e.NKopfzeile).HasColumnName("nKopfzeile");

                entity.Property(e => e.NQuote).HasColumnName("nQuote");

                entity.Property(e => e.NSpaltenbegrenzer).HasColumnName("nSpaltenbegrenzer");
            });

            modelBuilder.Entity<AmeiseImportvorlageeinstellung>(entity =>
            {
                entity.HasKey(e => e.KImportVorlageEinstellung);

                entity.ToTable("ameise_importvorlageeinstellung");

                entity.Property(e => e.KImportVorlageEinstellung).HasColumnName("kImportVorlageEinstellung");

                entity.Property(e => e.KImportTypEinstellung).HasColumnName("kImportTypEinstellung");

                entity.Property(e => e.KImportTypEinstellungWert).HasColumnName("kImportTypEinstellungWert");

                entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
            });

            modelBuilder.Entity<AmeiseImportvorlagefeld>(entity =>
            {
                entity.HasKey(e => e.KImportVorlageFeld);

                entity.ToTable("ameise_importvorlagefeld");

                entity.Property(e => e.KImportVorlageFeld).HasColumnName("kImportVorlageFeld");

                entity.Property(e => e.CDbname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDBName");

                entity.Property(e => e.CDbtyp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cDBTyp");

                entity.Property(e => e.CExt)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cExt");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CStandardWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStandardWert")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CTable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTable");

                entity.Property(e => e.CValidation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValidation");

                entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");

                entity.Property(e => e.NKey).HasColumnName("nKey");

                entity.Property(e => e.NKey2).HasColumnName("nKey2");

                entity.Property(e => e.NLaenge).HasColumnName("nLaenge");

                entity.Property(e => e.NSpalte).HasColumnName("nSpalte");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<AmeiseImportvorlagefeldps>(entity =>
            {
                entity.HasKey(e => e.KImportVorlageFeldPs);

                entity.ToTable("ameise_importvorlagefeldps");

                entity.Property(e => e.KImportVorlageFeldPs).HasColumnName("kImportVorlageFeldPS");

                entity.Property(e => e.CDbname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDBName");

                entity.Property(e => e.CPraefix)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPraefix");

                entity.Property(e => e.CSuffix)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuffix");

                entity.Property(e => e.CTable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTable");

                entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");
            });

            modelBuilder.Entity<AmeiseImportvorlagefilter>(entity =>
            {
                entity.HasKey(e => e.KImportVorlageFilter);

                entity.ToTable("ameise_importvorlagefilter");

                entity.Property(e => e.KImportVorlageFilter).HasColumnName("kImportVorlageFilter");

                entity.Property(e => e.CDbname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDBName");

                entity.Property(e => e.CDbtyp)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cDBTyp");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTable");

                entity.Property(e => e.CValidation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValidation");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KImportVorlage).HasColumnName("kImportVorlage");

                entity.Property(e => e.NLaenge).HasColumnName("nLaenge");

                entity.Property(e => e.NOperator).HasColumnName("nOperator");

                entity.Property(e => e.NSpalte).HasColumnName("nSpalte");
            });

            modelBuilder.Entity<AmeiseUpdateOptimizer>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KImportTyp });

                entity.ToTable("ameise_UpdateOptimizer");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KImportTyp).HasColumnName("kImportTyp");

                entity.Property(e => e.CUpdateRawString)
                    .IsUnicode(false)
                    .HasColumnName("cUpdateRawString");
            });

            modelBuilder.Entity<ArtikelBildShop>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ArtikelBildShop", "DEPRECATED");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelBildPlattform).HasColumnName("kArtikelBildPlattform");

                entity.Property(e => e.KArtikelbildPlattformMain).HasColumnName("kArtikelbildPlattformMain");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NNr).HasColumnName("nNr");
            });

            modelBuilder.Entity<Artikelzustand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Artikelzustand", "Statistik");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");
            });

            modelBuilder.Entity<BestellposTypenName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BestellposTypenName", "Statistik");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.TbestellposNType).HasColumnName("tbestellpos_nType");
            });

            modelBuilder.Entity<BinLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BinLocation", "Report");

                entity.Property(e => e.BinLocatinName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Comment)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.InternalId).ValueGeneratedOnAdd();

                entity.Property(e => e.InventoryDate).HasColumnType("datetime");

                entity.Property(e => e.Length).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.MaximumWeight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Width).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<BinLocationItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BinLocationItem", "Report");

                entity.Property(e => e.Comment1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Comment2)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Company", "Report");

                entity.Property(e => e.AccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Inhaber des Firmenkontos");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Strasse der Firma");

                entity.Property(e => e.BankName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Name der Bank des Firmenkontos");

                entity.Property(e => e.Bic)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("BIC")
                    .HasComment("BIC des Firmenkontos");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Ort der Firma");

                entity.Property(e => e.CompanyName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Enthält den Firmennamen");

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Land der Firma");

                entity.Property(e => e.CountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Firmenlandes");

                entity.Property(e => e.CreditorId)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasComment("Gläubiger-ID");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("E-Mail-Adresse der Firma");

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Faxnummer der Firma");

                entity.Property(e => e.FederalTaxId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Steuernummer der Firma");

                entity.Property(e => e.Iban)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("IBAN")
                    .HasComment("IBAN des Firmenkontos");

                entity.Property(e => e.InternalId).HasComment("Interne Firmen-ID der Tabelle tFirma");

                entity.Property(e => e.ManagingDirector)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Enthält den Unternehmer der Firma");

                entity.Property(e => e.PayPalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("PayPalEMail")
                    .HasComment("E-Mail-Adresse des PayPal-Kontos");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Telefonnummer der Firma");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("PLZ der Firma");

                entity.Property(e => e.ValueAddedTaxId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("USt-IdNr. der Firma");

                entity.Property(e => e.WebsiteUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WebsiteURL")
                    .HasComment("URL der Website der Firma");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Currency", "Report");

                entity.Property(e => e.CurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währungsangabe");

                entity.Property(e => e.CurrencyName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("Name der Währung");

                entity.Property(e => e.CurrencyNameHtml)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Währung für HTML-Ausgabe");

                entity.Property(e => e.Default).HasComment("Gibt an, ob es die Standardwährung ist");

                entity.Property(e => e.Factor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Umrechnungsfaktor zur Fremdwährung");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Währungs");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Customer", "Report");

                entity.Property(e => e.AccountsReceivableNumber).HasComment("Enthält die Debitorennummer");

                entity.Property(e => e.CompanyRegistrationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Enthält die Handelsregisternr. des Kunden");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum des Kunden in der Datenbank");

                entity.Property(e => e.Credit)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gibt das Shopguthaben des Kunden an");

                entity.Property(e => e.CreditLimit).HasComment("Gibt das Kreditlimit des Kunden an");

                entity.Property(e => e.CustomerGroupInternalId).HasComment("Interne Kundengruppen-ID");

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Kundennummer");

                entity.Property(e => e.DateOfBirth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Geburtsdatum des Kunden");

                entity.Property(e => e.Discount)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Gibt den Rabatt in Prozent an");

                entity.Property(e => e.FederalTaxId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Enthält die Steuernummer des Kunden");

                entity.Property(e => e.InternalId).HasComment("Interne Kunden-ID");

                entity.Property(e => e.IsActive).HasComment("Gibt an, ob der Kunde aktiv oder inaktiv gesetzt ist");

                entity.Property(e => e.IsCashPayer).HasComment("Gibt an, ob es sich um einen Kassenkunden handelt");

                entity.Property(e => e.IsLocked).HasComment("Gibt an, ob der Kunde gesperrt ist");

                entity.Property(e => e.IsRepresentative).HasComment("Kunde von Firma?");

                entity.Property(e => e.LanguageIso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .HasComment("ISO-Code der Sprache des Kunden");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(39)
                    .IsUnicode(false)
                    .HasComment("Auftrags-ID des Kunden");

                entity.Property(e => e.PaymentMethodInternalId).HasComment("Interne ID der Zahlungsart");

                entity.Property(e => e.Source)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Gibt die Herkunftsplattform (Amazon, eBay usw.) des Kunden an");

                entity.Property(e => e.TermOfPayment).HasComment("Gibt das Zahlungsziel des Kunden in Tagen an");

                entity.Property(e => e.WebsiteUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WebsiteURL")
                    .HasComment("URL der Website des Kunden");
            });

            modelBuilder.Entity<CustomerAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CustomerAttribute", "Report");

                entity.Property(e => e.AttributeDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.AttributeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustomerBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CustomerBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Strasse des Kunden");

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Adresszusatz");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Wohnort des Kunden");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasComment("Firmenname des Kunden");

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasComment("Firmenzusatz");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Land des Kunden");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Landes des Kunden");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Kundennummer");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("E-Mail-Adresse des Kunden");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Faxnummer des Kunden");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Vorname des Kunden");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Adresse");

                entity.Property(e => e.IsStandard).HasComment("die hinterlegte Standardadresse des Kunden");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Nachname des Kunden");

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Mobilnummer des Kunden");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Telefonnummer des Kunden");

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasComment("PLZ des Kunden");

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Anrede des Kunden");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bundesland des Kunden");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("Titel des Kunden");

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasComment("USt-IdNr. des Kunden");
            });

            modelBuilder.Entity<CustomerGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CustomerGroup", "Report");

                entity.Property(e => e.DiscountInPercent).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustomerOtherAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CustomerOtherAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CustomerShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CustomerShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeliveryNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNote", "Report");

                entity.Property(e => e.Comment)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasComment("Bemerkung zum Lieferschein");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Landes im Lieferschein");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstellungsdatum des Lieferscheins");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währung im Lieferschein");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.DeliveryNoteData).HasComment("Lieferscheindaten");

                entity.Property(e => e.DeliveryNoteNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer des Lieferscheins");

                entity.Property(e => e.DeliveryNoteText)
                    .IsUnicode(false)
                    .HasComment("Drucktext für den Lieferschein");

                entity.Property(e => e.HasDeliveryNoteAsPdf)
                    .HasColumnName("HasDeliveryNoteAsPDF")
                    .HasComment("Lieferschein als PDF vorhanden");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Lieferscheins");

                entity.Property(e => e.LanguageIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .IsFixedLength(true)
                    .HasComment("ISO-Code der Sprache im Lieferschein");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Versanddatum");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Hinweisfeld zum Lieferschein");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasComment("Vorgangsnummer im Lieferschein");

                entity.Property(e => e.PaymentMethodType)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasComment("Art der Zahlungsmethode im Lieferschein");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Druckdatum des Lieferscheins");

                entity.Property(e => e.SalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer der Bestellung");

                entity.Property(e => e.ServiceDate)
                    .HasColumnType("datetime")
                    .HasComment("Lieferdatum des Lieferscheins");

                entity.Property(e => e.ShippingCosts)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Versandkosten der Lieferung");

                entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamter Nettopreis");

                entity.Property(e => e.TotalShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtgewicht der Lieferung");

                entity.Property(e => e.UserInternalId).HasComment("Interne IDpass des Benutzers");

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Umsatzsteuer-ID im Lieferschein");
            });

            modelBuilder.Entity<DeliveryNoteBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNoteBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeliveryNoteFbabarcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNoteFBABarcode", "Report");

                entity.Property(e => e.Fbabarcode)
                    .IsUnicode(false)
                    .HasColumnName("FBABarcode");
            });

            modelBuilder.Entity<DeliveryNotePosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNotePosition", "Report");

                entity.Property(e => e.AmazonCustomJson)
                    .IsUnicode(false)
                    .HasColumnName("AmazonCustomJSON");

                entity.Property(e => e.BillOfMaterialsPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Position der Stücklisten");

                entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Vater-ID der Position der Stücklisten");

                entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID Konfigurationsartikel");

                entity.Property(e => e.ConfiguratorPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Gibt an, ob Stücklistenkomponente oder Stücklistenvaterartikel");

                entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Vater-ID der Position der Konfigurationsartikel");

                entity.Property(e => e.DeliveryNoteInternalId).HasComment("Interne ID des Lieferscheins der Positionen");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN")
                    .HasComment("Internationale Artikelnummer");

                entity.Property(e => e.IndividualWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gewichte der einzelnen Lieferscheinpositionen");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Lieferscheinposition");

                entity.Property(e => e.ItemDescriptionBrief)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasComment("Artikelbeschreibung kurz");

                entity.Property(e => e.ItemDescriptionDetailed)
                    .IsUnicode(false)
                    .HasComment("Artikebeschreibung ausführlich");

                entity.Property(e => e.Jfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Drucktext der Bestellposition");

                entity.Property(e => e.NetPricePerUnit)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Nettopreis pro Einheit der Lieferscheinposition");

                entity.Property(e => e.Note)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("Hinweisfeld zur Lieferscheinposition");

                entity.Property(e => e.PositionType)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasComment("Typ der Position im Lieferschein");

                entity.Property(e => e.ProductInternalId).HasComment("Interne Id des Artikels der Lieferscheinposition");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl pro Position auf dem Lieferschein");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Artikelnummer");

                entity.Property(e => e.Sorting).HasComment("Sortierung der Lieferscheinpositonen");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtnettopreis der Lieferscheinpositionen");

                entity.Property(e => e.TotalShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtversandgewicht der Lieferung");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Einheit pro Position");
            });

            modelBuilder.Entity<DeliveryNotePositionConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNotePositionConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeliveryNotePositionDeliveryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNotePositionDeliveryDetails", "Report");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DeliveryNoteShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DeliveryNoteShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Dunning>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Dunning", "Report");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.CompletionDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum an dem die Mahnung erledigt wurde");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Landes");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstellungsdatum der Mahnung");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währung");

                entity.Property(e => e.CustomerGroupInternalId).HasComment("Interne ID der Kundengruppe");

                entity.Property(e => e.DunningDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Mahung");

                entity.Property(e => e.DunningFee)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Mahngebühr");

                entity.Property(e => e.DunningLevelName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Mahnstufe");

                entity.Property(e => e.FeeInterestRate)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Zinssatz der Mahngebühr");

                entity.Property(e => e.FlatRateDunningFee)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Pauschale Mahngebühr");

                entity.Property(e => e.GracePeriod).HasComment("Karenzzeit");

                entity.Property(e => e.GrossValue)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Bruttobetrag der Mahnung");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Mahnung");

                entity.Property(e => e.InvoiceInternalId).HasComment("Interne ID der Rechnung");

                entity.Property(e => e.LanguageIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .IsFixedLength(true)
                    .HasComment("ISO-Code der Sprache");

                entity.Property(e => e.NumberDunningRepitions).HasComment("Level der Mahnstufe");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(325)
                    .IsUnicode(false)
                    .HasComment("Vorgangs-ID der Mahnung");

                entity.Property(e => e.PaymentTerm).HasComment("Zahlungsfrist in Tagen");

                entity.Property(e => e.PaymentTermDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Zahlungsfrist der Mahnung");

                entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("USt-IdNr. der Mahnung");
            });

            modelBuilder.Entity<DunningInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DunningInvoice", "Report");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MailingDate).HasColumnType("datetime");

                entity.Property(e => e.OpenGrossPrice).HasColumnType("decimal(31, 14)");

                entity.Property(e => e.PrintingDate).HasColumnType("datetime");

                entity.Property(e => e.TotalGrossPrice).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<DunningInvoiceBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DunningInvoiceBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DunningInvoicePayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DunningInvoicePayments", "Report");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.StandardChartOfAccountsManual)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<EbayAlienitem>(entity =>
            {
                entity.HasKey(e => e.KAlienItem);

                entity.ToTable("ebay_alienitem");

                entity.HasIndex(e => e.ItemId, "IX_ebay_alienitem_ItemID");

                entity.HasIndex(e => e.Status, "IX_ebay_alienitem_Status");

                entity.Property(e => e.KAlienItem)
                    .ValueGeneratedNever()
                    .HasColumnName("kAlienItem");

                entity.Property(e => e.BuyItNowPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.CurrencyId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyID");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.ListingType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.SsBidCount)
                    .HasColumnName("SS_BidCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsBidderCount).HasColumnName("SS_BidderCount");

                entity.Property(e => e.SsCurrentPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("SS_CurrentPrice");

                entity.Property(e => e.SsHighBidderUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SS_HighBidderUserId");

                entity.Property(e => e.StartPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UserID");

                entity.Property(e => e.Vatpercent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATPercent");
            });

            modelBuilder.Entity<EbayAttributSetArray>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_attributSetArray");

                entity.HasIndex(e => e.AttributeId, "IX_ebay_attributSetArray_AttributeId");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_attributSetArray_AttributeSetId");

                entity.HasIndex(e => e.KCategoryId, "IX_ebay_attributSetArray_kCategoryID");

                entity.HasIndex(e => e.KItem, "IX_ebay_attributSetArray_kItem");

                entity.Property(e => e.KCategoryId).HasColumnName("kCategoryID");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.ValueLiteral)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EbayBeschreibungstemplate>(entity =>
            {
                entity.HasKey(e => e.KEbayBeschreibungsTemplate);

                entity.ToTable("ebay_beschreibungstemplate");

                entity.Property(e => e.KEbayBeschreibungsTemplate)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayBeschreibungsTemplate");

                entity.Property(e => e.CBody)
                    .IsUnicode(false)
                    .HasColumnName("cBody");

                entity.Property(e => e.CH1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cH1");

                entity.Property(e => e.CH2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cH2");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVersandhinweis)
                    .IsUnicode(false)
                    .HasColumnName("cVersandhinweis");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.PaymentInstructions).IsUnicode(false);
            });

            modelBuilder.Entity<EbayBestoffer>(entity =>
            {
                entity.HasKey(e => e.BestOfferId);

                entity.ToTable("ebay_bestoffer");

                entity.HasIndex(e => e.ItemId, "IX_ebay_bestoffer_ItemID");

                entity.Property(e => e.BestOfferId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("BestOfferID");

                entity.Property(e => e.CounterMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CounterPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(256)
                    .IsUnicode(false);

                entity.Property(e => e.ExpirationTime).HasColumnType("datetime");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.Message)
                    .HasMaxLength(501)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.UserId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("UserID");
            });

            modelBuilder.Entity<EbayBuyer>(entity =>
            {
                entity.HasKey(e => e.KBuyer);

                entity.ToTable("ebay_buyer");

                entity.HasIndex(e => e.UserId, "IX_ebay_buyer_UserID");

                entity.Property(e => e.KBuyer)
                    .ValueGeneratedNever()
                    .HasColumnName("kBuyer");

                entity.Property(e => e.AboutMePage).HasDefaultValueSql("('0')");

                entity.Property(e => e.CharityId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CharityID");

                entity.Property(e => e.CityName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EBayGoodStanding)
                    .HasColumnName("eBayGoodStanding")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Eiastoken)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EIASToken");

                entity.Property(e => e.Email)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackPrivate).HasDefaultValueSql("('0')");

                entity.Property(e => e.FeedbackRatingStar)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Idverified)
                    .HasColumnName("IDVerified")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NewUser).HasDefaultValueSql("('0')");

                entity.Property(e => e.Phone)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PositiveFeedbackPercent).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.RegistrationDate)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SaCityName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SA_CityName");

                entity.Property(e => e.SaCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_Country");

                entity.Property(e => e.SaCountryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_CountryName");

                entity.Property(e => e.SaExternalAddressId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_ExternalAddressID");

                entity.Property(e => e.SaName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_Name");

                entity.Property(e => e.SaPhone)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SA_Phone");

                entity.Property(e => e.SaPostalCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("SA_PostalCode");

                entity.Property(e => e.SaStateOrProvince)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SA_StateOrProvince");

                entity.Property(e => e.SaStreet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_Street");

                entity.Property(e => e.SaStreet1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_Street1");

                entity.Property(e => e.SaStreet2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SA_Street2");

                entity.Property(e => e.Site)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SiteVerified).HasDefaultValueSql("('0')");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Street)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Street1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Street2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UserID");

                entity.Property(e => e.UserIdchanged)
                    .HasColumnName("UserIDChanged")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.UserIdlastChanged)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("UserIDLastChanged");

                entity.Property(e => e.Vatstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VATStatus");
            });

            modelBuilder.Entity<EbayCheckout>(entity =>
            {
                entity.HasKey(e => e.KEbayCheckout);

                entity.ToTable("ebay_checkout");

                entity.HasIndex(e => e.DErstelltAm, "IX_ebay_checkout_dErstelltAm");

                entity.HasIndex(e => e.KEbayBuyer, "IX_ebay_checkout_kEbayBuyer");

                entity.HasIndex(e => e.NStatus, "IX_ebay_checkout_nStatus");

                entity.Property(e => e.KEbayCheckout)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayCheckout");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CComment)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cComment");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLieferAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresszusatz");

                entity.Property(e => e.CLieferAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAnrede");

                entity.Property(e => e.CLieferFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferFax");

                entity.Property(e => e.CLieferFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferFirma");

                entity.Property(e => e.CLieferHandy)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferHandy");

                entity.Property(e => e.CLieferLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferLand");

                entity.Property(e => e.CLieferNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferNachname");

                entity.Property(e => e.CLieferNamenszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferNamenszusatz");

                entity.Property(e => e.CLieferOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferOrt");

                entity.Property(e => e.CLieferOrtszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferOrtszusatz");

                entity.Property(e => e.CLieferPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferPLZ");

                entity.Property(e => e.CLieferStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferStrasse");

                entity.Property(e => e.CLieferTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferTel");

                entity.Property(e => e.CLieferVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferVorname");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(255)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPaymentStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentStatus");

                entity.Property(e => e.CPaypalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaypalTransactionID");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPuizahlungsdaten)
                    .IsUnicode(false)
                    .HasColumnName("cPUIZahlungsdaten");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CUstId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUStID");

                entity.Property(e => e.CVersandArt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandArt");

                entity.Property(e => e.CVerwendungszweck)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZahlungBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungBankName");

                entity.Property(e => e.CZahlungBlz)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungBLZ");

                entity.Property(e => e.CZahlungCvv)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungCVV");

                entity.Property(e => e.CZahlungGueltigkeit)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungGueltigkeit");

                entity.Property(e => e.CZahlungInhaber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungInhaber");

                entity.Property(e => e.CZahlungKartenNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungKartenNr");

                entity.Property(e => e.CZahlungKartenTyp)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungKartenTyp");

                entity.Property(e => e.CZahlungKontoNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungKontoNr");

                entity.Property(e => e.CZahlungsart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsart");

                entity.Property(e => e.DAbgeschlossenAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbgeschlossenAm");

                entity.Property(e => e.DErstelltAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelltAm");

                entity.Property(e => e.FSumme)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSumme");

                entity.Property(e => e.FVersandkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandkosten");

                entity.Property(e => e.KEbayBuyer).HasColumnName("kEbayBuyer");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NAnzahlPos).HasColumnName("nAnzahlPos");

                entity.Property(e => e.NCheckoutType)
                    .HasColumnName("nCheckoutType")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");

                entity.Property(e => e.NNeu).HasColumnName("nNeu");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<EbayCheckoutpos>(entity =>
            {
                entity.HasKey(e => e.KEbayCheckoutPos)
                    .HasName("PK_ebay_checkoutpos_kEbayCheckoutPos");

                entity.ToTable("ebay_checkoutpos");

                entity.HasIndex(e => e.ItemId, "IX_ebay_checkoutpos_ItemID");

                entity.HasIndex(e => e.TransactionId, "IX_ebay_checkoutpos_TransactionID");

                entity.HasIndex(e => e.KArtikel, "IX_ebay_checkoutpos_kArtikel");

                entity.HasIndex(e => e.KEbayCheckout, "IX_ebay_checkoutpos_kEbayCheckout");

                entity.HasIndex(e => new { e.TransactionId, e.ItemId }, "UC_ebay_checkoutpos_TransactionID_ItemID")
                    .IsUnique();

                entity.Property(e => e.KEbayCheckoutPos)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayCheckoutPos");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");

                entity.Property(e => e.KXcheckoutPos).HasColumnName("kXCheckoutPos");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<EbayCoposeigenschaft>(entity =>
            {
                entity.HasKey(e => e.KebayCoposeigenschaft);

                entity.ToTable("ebay_coposeigenschaft");

                entity.Property(e => e.KebayCoposeigenschaft)
                    .ValueGeneratedNever()
                    .HasColumnName("kebay_coposeigenschaft");

                entity.Property(e => e.FAufpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufpreis");

                entity.Property(e => e.KEbayCheckoutPos).HasColumnName("kEbayCheckoutPos");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            });

            modelBuilder.Entity<EbayDataFeedback>(entity =>
            {
                entity.HasKey(e => e.KFeedback);

                entity.ToTable("ebay_data_feedback");

                entity.Property(e => e.KFeedback)
                    .ValueGeneratedNever()
                    .HasColumnName("kFeedback");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            });

            modelBuilder.Entity<EbayDataFeedbackIn>(entity =>
            {
                entity.HasKey(e => e.KFeedbackIn);

                entity.ToTable("ebay_data_feedback_in");

                entity.HasIndex(e => e.ItemId, "IX_ebay_data_feedback_in_ItemID");

                entity.HasIndex(e => e.TransactionId, "IX_ebay_data_feedback_in_TransactionID");

                entity.Property(e => e.KFeedbackIn)
                    .ValueGeneratedNever()
                    .HasColumnName("kFeedbackIn");

                entity.Property(e => e.CommentText)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.CommentTime)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CommentType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CommentingUser)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FeedbackId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FeedbackID");

                entity.Property(e => e.FeedbackRole)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<EbayDataFeedbackOut>(entity =>
            {
                entity.HasKey(e => e.KFeedbackOut);

                entity.ToTable("ebay_data_feedback_out");

                entity.HasIndex(e => e.FeedbackId, "IX_ebay_data_feedback_out_FeedbackID");

                entity.HasIndex(e => e.ItemId, "IX_ebay_data_feedback_out_ItemID");

                entity.Property(e => e.KFeedbackOut)
                    .ValueGeneratedNever()
                    .HasColumnName("kFeedbackOut");

                entity.Property(e => e.CommentText)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.CommentType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FeedbackId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FeedbackID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.Sent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TargetUser)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<EbayDataFeedbackmgr>(entity =>
            {
                entity.HasKey(e => e.KFeedbackmgr);

                entity.ToTable("ebay_data_feedbackmgr");

                entity.Property(e => e.KFeedbackmgr)
                    .ValueGeneratedNever()
                    .HasColumnName("kFeedbackmgr");

                entity.Property(e => e.CMailText)
                    .IsUnicode(false)
                    .HasColumnName("cMailText");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NErinnerung).HasColumnName("nErinnerung");

                entity.Property(e => e.NHtml).HasColumnName("nHTML");

                entity.Property(e => e.NOption).HasColumnName("nOption");
            });

            modelBuilder.Entity<EbayDataHtmltemplatetagcontent>(entity =>
            {
                entity.HasKey(e => e.KEbayHtmlTemplateTagContent);

                entity.ToTable("ebay_data_htmltemplatetagcontent");

                entity.Property(e => e.KEbayHtmlTemplateTagContent)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayHtmlTemplateTagContent");

                entity.Property(e => e.CTagName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTagName");

                entity.Property(e => e.CTagOptions)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTagOptions");

                entity.Property(e => e.CTagValue)
                    .IsUnicode(false)
                    .HasColumnName("cTagValue");

                entity.Property(e => e.KEbayHtmlTemplate).HasColumnName("kEbayHtmlTemplate");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");
            });

            modelBuilder.Entity<EbayDataMembermessageIn>(entity =>
            {
                entity.HasKey(e => e.KMemberMessageIn);

                entity.ToTable("ebay_data_membermessage_in");

                entity.Property(e => e.KMemberMessageIn)
                    .ValueGeneratedNever()
                    .HasColumnName("kMemberMessageIn");

                entity.Property(e => e.CreationDate)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.QuestionBody).IsUnicode(false);

                entity.Property(e => e.QuestionMessageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QuestionMessageID");

                entity.Property(e => e.QuestionMessageType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.QuestionQuestionType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.QuestionRecipientId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QuestionRecipientID");

                entity.Property(e => e.QuestionSenderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("QuestionSenderID");

                entity.Property(e => e.QuestionSubject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Status).HasDefaultValueSql("('0')");

                entity.HasOne(d => d.KEbayuserNavigation)
                    .WithMany(p => p.EbayDataMembermessageIn)
                    .HasForeignKey(d => d.KEbayuser)
                    .HasConstraintName("FK_ebay_data_membermessage_in_kEbayuser");
            });

            modelBuilder.Entity<EbayDataMembermessageOut>(entity =>
            {
                entity.HasKey(e => e.KMemberMessageOut);

                entity.ToTable("ebay_data_membermessage_out");

                entity.Property(e => e.KMemberMessageOut)
                    .ValueGeneratedNever()
                    .HasColumnName("kMemberMessageOut");

                entity.Property(e => e.Body).IsUnicode(false);

                entity.Property(e => e.CStatus)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus")
                    .HasDefaultValueSql("('zu versenden')");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.MessageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MessageID");

                entity.Property(e => e.MessageType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ParentMessageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ParentMessageID");

                entity.Property(e => e.QuestionType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecipientId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("RecipientID");

                entity.Property(e => e.Sent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Subject)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.KEbayuserNavigation)
                    .WithMany(p => p.EbayDataMembermessageOut)
                    .HasForeignKey(d => d.KEbayuser)
                    .HasConstraintName("FK_ebay_data_membermessage_out_kEbayuser");
            });

            modelBuilder.Entity<EbayDataStore>(entity =>
            {
                entity.HasKey(e => e.KStore);

                entity.ToTable("ebay_data_store");

                entity.Property(e => e.KStore)
                    .ValueGeneratedNever()
                    .HasColumnName("kStore");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SubscriptionLevel)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Url)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("URL");
            });

            modelBuilder.Entity<EbayDeAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_attribute");

                entity.HasIndex(e => e.AttributeId, "IX_ebay_de_attribute_AttributeId");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_attribute_AttributeSetId");

                entity.Property(e => e.DateFormat)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("dateFormat");

                entity.Property(e => e.DefaultValueId).HasColumnName("defaultValueId");

                entity.Property(e => e.IsRequired)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("isRequired")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Label)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LabelVisible)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("labelVisible")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.Maxlength)
                    .HasColumnName("maxlength")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Ordernumber)
                    .HasColumnName("ordernumber")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.ParentAttrId).HasColumnName("parentAttrId");

                entity.Property(e => e.PresentationType).HasColumnName("presentationType");

                entity.Property(e => e.WhenToShow)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EbayDeCategories>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.ToTable("ebay_de_categories");

                entity.HasIndex(e => e.CategoryParentId, "IX_ebay_de_categories_CategoryParentId");

                entity.Property(e => e.CategoryId).ValueGeneratedNever();

                entity.Property(e => e.B2bvatenabled)
                    .HasColumnName("B2BVATEnabled")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConditionValues)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IntlAutosFixedCat).HasDefaultValueSql("('0')");

                entity.Property(e => e.LeafCategory).HasDefaultValueSql("('0')");

                entity.Property(e => e.Lsd)
                    .HasColumnName("LSD")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Orpa)
                    .HasColumnName("ORPA")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.Orra)
                    .HasColumnName("ORRA")
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<EbayDeCategory2Cs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_category2CS");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_category2CS_AttributeSetId");

                entity.HasIndex(e => e.CategoryId, "IX_ebay_de_category2CS_CategoryId");

                entity.Property(e => e.AttributeSetId).HasDefaultValueSql("('0')");

                entity.Property(e => e.CategoryId).HasDefaultValueSql("('0')");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeCondition>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_condition");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<EbayDeDependency>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_dependency");

                entity.HasIndex(e => e.AttributeId, "IX_ebay_de_dependency_AttributeId");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_dependency_AttributeSetId");

                entity.HasIndex(e => e.ParentValueId, "IX_ebay_de_dependency_parentValueId");

                entity.Property(e => e.ChildAttrId).HasColumnName("childAttrId");

                entity.Property(e => e.ParentValueId).HasColumnName("parentValueId");
            });

            modelBuilder.Entity<EbayDeGebAngebotsgebuehr>(entity =>
            {
                entity.HasKey(e => e.KEbayDeGebAngebotsgebuehr);

                entity.ToTable("ebay_de_geb_angebotsgebuehr");

                entity.Property(e => e.KEbayDeGebAngebotsgebuehr)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbay_DE_Geb_Angebotsgebuehr");

                entity.Property(e => e.Gebuehr).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PreisMax).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PreisMin).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<EbayDeGebAngebotsgebuehrausnahmen>(entity =>
            {
                entity.HasKey(e => e.KEbayDeGebAngebotsgebuehrAusnahmen);

                entity.ToTable("ebay_de_geb_angebotsgebuehrausnahmen");

                entity.Property(e => e.KEbayDeGebAngebotsgebuehrAusnahmen)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbay_DE_Geb_AngebotsgebuehrAusnahmen");

                entity.Property(e => e.Gebuehr).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.NurFestpreis).HasColumnName("nurFestpreis");
            });

            modelBuilder.Entity<EbayDeGebErweiterungen>(entity =>
            {
                entity.HasKey(e => e.KEbayDeGebErweiterungen);

                entity.ToTable("ebay_de_geb_erweiterungen");

                entity.Property(e => e.KEbayDeGebErweiterungen)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbay_DE_Geb_Erweiterungen");

                entity.Property(e => e.Enhancement)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Gebuehr).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.MehrereArtikel).HasColumnName("mehrereArtikel");
            });

            modelBuilder.Entity<EbayDeIs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_is");

                entity.HasIndex(e => e.CategoryId, "IX_ebay_de_is_CategoryId");

                entity.Property(e => e.CHelpText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHelpText");

                entity.Property(e => e.CHelpUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHelpURL");

                entity.Property(e => e.KName).HasColumnName("kName");

                entity.Property(e => e.NMaxValues).HasColumnName("nMaxValues");

                entity.Property(e => e.NMinValues).HasColumnName("nMinValues");

                entity.Property(e => e.NSelectionMode).HasColumnName("nSelectionMode");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<EbayDeIsglobalname>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_isglobalname");

                entity.HasIndex(e => e.KName, "IX_ebay_de_isglobalname_kName");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KName).HasColumnName("kName");
            });

            modelBuilder.Entity<EbayDeIsglobalvalue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_isglobalvalue");

                entity.HasIndex(e => e.KValue, "IX_ebay_de_isglobalvalue_kValue");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KValue).HasColumnName("kValue");
            });

            modelBuilder.Entity<EbayDeIsrelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_isrelation");

                entity.HasIndex(e => e.CategoryId, "IX_ebay_de_isrelation_CategoryId");

                entity.HasIndex(e => e.KName, "IX_ebay_de_isrelation_kName");

                entity.HasIndex(e => e.KNameParent, "IX_ebay_de_isrelation_kNameParent");

                entity.HasIndex(e => e.KValue, "IX_ebay_de_isrelation_kValue");

                entity.HasIndex(e => e.KValueParent, "IX_ebay_de_isrelation_kValueParent");

                entity.Property(e => e.KName).HasColumnName("kName");

                entity.Property(e => e.KNameParent).HasColumnName("kNameParent");

                entity.Property(e => e.KValue).HasColumnName("kValue");

                entity.Property(e => e.KValueParent).HasColumnName("kValueParent");
            });

            modelBuilder.Entity<EbayDeIsvalue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_isvalue");

                entity.HasIndex(e => e.CategoryId, "IX_ebay_de_isvalue_CategoryId");

                entity.HasIndex(e => e.KName, "IX_ebay_de_isvalue_kName");

                entity.HasIndex(e => e.KValue, "IX_ebay_de_isvalue_kValue");

                entity.Property(e => e.KName).HasColumnName("kName");

                entity.Property(e => e.KValue).HasColumnName("kValue");
            });

            modelBuilder.Entity<EbayDeLaender>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_laender");

                entity.HasIndex(e => e.Country, "UC_ebay_de_laender_Country_Unique")
                    .IsUnique();

                entity.Property(e => e.Country)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeSidewideCs>(entity =>
            {
                entity.HasKey(e => e.AttributeSetId);

                entity.ToTable("ebay_de_sidewideCS");

                entity.Property(e => e.AttributeSetId).ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeSidewideExCategories>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_sidewideExCategories");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_sidewideExCategories_AttributeSetId");

                entity.HasIndex(e => e.CategoryId, "IX_ebay_de_sidewideExCategories_CategoryId");

                entity.Property(e => e.AttributeSetId).HasDefaultValueSql("('0')");

                entity.Property(e => e.CategoryId).HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<EbayDeUpdateTables>(entity =>
            {
                entity.HasKey(e => e.KTable);

                entity.ToTable("ebay_de_update_tables");

                entity.Property(e => e.KTable).HasColumnName("kTable");

                entity.Property(e => e.CTable)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTable");
            });

            modelBuilder.Entity<EbayDeValidationrules>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_validationrules");

                entity.HasIndex(e => e.AttributeId, "IX_ebay_de_validationrules_AttributeId");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_validationrules_AttributeSetId");

                entity.Property(e => e.CSeparator)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cSeparator");

                entity.Property(e => e.FMax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMax");

                entity.Property(e => e.FMin)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMin");

                entity.Property(e => e.Mask)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NLength).HasColumnName("nLength");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Regex)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_value");

                entity.HasIndex(e => e.AttributeId, "IX_ebay_de_value_AttributeId");

                entity.HasIndex(e => e.AttributeSetId, "IX_ebay_de_value_AttributeSetId");

                entity.HasIndex(e => e.ValueId, "IX_ebay_de_value_ValueId");

                entity.HasIndex(e => e.ParentValueId, "IX_ebay_de_value_parentValueId");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ParentValueId).HasColumnName("parentValueId");
            });

            modelBuilder.Entity<EbayDeVersandarten>(entity =>
            {
                entity.HasKey(e => e.KEbayDeVersandarten);

                entity.ToTable("ebay_de_versandarten");

                entity.Property(e => e.KEbayDeVersandarten)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbay_DE_Versandarten");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExpeditedService).HasDefaultValueSql("('0')");

                entity.Property(e => e.InternationalService).HasDefaultValueSql("('0')");

                entity.Property(e => e.ShippingService)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
            });

            modelBuilder.Entity<EbayDeVersandlaender>(entity =>
            {
                entity.HasKey(e => e.KEbayDeVersandlaender);

                entity.ToTable("ebay_de_versandlaender");

                entity.Property(e => e.KEbayDeVersandlaender)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbay_DE_Versandlaender");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeVersions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_versions");

                entity.Property(e => e.GetAttributeCs)
                    .HasColumnName("getAttributeCS")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.GetCategories).HasColumnName("getCategories");

                entity.Property(e => e.GetCategory2Cs).HasColumnName("getCategory2CS");
            });

            modelBuilder.Entity<EbayDeWaehrung>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_de_waehrung");

                entity.Property(e => e.Currency)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeZahlungsmethoden>(entity =>
            {
                entity.HasKey(e => e.KEbayDeZahlungsmethoden);

                entity.ToTable("ebay_de_zahlungsmethoden");

                entity.Property(e => e.KEbayDeZahlungsmethoden)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbay_DE_Zahlungsmethoden");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayText)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentOption)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayDeleteCoPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_delete_co_pos");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<EbayEinstellungen>(entity =>
            {
                entity.HasKey(e => e.KEbayEinstellungen);

                entity.ToTable("ebay_einstellungen");

                entity.Property(e => e.KEbayEinstellungen)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayEinstellungen");

                entity.Property(e => e.CAuftraegeAusgabeweg)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAuftraegeAusgabeweg")
                    .HasDefaultValueSql("('E')")
                    .IsFixedLength(true);

                entity.Property(e => e.NArtnamenutzen).HasColumnName("nArtnamenutzen");

                entity.Property(e => e.NCheckout).HasColumnName("nCheckout");

                entity.Property(e => e.NNichtLaufendeLoeschen).HasColumnName("nNichtLaufendeLoeschen");

                entity.Property(e => e.NUseGalleryPlus).HasColumnName("nUseGalleryPlus");

                entity.Property(e => e.NUsePremium).HasColumnName("nUsePremium");

                entity.Property(e => e.NVean).HasColumnName("nVEAN");

                entity.Property(e => e.NVepid).HasColumnName("nVEPID");

                entity.Property(e => e.NVersandartPraefixVerwenden).HasColumnName("nVersandartPraefixVerwenden");

                entity.Property(e => e.NVhan).HasColumnName("nVHAN");

                entity.Property(e => e.NVisbn).HasColumnName("nVISBN");

                entity.Property(e => e.NVupc).HasColumnName("nVUPC");
            });

            modelBuilder.Entity<EbayGeaenderteLaufendeAngebote>(entity =>
            {
                entity.HasKey(e => e.KItem);

                entity.ToTable("ebay_geaenderte_laufende_angebote");

                entity.Property(e => e.KItem)
                    .ValueGeneratedNever()
                    .HasColumnName("kItem");

                entity.Property(e => e.NChanges).HasColumnName("nChanges");

                entity.Property(e => e.NTryUpload)
                    .HasColumnName("nTryUpload")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<EbayGlobaletexte>(entity =>
            {
                entity.HasKey(e => e.KEbayGlobaleTexte);

                entity.ToTable("ebay_globaletexte");

                entity.HasIndex(e => e.KEbayuser, "IX_ebay_globaletexte_kEbayuser");

                entity.Property(e => e.KEbayGlobaleTexte)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayGlobaleTexte");

                entity.Property(e => e.CAgb)
                    .IsUnicode(false)
                    .HasColumnName("cAGB");

                entity.Property(e => e.CAnzeigen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnzeigen");

                entity.Property(e => e.CBewertung)
                    .IsUnicode(false)
                    .HasColumnName("cBewertung");

                entity.Property(e => e.CImpressum)
                    .IsUnicode(false)
                    .HasColumnName("cImpressum");

                entity.Property(e => e.CLieferzeit)
                    .IsUnicode(false)
                    .HasColumnName("cLieferzeit");

                entity.Property(e => e.CNachDerAuktion)
                    .IsUnicode(false)
                    .HasColumnName("cNachDerAuktion");

                entity.Property(e => e.CUeberUns)
                    .IsUnicode(false)
                    .HasColumnName("cUeberUns");

                entity.Property(e => e.CVersandVerpackung)
                    .IsUnicode(false)
                    .HasColumnName("cVersandVerpackung");

                entity.Property(e => e.CWiderrufsrecht)
                    .IsUnicode(false)
                    .HasColumnName("cWiderrufsrecht");

                entity.Property(e => e.CZahlungshinweis)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungshinweis");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            });

            modelBuilder.Entity<EbayInternationalShippingServiceOption>(entity =>
            {
                entity.HasKey(e => e.KInternationalShippingServiceOption);

                entity.ToTable("ebay_InternationalShippingServiceOption");

                entity.Property(e => e.KInternationalShippingServiceOption).HasColumnName("kInternationalShippingServiceOption");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.ShipToLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingService)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingServiceAdditionalCost).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingServiceCost).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
            });

            modelBuilder.Entity<EbayItem>(entity =>
            {
                entity.HasKey(e => e.KItem);

                entity.ToTable("ebay_item");

                entity.HasIndex(e => e.EndTime, "IX_ebay_item_EndTime");

                entity.HasIndex(e => e.ItemId, "IX_ebay_item_ItemID");

                entity.HasIndex(e => e.ListingType, "IX_ebay_item_ListingType");

                entity.HasIndex(e => e.Sent, "IX_ebay_item_Sent");

                entity.HasIndex(e => new { e.SiteId, e.Status }, "IX_ebay_item_SiteID_Status");

                entity.HasIndex(e => e.Status, "IX_ebay_item_Status");

                entity.HasIndex(e => e.Type, "IX_ebay_item_Type");

                entity.HasIndex(e => e.CRelistedItemId, "IX_ebay_item_cRelistedItemID");

                entity.HasIndex(e => e.HtmlTemplate, "IX_ebay_item_htmlTemplate");

                entity.HasIndex(e => e.KArtikel, "IX_ebay_item_kArtikel_INCL");

                entity.HasIndex(e => new { e.KArtikel, e.Status, e.KItem }, "IX_ebay_item_kArtikel_Status_kItem_INCL");

                entity.HasIndex(e => e.KKategorie, "IX_ebay_item_kKategorie");

                entity.HasIndex(e => e.KPlanung, "IX_ebay_item_kPlanung");

                entity.HasIndex(e => e.KTemplate, "IX_ebay_item_kTemplate");

                entity.HasIndex(e => new { e.KEbayuser, e.KMessage }, "IX_kEbayuser_kMessage");

                entity.Property(e => e.KItem)
                    .ValueGeneratedNever()
                    .HasColumnName("kItem");

                entity.Property(e => e.ApplicationData)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.ApplyShippingDiscount).HasDefaultValueSql("('0')");

                entity.Property(e => e.AutoPay).HasDefaultValueSql("('0')");

                entity.Property(e => e.BBestandReserviert).HasColumnName("bBestandReserviert");

                entity.Property(e => e.BIstVerkaufsaktion).HasColumnName("bIstVerkaufsaktion");

                entity.Property(e => e.BestOfferAutoAcceptPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestOfferEnabled).HasDefaultValueSql("('0')");

                entity.Property(e => e.BestOfferMinPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BuyItNowPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BuyerProtection)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEAN");

                entity.Property(e => e.CEbayUserProfileIdPayment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserProfileIdPayment");

                entity.Property(e => e.CEbayUserProfileIdReturn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserProfileIdReturn");

                entity.Property(e => e.CEbayUserProfileIdShipping)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserProfileIdShipping");

                entity.Property(e => e.CInternationaleRueckgabeMoeglich)
                    .HasMaxLength(50)
                    .HasColumnName("cInternationaleRueckgabeMoeglich");

                entity.Property(e => e.CInternationaleRueckgabefrist)
                    .HasMaxLength(20)
                    .HasColumnName("cInternationaleRueckgabefrist");

                entity.Property(e => e.CInternationalerVersandkostenTraeger)
                    .HasMaxLength(50)
                    .HasColumnName("cInternationalerVersandkostenTraeger");

                entity.Property(e => e.CPaymentInstructions)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentInstructions");

                entity.Property(e => e.CRelistId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRelistID");

                entity.Property(e => e.CRelistedItemId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cRelistedItemID");

                entity.Property(e => e.CRueckgabeMoeglich)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRueckgabeMoeglich")
                    .HasDefaultValueSql("('ReturnsNotAccepted')");

                entity.Property(e => e.CRueckgabefrist)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRueckgabefrist");

                entity.Property(e => e.CStreichPreisTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreichPreisTyp");

                entity.Property(e => e.CVersandkostenTraeger)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandkostenTraeger");

                entity.Property(e => e.ConditionDescription)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ConditionId).HasColumnName("ConditionID");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DZuEbayGesendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dZuEbayGesendet");

                entity.Property(e => e.DiscountProfileId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DiscountProfileID");

                entity.Property(e => e.DiscountProfileIdint)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DiscountProfileIDInt");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FStreichPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fStreichPreis");

                entity.Property(e => e.GalleryType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GalleryUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("GalleryURL");

                entity.Property(e => e.GiftServices)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HitCounter)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.HtmlTemplate).HasColumnName("htmlTemplate");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KMessage).HasColumnName("kMessage");

                entity.Property(e => e.KPlanung).HasColumnName("kPlanung");

                entity.Property(e => e.KPlanungsItem).HasColumnName("kPlanungsItem");

                entity.Property(e => e.KTemplate).HasColumnName("kTemplate");

                entity.Property(e => e.ListingDuration)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ListingEnhancement)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ListingType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ListingUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ListingURL");

                entity.Property(e => e.Location)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NAutomatischEinstellen).HasColumnName("nAutomatischEinstellen");

                entity.Property(e => e.NEbayPlus).HasColumnName("nEbayPlus");

                entity.Property(e => e.NFehler).HasColumnName("nFehler");

                entity.Property(e => e.NLaufend).HasColumnName("nLaufend");

                entity.Property(e => e.NLeecher).HasColumnName("nLeecher");

                entity.Property(e => e.NMinQuantity)
                    .HasColumnName("nMinQuantity")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NNurAnGewerbliche).HasColumnName("nNurAnGewerbliche");

                entity.Property(e => e.NPickup)
                    .HasColumnName("nPickup")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NPremium)
                    .HasColumnName("nPremium")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NProduktKennzeichnung)
                    .HasColumnName("nProduktKennzeichnung")
                    .HasDefaultValueSql("((15))");

                entity.Property(e => e.NReturnPolicy).HasColumnName("nReturnPolicy");

                entity.Property(e => e.NSchwelleAutomatischEinstellen).HasColumnName("nSchwelleAutomatischEinstellen");

                entity.Property(e => e.NSendVat)
                    .HasColumnName("nSendVAT")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NUseHomeShippingCostTable).HasColumnName("nUseHomeShippingCostTable");

                entity.Property(e => e.NUseInternationalShippingCostTable).HasColumnName("nUseInternationalShippingCostTable");

                entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");

                entity.Property(e => e.NVksonderregel).HasColumnName("nVKSonderregel");

                entity.Property(e => e.NVksonderregelInt).HasColumnName("nVKSonderregelInt");

                entity.Property(e => e.PayPalEmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentMethods)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PhotoDisplay)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PictureUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("PictureURL");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReservePrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ScheduleDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ScheduleServerSide)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.ScheduleTime)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Sent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ShipToLocations)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingTerms)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId)
                    .HasColumnName("SiteID")
                    .HasDefaultValueSql("((77))");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.SsBidCount)
                    .HasColumnName("SS_BidCount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsBidderCount).HasColumnName("SS_BidderCount");

                entity.Property(e => e.SsCurrentPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("SS_CurrentPrice");

                entity.Property(e => e.SsHighBidderUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SS_HighBidderUserId");

                entity.Property(e => e.StartPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.SubTitle)
                    .HasMaxLength(55)
                    .IsUnicode(false);

                entity.Property(e => e.Templatename)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.Totalfees).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Type)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Uuid)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("UUID");

                entity.Property(e => e.Vatpercent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATPercent");
            });

            modelBuilder.Entity<EbayItem2kombi>(entity =>
            {
                entity.HasKey(e => new { e.KItem, e.KEigenschaftKombi });

                entity.ToTable("ebay_item2kombi");

                entity.HasIndex(e => e.KEigenschaftKombi, "IX_ebay_item2kombi_kEigenschaftKombi_INCL");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEAN");

                entity.Property(e => e.CStreichPreisTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreichPreisTyp");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMaxAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMaxAnzahl");

                entity.Property(e => e.FMinAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMinAnzahl")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.FStreichPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fStreichPreis");
            });

            modelBuilder.Entity<EbayItem2xsell>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_item2xsell");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");

                entity.Property(e => e.KXsell).HasColumnName("kXSell");
            });

            modelBuilder.Entity<EbayItemAdderror>(entity =>
            {
                entity.HasKey(e => e.KItemAddError);

                entity.ToTable("ebay_item_adderror");

                entity.HasIndex(e => new { e.KEbayuser, e.KItemAddError }, "IX_kEbayuser_kItemAddError");

                entity.HasIndex(e => e.KItem, "IX_kItem");

                entity.Property(e => e.KItemAddError).HasColumnName("kItemAddError");

                entity.Property(e => e.CAbhilfe)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cAbhilfe");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.EpidSuggestion)
                    .IsUnicode(false)
                    .HasColumnName("epidSuggestion");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.LongMessage).IsUnicode(false);

                entity.Property(e => e.ShortMessage).IsUnicode(false);
            });

            modelBuilder.Entity<EbayItemDuplicateLog>(entity =>
            {
                entity.HasKey(e => e.KLog)
                    .HasName("PK_dbo_ebay_item_duplicate_log");

                entity.ToTable("ebay_item_duplicate_log");

                entity.Property(e => e.KLog).HasColumnName("kLog");

                entity.Property(e => e.CAnderesAngebotItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnderesAngebotItemID");

                entity.Property(e => e.CAngebotItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAngebotItemID");

                entity.Property(e => e.CVorlageListingDuration)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVorlageListingDuration");

                entity.Property(e => e.DAnderesAngebotEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnderesAngebotEndTime");

                entity.Property(e => e.DAnderesAngebotStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnderesAngebotStartTime");

                entity.Property(e => e.DAngebotEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dAngebotEndTime");

                entity.Property(e => e.DAngebotStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dAngebotStartTime");

                entity.Property(e => e.DErstelltUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelltUtc");

                entity.Property(e => e.KAnderesAngebotItem).HasColumnName("kAnderesAngebotItem");

                entity.Property(e => e.KAngebotItem).HasColumnName("kAngebotItem");

                entity.Property(e => e.KVorlageItem).HasColumnName("kVorlageItem");

                entity.Property(e => e.NAnderesAngebotStatus).HasColumnName("nAnderesAngebotStatus");

                entity.Property(e => e.NAngebotStatus).HasColumnName("nAngebotStatus");

                entity.Property(e => e.NVorlageAutomatischEinstellen).HasColumnName("nVorlageAutomatischEinstellen");
            });

            modelBuilder.Entity<EbayItemReviseerror>(entity =>
            {
                entity.HasKey(e => e.KItemReviseError);

                entity.ToTable("ebay_item_reviseerror");

                entity.HasIndex(e => new { e.KEbayuser, e.KItemReviseError }, "IX_kEbayuser_kItemReviseError");

                entity.HasIndex(e => e.KItem, "IX_kItem");

                entity.Property(e => e.KItemReviseError).HasColumnName("kItemReviseError");

                entity.Property(e => e.CAbhilfe)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cAbhilfe");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.EpidSuggestion)
                    .IsUnicode(false)
                    .HasColumnName("epidSuggestion");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.LongMessage).IsUnicode(false);

                entity.Property(e => e.ShortMessage).IsUnicode(false);
            });

            modelBuilder.Entity<EbayItemcompBike>(entity =>
            {
                entity.HasKey(e => e.KEbayItemcompBike);

                entity.ToTable("ebay_itemcomp_bike");

                entity.Property(e => e.KEbayItemcompBike).HasColumnName("kEbay_itemcomp_bike");

                entity.Property(e => e.CBaujahr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBaujahr");

                entity.Property(e => e.CCcm)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCcm");

                entity.Property(e => e.CCompatibilityNote)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cCompatibilityNote");

                entity.Property(e => e.CMarke)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMarke");

                entity.Property(e => e.CModell)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModell");

                entity.Property(e => e.CStrassenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrassenname");

                entity.Property(e => e.CTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.CUntermodell)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUntermodell");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.NEpid).HasColumnName("nEpid");
            });

            modelBuilder.Entity<EbayItemcompatibility>(entity =>
            {
                entity.HasKey(e => e.KItemCompatibility);

                entity.ToTable("ebay_itemcompatibility");

                entity.HasIndex(e => e.KItem, "IX_ebay_itemcompatibility_kItem");

                entity.Property(e => e.KItemCompatibility).HasColumnName("kItemCompatibility");

                entity.Property(e => e.CBaujahr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBaujahr");

                entity.Property(e => e.CCompatibilityNote)
                    .HasMaxLength(505)
                    .IsUnicode(false)
                    .HasColumnName("cCompatibilityNote");

                entity.Property(e => e.CHsntsn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHSNTSN");

                entity.Property(e => e.CMarke)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMarke");

                entity.Property(e => e.CModell)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModell");

                entity.Property(e => e.CMotor)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMotor");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.KType).HasColumnName("kType");
            });

            modelBuilder.Entity<EbayLastSynch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_last_synch");

                entity.Property(e => e.Info)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("info");
            });

            modelBuilder.Entity<EbayLeecherVariationMapping>(entity =>
            {
                entity.HasKey(e => e.KEbayLeecherVariationMapping)
                    .HasName("PK_tEbayLeecherVariationMapping");

                entity.ToTable("ebay_Leecher_VariationMapping");

                entity.Property(e => e.KEbayLeecherVariationMapping).HasColumnName("kEbayLeecherVariationMapping");

                entity.Property(e => e.CIso1)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cIso1");

                entity.Property(e => e.CIso2)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cIso2");

                entity.Property(e => e.CValue1)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cValue1");

                entity.Property(e => e.CValue2)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cValue2");
            });

            modelBuilder.Entity<EbayLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_log");

                entity.HasIndex(e => e.DDatum, "IX_ebay_log_dDatum");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DDatum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dDatum");

                entity.Property(e => e.KItem).HasColumnName("kItem");
            });

            modelBuilder.Entity<EbayLogbuch>(entity =>
            {
                entity.HasKey(e => e.KEbayLogbuch);

                entity.ToTable("ebay_logbuch");

                entity.HasIndex(e => e.DZeit, "IX_dZeit");

                entity.Property(e => e.KEbayLogbuch).HasColumnName("kEbayLogbuch");

                entity.Property(e => e.CBetreff)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.CLog)
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.DZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeit");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.NKategorie).HasColumnName("nKategorie");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<EbayMapitem>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("ebay_mapitem");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.BinJsondata).HasColumnName("binJSONData");

                entity.Property(e => e.CJsondata)
                    .IsUnicode(false)
                    .HasColumnName("cJSONData");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.KEbayMapitemSuchString).HasColumnName("kEbay_mapitemSuchString");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.ListingType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.Title)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayMapitemArtikelZuordnungen>(entity =>
            {
                entity.HasKey(e => e.ItemId);

                entity.ToTable("ebay_mapitemArtikelZuordnungen");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<EbayMapitemSuchStrings>(entity =>
            {
                entity.HasKey(e => e.KEbayMapitemSuchString);

                entity.ToTable("ebay_mapitemSuchStrings");

                entity.Property(e => e.KEbayMapitemSuchString).HasColumnName("kEbay_mapitemSuchString");

                entity.Property(e => e.CSuchStringAnfang)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cSuchStringAnfang");

                entity.Property(e => e.CSuchStringEnde)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cSuchStringEnde");

                entity.Property(e => e.NSource).HasColumnName("nSource");
            });

            modelBuilder.Entity<EbayPlanung>(entity =>
            {
                entity.HasKey(e => e.KPlanung);

                entity.ToTable("ebay_planung");

                entity.HasIndex(e => e.KItem, "IX_ebay_planung_kItem");

                entity.Property(e => e.KPlanung)
                    .ValueGeneratedNever()
                    .HasColumnName("kPlanung");

                entity.Property(e => e.CAlleXuhrzeit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cAlleXuhrzeit");

                entity.Property(e => e.CDi)
                    .HasColumnName("cDi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CDo)
                    .HasColumnName("cDo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CFr)
                    .HasColumnName("cFr")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CMi)
                    .HasColumnName("cMi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CMo)
                    .HasColumnName("cMo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CPlanungsname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPlanungsname");

                entity.Property(e => e.CSa)
                    .HasColumnName("cSa")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CSo)
                    .HasColumnName("cSo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.CZeit1)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cZeit1");

                entity.Property(e => e.CZeit2)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cZeit2");

                entity.Property(e => e.CZeit3)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cZeit3");

                entity.Property(e => e.CZeit4)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cZeit4");

                entity.Property(e => e.CZeit5)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cZeit5");

                entity.Property(e => e.CZeit6)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cZeit6");

                entity.Property(e => e.DPlanungsbeginn)
                    .HasColumnType("datetime")
                    .HasColumnName("dPlanungsbeginn");

                entity.Property(e => e.DPlanungsende)
                    .HasColumnType("datetime")
                    .HasColumnName("dPlanungsende");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.NAlleXtage).HasColumnName("nAlleXtage");
            });

            modelBuilder.Entity<EbayQueueOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_queue_out");

                entity.Property(e => e.CCarrierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCarrierCode");

                entity.Property(e => e.CIdentcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentcode");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<EbayShippingCarrierCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_ShippingCarrierCode");

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayShippingServiceOptions>(entity =>
            {
                entity.HasKey(e => e.KShippingServiceOptions);

                entity.ToTable("ebay_ShippingServiceOptions");

                entity.Property(e => e.KShippingServiceOptions).HasColumnName("kShippingServiceOptions");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.ShippingService)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingServiceAdditionalCost).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingServiceCost).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");
            });

            modelBuilder.Entity<EbayShippingprofiles>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_shippingprofiles");

                entity.Property(e => e.CProfilType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cProfilType")
                    .IsFixedLength(true);

                entity.Property(e => e.DiscountProfileId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("DiscountProfileID");

                entity.Property(e => e.DiscountProfileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KEbayBenutzer).HasColumnName("kEbayBenutzer");

                entity.Property(e => e.SiteId)
                    .HasColumnName("SiteID")
                    .HasDefaultValueSql("((77))");
            });

            modelBuilder.Entity<EbayShopCategory>(entity =>
            {
                entity.HasKey(e => e.KStoreCategory);

                entity.ToTable("ebay_shop_category");

                entity.Property(e => e.KStoreCategory)
                    .ValueGeneratedNever()
                    .HasColumnName("kStoreCategory");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KStore).HasColumnName("kStore");

                entity.Property(e => e.NOrder).HasColumnName("nOrder");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbaySpecific>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_specific");

                entity.HasIndex(e => e.KItem, "IX_ebay_specific_kItem");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NCustom).HasColumnName("nCustom");
            });

            modelBuilder.Entity<EbaySynch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_synch");

                entity.Property(e => e.Ip)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("ip");
            });

            modelBuilder.Entity<EbaySynchartikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_synchartikel");

                entity.Property(e => e.DSent)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dSent");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NDay).HasColumnName("nDay");
            });

            modelBuilder.Entity<EbayTransaction>(entity =>
            {
                entity.HasKey(e => e.KTransaction);

                entity.ToTable("ebay_transaction");

                entity.HasIndex(e => new { e.ItemId, e.TransactionId }, "IX_ebay_transaction_ItemID_TransactionID");

                entity.HasIndex(e => e.KBestellung, "IX_ebay_transaction_kBestellung");

                entity.HasIndex(e => new { e.TransactionId, e.ItemId }, "UC_ebay_transaction_TransactionID_ItemID")
                    .IsUnique();

                entity.Property(e => e.KTransaction).HasColumnName("kTransaction");

                entity.Property(e => e.AdjustmentAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.AmountPaid).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestOfferSale).HasDefaultValueSql("('0')");

                entity.Property(e => e.BuyerPaidStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CDispute)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDispute");

                entity.Property(e => e.CDisputeInfo)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cDisputeInfo");

                entity.Property(e => e.ConvertedAdjustmentAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ConvertedAmountPaid).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ConvertedTransactionPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DZahlungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsdatum");

                entity.Property(e => e.FinalValueFee).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.FlCommentText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FL_CommentText");

                entity.Property(e => e.FlCommentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FL_CommentType");

                entity.Property(e => e.FlTargetUser)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FL_TargetUser");

                entity.Property(e => e.FrCommentText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FR_CommentText");

                entity.Property(e => e.FrCommentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FR_CommentType");

                entity.Property(e => e.FrTargetUser)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("FR_TargetUser");

                entity.Property(e => e.ItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.KAlien)
                    .HasColumnName("kAlien")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KBuyer).HasColumnName("kBuyer");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.NCheckout)
                    .HasColumnName("nCheckout")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NKonflikt).HasColumnName("nKonflikt");

                entity.Property(e => e.NZuletztAktualisiert).HasColumnName("nZuletztAktualisiert");

                entity.Property(e => e.PaidTime).HasColumnType("datetime");

                entity.Property(e => e.ShippedTime).HasColumnType("datetime");

                entity.Property(e => e.SiteId)
                    .HasColumnName("SiteID")
                    .HasDefaultValueSql("((77))");

                entity.Property(e => e.Sku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.SssExpeditedService)
                    .HasColumnName("SSS_ExpeditedService")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.SssShippingInsuranceCost)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("SSS_ShippingInsuranceCost");

                entity.Property(e => e.SssShippingService)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SSS_ShippingService");

                entity.Property(e => e.SssShippingServiceAdditionalCost)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("SSS_ShippingServiceAdditionalCost");

                entity.Property(e => e.SssShippingServiceCost)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("SSS_ShippingServiceCost");

                entity.Property(e => e.Status).HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusBuyerSelectedShipping)
                    .HasColumnName("Status_BuyerSelectedShipping")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.StatusCheckoutStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Status_CheckoutStatus");

                entity.Property(e => e.StatusCompleteStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Status_CompleteStatus");

                entity.Property(e => e.StatusLastTimeModified)
                    .HasColumnType("datetime")
                    .HasColumnName("Status_LastTimeModified");

                entity.Property(e => e.StatusPaymentMethodUsed)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Status_PaymentMethodUsed");

                entity.Property(e => e.StautsEBayPaymentStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Stauts_eBayPaymentStatus");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.TransactionPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.VariationTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Vat)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VAT");
            });

            modelBuilder.Entity<EbayTransactionDeleted>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_transaction_deleted");

                entity.HasIndex(e => new { e.ItemId, e.TransactionId }, "UC_ebay_transaction_deleted_ItemID_TransactionID")
                    .IsUnique();

                entity.Property(e => e.DeletedAt).HasColumnType("datetime");

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ItemID");

                entity.Property(e => e.NCheckout).HasColumnName("nCheckout");

                entity.Property(e => e.TransactionId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");
            });

            modelBuilder.Entity<EbayUser>(entity =>
            {
                entity.HasKey(e => e.KEbayuser);

                entity.ToTable("ebay_user");

                entity.HasIndex(e => e.SiteId, "IX_ebay_user_SiteId");

                entity.Property(e => e.KEbayuser)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayuser");

                entity.Property(e => e.CEbayUsername)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUsername");

                entity.Property(e => e.DLetzerEbayAbgleich)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzerEbayAbgleich");

                entity.Property(e => e.DLetzterBestellabgleich)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzterBestellabgleich");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.NEbayPayment).HasColumnName("nEbayPayment");

                entity.Property(e => e.NLagerbestaendeAendern)
                    .HasColumnName("nLagerbestaendeAendern")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NOutOfStockControl).HasColumnName("nOutOfStockControl");

                entity.Property(e => e.NSonderRegel).HasColumnName("nSonderRegel");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Passwort)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Umgebung)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayUsermessagequeue>(entity =>
            {
                entity.HasKey(e => e.KEbayDataUserOutputQueue);

                entity.ToTable("ebay_usermessagequeue");

                entity.Property(e => e.KEbayDataUserOutputQueue)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayDataUserOutputQueue");

                entity.Property(e => e.CMessage)
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.CMessageType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMessageType");

                entity.Property(e => e.DErstellt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NDel)
                    .HasColumnName("nDel")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<EbayUserprofile>(entity =>
            {
                entity.HasKey(e => e.KUserProfile);

                entity.ToTable("ebay_userprofile");

                entity.HasIndex(e => e.KEbayuser, "IX_kEbayuser");

                entity.Property(e => e.KUserProfile).HasColumnName("kUserProfile");

                entity.Property(e => e.CategoryName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.ProfileDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ProfileID");

                entity.Property(e => e.ProfileName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ProfileType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");
            });

            modelBuilder.Entity<EbayUsersites>(entity =>
            {
                entity.HasKey(e => new { e.KEbayuser, e.SiteId });

                entity.ToTable("ebay_usersites");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            });

            modelBuilder.Entity<EbayUsertexte>(entity =>
            {
                entity.HasKey(e => e.KEbayUserTexte);

                entity.ToTable("ebay_usertexte");

                entity.Property(e => e.KEbayUserTexte)
                    .ValueGeneratedNever()
                    .HasColumnName("kEbayUserTexte");

                entity.Property(e => e.CTagName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTagName");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");
            });

            modelBuilder.Entity<EbayVersandOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_versand_out");

                entity.Property(e => e.CInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInfo");

                entity.Property(e => e.CLogistiker)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLogistiker");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingID");

                entity.Property(e => e.CUrl)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cURL");

                entity.Property(e => e.DDatum)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("dDatum");

                entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");
            });

            modelBuilder.Entity<EbayVersandZahlung>(entity =>
            {
                entity.HasKey(e => e.KEbayVersandZahlung)
                    .HasName("PK_dbo_ebay_versand_zahlung");

                entity.ToTable("ebay_versand_zahlung");

                entity.HasIndex(e => new { e.KEbayUser, e.COrderId, e.CItemId, e.CTransactionId }, "UQ_ebay_versand_zahlung_kEbayUser_cOrderId_cItemId_cTransactionId")
                    .IsUnique();

                entity.Property(e => e.KEbayVersandZahlung).HasColumnName("kEbayVersandZahlung");

                entity.Property(e => e.CItemId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cItemId");

                entity.Property(e => e.COrderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.CPaymentErrorMessage).HasColumnName("cPaymentErrorMessage");

                entity.Property(e => e.CShippingErrorMessage).HasColumnName("cShippingErrorMessage");

                entity.Property(e => e.CTransactionId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cTransactionId");

                entity.Property(e => e.DCreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dUpdatedAt");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NPaymentSuccessful).HasColumnName("nPaymentSuccessful");

                entity.Property(e => e.NShippingSuccessful).HasColumnName("nShippingSuccessful");
            });

            modelBuilder.Entity<EbayVwEignertext>(entity =>
            {
                entity.HasKey(e => e.KEbayVwEignertext);

                entity.ToTable("ebay_vw_eignertext");

                entity.HasIndex(e => e.CName, "UQ_ebay_vw_eignertext_cName")
                    .IsUnique();

                entity.Property(e => e.KEbayVwEignertext).HasColumnName("kEbay_vw_eignertext");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<EbayVwHtmltemplate>(entity =>
            {
                entity.HasKey(e => e.KEbayHtmlTemplate);

                entity.ToTable("ebay_vw_htmltemplate");

                entity.Property(e => e.KEbayHtmlTemplate).HasColumnName("kEbayHtmlTemplate");

                entity.Property(e => e.CHtmlTemplateDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHtmlTemplateDescription");

                entity.Property(e => e.CHtmlTemplateName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHtmlTemplateName");

                entity.Property(e => e.DCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreated");

                entity.Property(e => e.DUploaded)
                    .HasColumnType("datetime")
                    .HasColumnName("dUploaded");

                entity.Property(e => e.KEbayHtmlTemplateData).HasColumnName("kEbayHtmlTemplateData");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NEbayHtmlTemplateParent).HasColumnName("nEbayHtmlTemplateParent");

                entity.Property(e => e.NIsDefault).HasColumnName("nIsDefault");
            });

            modelBuilder.Entity<EbayVwHtmltemplatedata>(entity =>
            {
                entity.HasKey(e => e.KEbayHtmlTemplateData);

                entity.ToTable("ebay_vw_htmltemplatedata");

                entity.Property(e => e.KEbayHtmlTemplateData).HasColumnName("kEbayHtmlTemplateData");

                entity.Property(e => e.BData)
                    .IsRequired()
                    .HasColumnName("bData");

                entity.Property(e => e.CTemplate).HasColumnName("cTemplate");
            });

            modelBuilder.Entity<EbayVwHtmltemplatepreview>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_vw_htmltemplatepreview");

                entity.Property(e => e.KHtmlTemplate).HasColumnName("kHtmlTemplate");

                entity.Property(e => e.Pict)
                    .HasColumnType("image")
                    .HasColumnName("pict");

                entity.Property(e => e.Size).HasColumnName("size");
            });

            modelBuilder.Entity<EbayVwHtmltemplaterendered>(entity =>
            {
                entity.HasKey(e => e.KEbayVwHtmltemplaterendered);

                entity.ToTable("ebay_vw_htmltemplaterendered");

                entity.HasIndex(e => e.KEbayItem, "IX_ebay_vw_htmltemplaterendered_kEbay_item");

                entity.Property(e => e.KEbayVwHtmltemplaterendered).HasColumnName("kEbay_vw_htmltemplaterendered");

                entity.Property(e => e.CTemplate).HasColumnName("cTemplate");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbay_item");
            });

            modelBuilder.Entity<EbayVwHtmltemplatetag>(entity =>
            {
                entity.HasKey(e => e.KEbayHtmlTemplateTag);

                entity.ToTable("ebay_vw_htmltemplatetag");

                entity.Property(e => e.KEbayHtmlTemplateTag).HasColumnName("kEbayHtmlTemplateTag");

                entity.Property(e => e.CTagExtension)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTagExtension");

                entity.Property(e => e.CTagName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTagName");

                entity.Property(e => e.CTagType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTagType");

                entity.Property(e => e.KEbayHtmlTemplate).HasColumnName("kEbayHtmlTemplate");
            });

            modelBuilder.Entity<EbayXxBearbeitungszeiten>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CDispatchTime });

                entity.ToTable("ebay_xx_bearbeitungszeiten");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.CDispatchTime)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cDispatchTime");
            });

            modelBuilder.Entity<EbayXxCategories>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CategoryId });

                entity.ToTable("ebay_xx_categories");

                entity.HasIndex(e => new { e.SiteId, e.CategoryParentId }, "IX_ebay_xx_categories_SiteID_CategoryParentId");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompatibleVehicleType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ConditionValues)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayXxCondition>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.Id });

                entity.ToTable("ebay_xx_condition");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayXxIs>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CategoryId, e.KName });

                entity.ToTable("ebay_xx_is");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.KName).HasColumnName("kName");

                entity.Property(e => e.CHelpText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHelpText");

                entity.Property(e => e.CHelpUrl)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHelpURL");

                entity.Property(e => e.IsRecommended).HasColumnName("isRecommended");

                entity.Property(e => e.NMaxValues).HasColumnName("nMaxValues");

                entity.Property(e => e.NMinValues).HasColumnName("nMinValues");

                entity.Property(e => e.NSelectionMode).HasColumnName("nSelectionMode");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<EbayXxIsglobalname>(entity =>
            {
                entity.HasKey(e => e.KName);

                entity.ToTable("ebay_xx_isglobalname");

                entity.Property(e => e.KName)
                    .ValueGeneratedNever()
                    .HasColumnName("kName");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<EbayXxIsglobalvalue>(entity =>
            {
                entity.HasKey(e => e.KValue);

                entity.ToTable("ebay_xx_isglobalvalue");

                entity.Property(e => e.KValue)
                    .ValueGeneratedNever()
                    .HasColumnName("kValue");

                entity.Property(e => e.CValue)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");
            });

            modelBuilder.Entity<EbayXxIsrelation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_xx_isrelation");

                entity.HasIndex(e => new { e.SiteId, e.CategoryId }, "IX_ebay_xx_isrelation_SiteID_CategoryId");

                entity.Property(e => e.KName).HasColumnName("kName");

                entity.Property(e => e.KNameParent).HasColumnName("kNameParent");

                entity.Property(e => e.KValue).HasColumnName("kValue");

                entity.Property(e => e.KValueParent).HasColumnName("kValueParent");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");
            });

            modelBuilder.Entity<EbayXxIsvalue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_xx_isvalue");

                entity.HasIndex(e => new { e.SiteId, e.CategoryId }, "IX_ebay_xx_isvalue_SiteID_CategoryId");

                entity.Property(e => e.KName).HasColumnName("kName");

                entity.Property(e => e.KValue).HasColumnName("kValue");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");
            });

            modelBuilder.Entity<EbayXxLaufzeiten>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CType, e.CDuration });

                entity.ToTable("ebay_xx_laufzeiten");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.CType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cType");

                entity.Property(e => e.CDuration)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cDuration");
            });

            modelBuilder.Entity<EbayXxRueckgabe>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.CType, e.COption });

                entity.ToTable("ebay_xx_rueckgabe");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.CType)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cType");

                entity.Property(e => e.COption)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOption");

                entity.Property(e => e.CDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDescription");
            });

            modelBuilder.Entity<EbayXxSites>(entity =>
            {
                entity.HasKey(e => e.SiteId);

                entity.ToTable("ebay_xx_sites");

                entity.Property(e => e.SiteId)
                    .ValueGeneratedNever()
                    .HasColumnName("SiteID");

                entity.Property(e => e.CAbbreviation)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cAbbreviation");

                entity.Property(e => e.CLandIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSiteCodeType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cSiteCodeType");

                entity.Property(e => e.CSprachIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cSprachISO");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DLastUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastUpdate");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.NVersion).HasColumnName("nVersion");

                entity.Property(e => e.Www)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("www")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<EbayXxVersandarten>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ShippingServiceId });

                entity.ToTable("ebay_xx_versandarten");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.ShippingServiceId).HasColumnName("ShippingServiceID");

                entity.Property(e => e.CDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDescription");

                entity.Property(e => e.MappedToShippingServiceId).HasColumnName("MappedToShippingServiceID");

                entity.Property(e => e.ShippingService)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayXxVersandlaender>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.ShippingLocation });

                entity.ToTable("ebay_xx_versandlaender");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.ShippingLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDescription");
            });

            modelBuilder.Entity<EbayXxZahlungsmethoden>(entity =>
            {
                entity.HasKey(e => new { e.SiteId, e.PaymentOption });

                entity.ToTable("ebay_xx_zahlungsmethoden");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.PaymentOption)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<EbayZahlungOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ebay_zahlung_out");

                entity.Property(e => e.DDatum)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");
            });

            modelBuilder.Entity<FulfilmentOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FulfilmentOrder", "Report");

                entity.Property(e => e.ApiShippingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Übertragung zum Fulfiller");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum des Fulfillmentauftrags");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währung");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.DeliveryNoteId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Nummer des Lieferscheins");

                entity.Property(e => e.DeliveryNoteInternalId).HasComment("Interne ID des Lieferscheins");

                entity.Property(e => e.DeliveryProperty)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Lieferpriorität des Fulfillmentauftrags");

                entity.Property(e => e.FaxingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum des Faxversands");

                entity.Property(e => e.InProcessDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum an dem der Fulfillmentauftrag in Bearbeitung ging");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Fulfillmentauftrags");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Maildatum des Fulfillmentauftrags");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(47)
                    .IsUnicode(false)
                    .HasComment("Auftrags-ID des Fulfillmentauftragvorgangs");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Druckdatum des Fulfillmentauftrags");

                entity.Property(e => e.SalesOrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Nummer der Bestellung");

                entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID der Bestellung");

                entity.Property(e => e.SalesOrderText)
                    .IsUnicode(false)
                    .HasComment("Auftragsdrucktext");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasComment("Status des Fulfillmentauftrags");

                entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");

                entity.Property(e => e.WarehouseInternalId).HasComment("Interne ID des Warenlagers");
            });

            modelBuilder.Entity<FulfilmentOrderPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FulfilmentOrderPosition", "Report");

                entity.Property(e => e.DeliveryNotePositionInternalId).HasComment("Interne ID der Lieferscheinposition");

                entity.Property(e => e.FulfilmentOrderInternalId).HasComment("Interne ID der Fulfillmentauftragspositionen");

                entity.Property(e => e.IndividualWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gewicht des Artikels");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Artikels");

                entity.Property(e => e.ItemDescriptionDetailed)
                    .IsUnicode(false)
                    .HasComment("Lange Artikelbeschreibung");

                entity.Property(e => e.ItemDescriptionShort)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasComment("Kurze Artikelbeschreibung");

                entity.Property(e => e.ItemGiftText)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasComment("Geschenktext für den Artikel");

                entity.Property(e => e.ItemNote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis zum Artikel in der Position");

                entity.Property(e => e.LanguageInternalId).HasComment("Interne ID zur verwendeten Sprache");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Drucktext zur Fulfillmentauftragsposition");

                entity.Property(e => e.Note)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("Hinweis der Lieferscheinposition zur Fulfillmentauftragsposition");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl pro Position");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Artikelnummer des Artikels auf der Position");

                entity.Property(e => e.Sorting).HasComment("Sortierung der Fulfillmentauftragspositionen");

                entity.Property(e => e.Status).HasComment("Status der Fulfillmentauftragsposition");

                entity.Property(e => e.TotalWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gewicht der Menge in der Position");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Einheit des Artikels");
            });

            modelBuilder.Entity<FulfilmentOrderShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FulfilmentOrderShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(126)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(126)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InventoryDifferenceList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InventoryDifferenceList", "Report");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.QuantityDifference).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.TotalPurchasePriceNet).HasColumnType("decimal(25, 13)");
            });

            modelBuilder.Entity<InventoryDifferenceListPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InventoryDifferenceListPosition", "Report");

                entity.Property(e => e.Asin)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.FromDate).HasColumnType("datetime");

                entity.Property(e => e.IsSleditem).HasColumnName("IsSLEDItem");

                entity.Property(e => e.ItemBarCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ItemDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PurchasePriceNetPerSalesUnit).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.Quantity).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.ToDate).HasColumnType("datetime");

                entity.Property(e => e.TotalPurchasePriceNet).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Invoice", "Report");

                entity.Property(e => e.CashDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Skonto der Rechnung");

                entity.Property(e => e.CashDiscountValidity).HasComment("Skontozeitraum der Rechnung");

                entity.Property(e => e.Comment)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasComment("Bemerkung zur Rechnung");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma in der Rechnung");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Landes der Rechnung");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum der Rechnung");

                entity.Property(e => e.CurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung in die angegeben Währung");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währung");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.ExemptFromVat)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("ExemptFromVAT")
                    .HasComment("Art der Steuerbefreiung in der Rechnung");

                entity.Property(e => e.FinancingCosts)
                    .HasColumnType("numeric(25, 13)")
                    .HasComment("Finanzierungskosten");

                entity.Property(e => e.HasInvoiceAsPdf)
                    .HasColumnName("HasInvoiceAsPDF")
                    .HasComment("Rechnung als PDF vorhanden");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnung");

                entity.Property(e => e.InvoiceData).HasComment("Angehängte Dokumente der Rechnung");

                entity.Property(e => e.InvoiceNote)
                    .IsUnicode(false)
                    .HasComment("Hinweis in der Rechnung");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer der Rechnung");

                entity.Property(e => e.InvoicePrintingText)
                    .IsUnicode(false)
                    .HasComment("Drucktext zur Rechnung");

                entity.Property(e => e.IsExternalInvoice).HasComment("Ist eine externe Rechnung");

                entity.Property(e => e.LanguageIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .IsFixedLength(true)
                    .HasComment("ISO-Code der Sprache der Rechnung");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Maildatum der Rechnung");

                entity.Property(e => e.MandateReference)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Mandatsreferenz des Kunden zur Rechnung");

                entity.Property(e => e.OpenGrossPrice)
                    .HasColumnType("decimal(31, 14)")
                    .HasComment("Offene Gesamtsumme der Rechnung");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(58)
                    .IsUnicode(false)
                    .HasComment("Vorgangs-ID der Rechnung");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Zahlungsart");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Druckdatum der Rechnung");

                entity.Property(e => e.ServiceDate)
                    .HasColumnType("datetime")
                    .HasComment("Lieferdatum der Rechnung");

                entity.Property(e => e.ShipFromCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Währungsfaktor des Versandlandes");

                entity.Property(e => e.ShipFromCountryCurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryCurrencyISO")
                    .HasComment("Faktor zur Umrechnung in die Versandlandwährung");

                entity.Property(e => e.ShipFromCountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryISO")
                    .HasComment("Währung des Versandlandes");

                entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart der Rechnung");

                entity.Property(e => e.ShopName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name des Shops der Bestellung");

                entity.Property(e => e.TaxCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Währungsfaktor des Steuerlandes");

                entity.Property(e => e.TaxCountryCurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryCurrencyISO")
                    .HasComment("ISO-Code der Währung des Steuerlandes der Rechnung");

                entity.Property(e => e.TaxCountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryISO")
                    .HasComment("ISO-Code des Steuerlandes der Rechnung");

                entity.Property(e => e.TermOfPayment).HasComment("Zahlungsziel in Tagen für die Rechnung");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Zu zahlender Gesamtbruttopreis der Rechnung");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Gesamtnettopreis der Rechnung");

                entity.Property(e => e.UseNetPrice).HasComment("Nettopreise benutzen (Kundengruppe)");

                entity.Property(e => e.UserInternalId).HasComment("Interne ID des (JTL-Wawi) Bearbeiters der Rechnung");

                entity.Property(e => e.ValueAddedTaxId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Ust-IdNr. der Rechnung");

                entity.Property(e => e.ValutaDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum der Rechnung");
            });

            modelBuilder.Entity<InvoiceBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceCorrection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceCorrection", "Report");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Ziellandes der Rechnungskorrektur");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum der Rechnungskorrektur");

                entity.Property(e => e.CurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Währung");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währungsangabe");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.ExemptFromVat)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("ExemptFromVAT")
                    .HasComment("Art der Steuerbefreiung in der Rechnungskorrektur");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnungskorrektur");

                entity.Property(e => e.InvoiceCorrectionNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer der Rechnungskorrektur");

                entity.Property(e => e.InvoiceCorrectionText)
                    .IsUnicode(false)
                    .HasComment("Text zur Rechnungskorrektur");

                entity.Property(e => e.InvoiceInternalId).HasComment("Interne ID der Rechnung zur Rechnungskorrektur");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer der Rechnung");

                entity.Property(e => e.LanguageInternalId).HasComment("Interne ID der Sprache");

                entity.Property(e => e.LanguageIso)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .IsFixedLength(true)
                    .HasComment("ISO-Code der Sprache der Rechnungskorrektur");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Maildatum der Rechnungskorrektur");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(68)
                    .IsUnicode(false)
                    .HasComment("Vargangs-ID der Rechnungskorrektur");

                entity.Property(e => e.PlatformInternalId).HasComment("Interne ID der Plattform");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Preis der Rechnungskorrektur");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Druckdatum der Rechnungskorrektur");

                entity.Property(e => e.ShipFromCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Versandlandwährung");

                entity.Property(e => e.ShipFromCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryCurrencyISO")
                    .HasComment("ISO-Code der Versandlandwährung");

                entity.Property(e => e.ShipFromCountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryISO")
                    .HasComment("ISO des Versandlandes der Rechnungskorrektur");

                entity.Property(e => e.ShortText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Kurzer Drucktext zur Rechnungskorrektur");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Status der Rechnungskorrektur");

                entity.Property(e => e.TaxCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Währungsfaktor des Steuerlandes der Rechnungskorrektur");

                entity.Property(e => e.TaxCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryCurrencyISO")
                    .HasComment("ISO-Code der Währung des Steuerlandes der Rechnungskorrektur");

                entity.Property(e => e.TaxCountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryISO")
                    .HasComment("ISO-Code des Steuerlandes der Rechnungskorrektur");

                entity.Property(e => e.Text)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasComment("Drucktext zur Rechnungskorrektur");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis der Rechnungskorrektur");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtnettopreis der Rechnungskorrektur");

                entity.Property(e => e.UseNetPrice).HasComment("Nettopreis benutzen (Kundengruppe)");

                entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");

                entity.Property(e => e.ValueAddedTaxId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Umsatzsteuer-ID der Rechnungskorrektur");
            });

            modelBuilder.Entity<InvoiceCorrectionBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceCorrectionBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceCorrectionPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceCorrectionPosition", "Report");

                entity.Property(e => e.BillOfMaterialsPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Interne ID für Stücklistenpositionen");

                entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Typ der Vaterartikel-ID des Stücklistenangebots der Rechnungskorrekturposition");

                entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels in der Rechnungskorrekturposition");

                entity.Property(e => e.ConfiguratorPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Gibt den Typ der Konfiguratorposition an");

                entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Typ der Vaterartikel-ID des Konfigurationsangebots der Rechnungskorrekturposition");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Rabatt in Prozent");

                entity.Property(e => e.DiscountValue)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Rabattbetrag");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN")
                    .HasComment("Internationale Artikelnummer");

                entity.Property(e => e.GrossPricePerUnit)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis Einzel pro Artikel");

                entity.Property(e => e.IndividualShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzel Versandgewicht des Artikels");

                entity.Property(e => e.IndividualWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelgewicht des Artikels");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnungskorrektur");

                entity.Property(e => e.InvoiceCorrectionInternalId).HasComment("Interne ID der Rechnungskorrektur");

                entity.Property(e => e.ItemDescriptionBrief)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasComment("Kurze Beschreibung der Position der Rechnungskorrektur");

                entity.Property(e => e.ItemDescriptionDetailed)
                    .IsUnicode(false)
                    .HasComment("Ausführliche Artikelbeschreibung der Position der Rechnungskorrektur");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Drucktext der Position");

                entity.Property(e => e.NetPricePerUnit)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Nettopreis Einzel pro Artikel");

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis in den Rechnungskorrekturpositionen");

                entity.Property(e => e.PositionType)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasComment("Typ der Position");

                entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels der Position");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl des Artikels in der Position");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Artikelnummer des Artikels in der Position");

                entity.Property(e => e.Sorting).HasComment("Sortierung Rechnungskorrekturposition");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis Gesamt über die Anzahl der Artikel in der Position");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis Gesamt über die Anzahl der Artikel in der Position");

                entity.Property(e => e.TotalShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamt Versandgewicht des Artikels über die Anzahl in der Position");

                entity.Property(e => e.TotalWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtgewicht über die Anzahl des Artikels in der Position");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Einheit der Rechnungskorrekturposition");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt in Prozent");

                entity.Property(e => e.Vatvalue)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATValue")
                    .HasComment("MwSt Betrag pro Position");
            });

            modelBuilder.Entity<InvoiceCorrectionPositionConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceCorrectionPositionConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceCorrectionPositionDeliveryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceCorrectionPositionDeliveryDetails", "Report");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoicePaymentInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoicePaymentInformation", "Report");

                entity.Property(e => e.DebitAccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DebitBank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DebitBic)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("DebitBIC");

                entity.Property(e => e.DebitCreditorId)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.DebitDueDate).HasColumnType("datetime");

                entity.Property(e => e.DebitEndToEndId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebitIban)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("DebitIBAN");

                entity.Property(e => e.DebitMandateReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DebitSubject)
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.FinancingCosts).HasColumnType("numeric(25, 13)");

                entity.Property(e => e.PayPalId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeAccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PayeeBIC");

                entity.Property(e => e.PayeeDueDate).HasColumnType("datetime");

                entity.Property(e => e.PayeeEndToEndId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PayeeIBAN");

                entity.Property(e => e.PayeeSubject)
                    .HasMaxLength(58)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentInfo).IsUnicode(false);

                entity.Property(e => e.PaymentMethodType)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TransferAccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TransferBank)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferBic)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TransferBIC");

                entity.Property(e => e.TransferDueDate).HasColumnType("datetime");

                entity.Property(e => e.TransferEndToEndId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferIban)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TransferIBAN");

                entity.Property(e => e.TransferSubject)
                    .HasMaxLength(58)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoicePayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoicePayments", "Report");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.StandardChartOfAccountsManual)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Value).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<InvoicePosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoicePosition", "Report");

                entity.Property(e => e.AmazonCustomJson)
                    .IsUnicode(false)
                    .HasColumnName("AmazonCustomJSON");

                entity.Property(e => e.BillOfMaterialsPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Stücklistenposition");

                entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Typ der Vaterartikel-ID des Stücklistenangebots der Rechnungskorrekturposition");

                entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels");

                entity.Property(e => e.ConfiguratorPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Gibt den Typ der Konfiguratorposition an");

                entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Typ der Vaterartikel-ID des Konfigurationsangebots derRechnungskorrekturposition");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Rabatt in Prozent");

                entity.Property(e => e.DiscountValue)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Betrag des Rabatts");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN")
                    .HasComment("Internationale Artikelnummer der Rechnungskorrekturposition");

                entity.Property(e => e.GrossPricePerUnit)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelbruttopreis der Position");

                entity.Property(e => e.IndividualShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelversandgewicht des Artikels");

                entity.Property(e => e.IndividualWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelgewicht des Artikels");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Rechnung");

                entity.Property(e => e.InvoiceInternalId).HasComment("Interne ID der Rechnung zur Rechnungsposition");

                entity.Property(e => e.ItemDescriptionBrief)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasComment("Kurze Artikelbeschreibung");

                entity.Property(e => e.ItemDescriptionDetailed)
                    .IsUnicode(false)
                    .HasComment("Lange Artikelbeschreibung");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Text zur Artikelposition");

                entity.Property(e => e.NetPricePerUnit)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Einzelnettopreis der Position");

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis zur Rechnungsposition");

                entity.Property(e => e.PositionType)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasComment("Gibt den Positionstyp an");

                entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels der Position");

                entity.Property(e => e.PurchaseNetPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Netto Einkaufspreis der Position");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl pro Position");

                entity.Property(e => e.RevenueAccount)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasComment("Erlöskonto zur Rechnungsposition");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Artikelnummer zu der Position");

                entity.Property(e => e.Sorting).HasComment("Gibt die Sortierung der Positionen an");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis über die Anzahl in der Position");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtnettopreis über die Anzahl in der Position");

                entity.Property(e => e.TotalShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtversandgewicht der Position");

                entity.Property(e => e.TotalWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtgewicht der Position");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Einheit des Artikels der Position");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt Satz in Prozent");

                entity.Property(e => e.Vatvalue)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATValue")
                    .HasComment("Betrag der MwSt");
            });

            modelBuilder.Entity<InvoicePositionConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoicePositionConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoicePositionDeliveryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoicePositionDeliveryDetails", "Report");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("InvoiceShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Lieferantenfaktoren>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Lieferantenfaktoren", "Statistik");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.Faktor)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("FAKTOR");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<LvAbonnements>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAbonnements", "Kunde");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DEnddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnddatum");

                entity.Property(e => e.DStartdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartdatum");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.FGutschrift)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschrift");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.FZahlung)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZahlung");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KIntervall).HasColumnName("kIntervall");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NAlleXjahre).HasColumnName("nAlleXJahre");

                entity.Property(e => e.NAlleXmonate).HasColumnName("nAlleXMonate");

                entity.Property(e => e.NAlleXtage).HasColumnName("nAlleXTage");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");

                entity.Property(e => e.Zahlungsart)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvAbrechnung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAbrechnung", "FulfillmentNetwork");

                entity.Property(e => e.CAbrechnungsNummer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAbrechnungsNummer");

                entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");

                entity.Property(e => e.CBenutzer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer");

                entity.Property(e => e.CHaendler)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cHaendler");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.DAbrechnungBis)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungBis");

                entity.Property(e => e.DAbrechnungVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungVon");

                entity.Property(e => e.DAuftragErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAuftragErstellt");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NAktiveAbrechnung).HasColumnName("nAktiveAbrechnung");

                entity.Property(e => e.NAuftragErstellt).HasColumnName("nAuftragErstellt");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");
            });

            modelBuilder.Entity<LvAbrechnungEinzelnachweis>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAbrechnungEinzelnachweis", "FulfillmentNetwork");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CName)
                    .HasMaxLength(671)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KAbrechnungEinzelnachweis).HasColumnName("kAbrechnungEinzelnachweis");

                entity.Property(e => e.KAbrechnungPos).HasColumnName("kAbrechnungPos");

                entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");

                entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            });

            modelBuilder.Entity<LvAbrechnungPositionen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAbrechnungPositionen", "FulfillmentNetwork");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CBezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezeichnung");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVkBrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVkBrutto");

                entity.Property(e => e.FVkBruttoGesamt)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVkBruttoGesamt");

                entity.Property(e => e.FVkNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVkNetto");

                entity.Property(e => e.FVkNettoGesamt)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVkNettoGesamt");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KAbrechnungPos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kAbrechnungPos");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<LvAmazonAbgleichAngebote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAbgleichAngebote", "Amazon");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelName");

                entity.Property(e => e.CAsin1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAsin1");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEan");

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIsbn");

                entity.Property(e => e.CItemname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemname");

                entity.Property(e => e.CKommentar)
                    .IsRequired()
                    .HasMaxLength(46)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSellerSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSku");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUpc");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.FVersandkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandkosten");

                entity.Property(e => e.KAmazonAngebot)
                    .HasMaxLength(610)
                    .IsUnicode(false)
                    .HasColumnName("kAmazonAngebot");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPreisBestandsAnpassung).HasColumnName("nPreisBestandsAnpassung");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NWirdAusSortimentEntfernt).HasColumnName("nWirdAusSortimentEntfernt");
            });

            modelBuilder.Entity<LvAmazonAbgleichBestellungPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAbgleichBestellungPos", "Amazon");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelname");

                entity.Property(e => e.DShipdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dShipdate");

                entity.Property(e => e.FItemPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fItemPrice");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");
            });

            modelBuilder.Entity<LvAmazonAbgleichBestellungen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAbgleichBestellungen", "Amazon");

                entity.Property(e => e.CBillCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBillCity");

                entity.Property(e => e.CBillCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cBillCountry");

                entity.Property(e => e.CBillPostalcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBillPostalcode");

                entity.Property(e => e.CBillState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBillState");

                entity.Property(e => e.CBilladdress1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBilladdress1");

                entity.Property(e => e.CBilladdress2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBilladdress2");

                entity.Property(e => e.CBilladdress3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBilladdress3");

                entity.Property(e => e.CBuyerEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerEmail");

                entity.Property(e => e.CBuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerName");

                entity.Property(e => e.CBuyerPhonenumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerPhonenumber");

                entity.Property(e => e.CCurrency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cCurrency");

                entity.Property(e => e.CItemPromotionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemPromotionId");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.CRecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRecipientName");

                entity.Property(e => e.CShipAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress1");

                entity.Property(e => e.CShipCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipCity");

                entity.Property(e => e.CShipCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cShipCountry");

                entity.Property(e => e.CShipPhonenumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipPhonenumber");

                entity.Property(e => e.CShipPostalcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cShipPostalcode");

                entity.Property(e => e.CShipState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipState");

                entity.Property(e => e.CShipaddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipaddress2");

                entity.Property(e => e.CShipaddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipaddress3");

                entity.Property(e => e.CShippromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShippromotionId");

                entity.Property(e => e.CShipserviceleve)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cShipserviceleve");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DPaymentsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dPaymentsDate");

                entity.Property(e => e.DPurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dPurchaseDate");

                entity.Property(e => e.FItemPromotionDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fItemPromotionDiscount");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KUser).HasColumnName("kUser");
            });

            modelBuilder.Entity<LvAmazonAbrechnungsdaten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAbrechnungsdaten", "Amazon");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.SettlementEndDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementId).HasColumnName("SettlementID");

                entity.Property(e => e.SettlementStartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Username)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvAmazonAbrechnungsdatenPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAbrechnungsdatenPos", "Amazon");

                entity.Property(e => e.AdjustmentId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AdjustmentID");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.AmountDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AmountType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FulfillmentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FulfillmentID");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.MarketplaceName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantOrderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MerchantOrderID");

                entity.Property(e => e.MerchantOrderItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MerchantOrderItemID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OrderItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostedDateTime).HasColumnType("datetime");

                entity.Property(e => e.PromotionId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PromotionID");

                entity.Property(e => e.SettlementId).HasColumnName("SettlementID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipmentID");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvAmazonAngebote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAngebote", "Amazon");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelName");

                entity.Property(e => e.CAsin1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAsin1");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CConditionnote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cConditionnote");

                entity.Property(e => e.CConditiontype)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cConditiontype");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFnsku");

                entity.Property(e => e.CFulfilledNetwork)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cFulfilledNetwork");

                entity.Property(e => e.CFulfillmentChannel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentChannel");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHan");

                entity.Property(e => e.CHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIsbn");

                entity.Property(e => e.CItemname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemname");

                entity.Property(e => e.CPfUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPfUsername");

                entity.Property(e => e.CPlattformname)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattformname");

                entity.Property(e => e.CSellerSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSku");

                entity.Property(e => e.CSteuercodeName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cSteuercodeName");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUpc");

                entity.Property(e => e.CVersandgruppe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandgruppe");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CWarehouseConditiontype)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cWarehouseConditiontype");

                entity.Property(e => e.DOpendate)
                    .HasColumnType("datetime")
                    .HasColumnName("dOpendate");

                entity.Property(e => e.DRestockdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dRestockdate");

                entity.Property(e => e.DSaleEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("dSaleEnd");

                entity.Property(e => e.DSaleStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dSaleStart");

                entity.Property(e => e.DSellerdaten)
                    .HasColumnType("datetime")
                    .HasColumnName("dSellerdaten");

                entity.Property(e => e.FAbstandPrice)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fAbstandPrice");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVk");

                entity.Property(e => e.FApaAbverkaufAenderungMaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaAbverkaufAenderungMaxPreis");

                entity.Property(e => e.FApaAbverkaufAenderungMaxPreisTyp).HasColumnName("fApaAbverkaufAenderungMaxPreisTyp");

                entity.Property(e => e.FApaAbverkaufAenderungMinPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaAbverkaufAenderungMinPreis");

                entity.Property(e => e.FApaAbverkaufAenderungMinPreisTyp).HasColumnName("fApaAbverkaufAenderungMinPreisTyp");

                entity.Property(e => e.FApaMargensteigerungAenderungMaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaMargensteigerungAenderungMaxPreis");

                entity.Property(e => e.FApaMargensteigerungAenderungMaxPreisTyp).HasColumnName("fApaMargensteigerungAenderungMaxPreisTyp");

                entity.Property(e => e.FApaMargensteigerungAenderungMinPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaMargensteigerungAenderungMinPreis");

                entity.Property(e => e.FApaMargensteigerungAenderungMinPreisTyp).HasColumnName("fApaMargensteigerungAenderungMinPreisTyp");

                entity.Property(e => e.FApaMaxPreisAufschlagProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaMaxPreisAufschlagProzent");

                entity.Property(e => e.FApaMinPreisAufschlagProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaMinPreisAufschlagProzent");

                entity.Property(e => e.FApaPreisabstand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaPreisabstand");

                entity.Property(e => e.FApamaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApamaxPreis");

                entity.Property(e => e.FApaminPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fApaminPreis");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEkNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEkNetto");

                entity.Property(e => e.FFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFactor");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.FPreisseller1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisseller1");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FSalePrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSalePrice");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarExtern)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fVerfuegbarExtern");

                entity.Property(e => e.FVersandkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandkosten");

                entity.Property(e => e.FVersandseller1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandseller1");

                entity.Property(e => e.FVkNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVkNetto");

                entity.Property(e => e.FVolume)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVolume");

                entity.Property(e => e.KAmazonAngebot)
                    .HasMaxLength(610)
                    .IsUnicode(false)
                    .HasColumnName("kAmazonAngebot");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KSteuercode).HasColumnName("kSteuercode");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NAngebotFehlerAnzahl).HasColumnName("nAngebotFehlerAnzahl");

                entity.Property(e => e.NApaAbverkaufAktiv).HasColumnName("nApaAbverkaufAktiv");

                entity.Property(e => e.NApaAbverkaufBestandBis).HasColumnName("nApaAbverkaufBestandBis");

                entity.Property(e => e.NApaMargensteigerungAktiv).HasColumnName("nApaMargensteigerungAktiv");

                entity.Property(e => e.NApaMargensteigerungBestandAb).HasColumnName("nApaMargensteigerungBestandAb");

                entity.Property(e => e.NApaNutzen).HasColumnName("nApaNutzen");

                entity.Property(e => e.NB2bpreiseSenden).HasColumnName("nB2BPreiseSenden");

                entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");

                entity.Property(e => e.NBearbeitungszeitAnpassen).HasColumnName("nBearbeitungszeitAnpassen");

                entity.Property(e => e.NChangedPrice).HasColumnName("nChangedPrice");

                entity.Property(e => e.NChangedQuantity).HasColumnName("nChangedQuantity");

                entity.Property(e => e.NCondition).HasColumnName("nCondition");

                entity.Property(e => e.NDefaultFulfillmentChannelQuantity).HasColumnName("nDefaultFulfillmentChannelQuantity");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NFfbaQuantity).HasColumnName("nFfbaQuantity");

                entity.Property(e => e.NHasPrice).HasColumnName("nHasPrice");

                entity.Property(e => e.NIstApaPreisabstandProzentual).HasColumnName("nIstApaPreisabstandProzentual");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NLagerSenden).HasColumnName("nLagerSenden");

                entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");

                entity.Property(e => e.NMehrfachlisting).HasColumnName("nMehrfachlisting");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NQuantityInboundShipped).HasColumnName("nQuantityInboundShipped");

                entity.Property(e => e.NQuantityInboundWorking).HasColumnName("nQuantityInboundWorking");

                entity.Property(e => e.NQuantityReceiving).HasColumnName("nQuantityReceiving");

                entity.Property(e => e.NQuantityReserved).HasColumnName("nQuantityReserved");

                entity.Property(e => e.NQuantityTotal).HasColumnName("nQuantityTotal");

                entity.Property(e => e.NQuantityUnsellable).HasColumnName("nQuantityUnsellable");

                entity.Property(e => e.NQuantityWarehouse).HasColumnName("nQuantityWarehouse");

                entity.Property(e => e.NRepricerStrategie).HasColumnName("nRepricerStrategie");
            });

            modelBuilder.Entity<LvAmazonAufzuschaltendeAngebote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonAufzuschaltendeAngebote", "Amazon");

                entity.Property(e => e.CAmazonVersandgruppe)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonVersandgruppe");

                entity.Property(e => e.CArtikelName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelName");

                entity.Property(e => e.CArtikelnummerWawi)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummerWawi");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAsin");

                entity.Property(e => e.CConditionnote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cConditionnote");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEan");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHan");

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIsbn");

                entity.Property(e => e.CLetzerFehler)
                    .IsUnicode(false)
                    .HasColumnName("cLetzerFehler");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPfUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPfUsername");

                entity.Property(e => e.CSellerSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSku");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUpc");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.KAmazonAngebotNeu)
                    .HasMaxLength(610)
                    .IsUnicode(false)
                    .HasColumnName("kAmazonAngebotNeu");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NCondition).HasColumnName("nCondition");

                entity.Property(e => e.NFulfillmentChannel).HasColumnName("nFulfillmentChannel");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NProductIdType).HasColumnName("nProductIdType");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvAmazonBestellungPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonBestellungPos", "Amazon");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CCarrier)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cCarrier");

                entity.Property(e => e.CCustomUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustomUrl");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CFulfillmentCenterId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenterId");

                entity.Property(e => e.CFulfillmentChannel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentChannel");

                entity.Property(e => e.CGeschenkVerpackungstyp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGeschenkVerpackungstyp");

                entity.Property(e => e.CGrusstext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGrusstext");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTrackingNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingNumber");

                entity.Property(e => e.DEstimatedArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dEstimatedArrivalDate");

                entity.Property(e => e.FGeschenkVerpackungskosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGeschenkVerpackungskosten");

                entity.Property(e => e.FItemPrice)
                    .HasColumnType("decimal(38, 24)")
                    .HasColumnName("fItemPrice");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");

                entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
            });

            modelBuilder.Entity<LvAmazonBestellungen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonBestellungen", "Amazon");

                entity.Property(e => e.CBillAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillAddress1");

                entity.Property(e => e.CBillAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillAddress2");

                entity.Property(e => e.CBillAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillAddress3");

                entity.Property(e => e.CBillCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBillCity");

                entity.Property(e => e.CBillCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cBillCountry");

                entity.Property(e => e.CBillPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBillPostalCode");

                entity.Property(e => e.CBillState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBillState");

                entity.Property(e => e.CBuyerEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerEmail");

                entity.Property(e => e.CBuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerName");

                entity.Property(e => e.CBuyerPhonenumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerPhonenumber");

                entity.Property(e => e.CCurrency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cCurrency");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CItemPromotionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemPromotionId");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.COrderStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderStatus");

                entity.Property(e => e.CRecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRecipientName");

                entity.Property(e => e.CSalesChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSalesChannel");

                entity.Property(e => e.CShipAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress1");

                entity.Property(e => e.CShipAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress2");

                entity.Property(e => e.CShipAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress3");

                entity.Property(e => e.CShipCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipCity");

                entity.Property(e => e.CShipCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cShipCountry");

                entity.Property(e => e.CShipPhonenumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipPhonenumber");

                entity.Property(e => e.CShipPostalcode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cShipPostalcode");

                entity.Property(e => e.CShipPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShipPromotionId");

                entity.Property(e => e.CShipServicelevel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cShipServicelevel");

                entity.Property(e => e.CShipState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipState");

                entity.Property(e => e.CStornobenutzer)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStornobenutzer");

                entity.Property(e => e.CUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserName");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandIso");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DPaymentsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dPaymentsDate");

                entity.Property(e => e.DPurchasedate)
                    .HasColumnType("datetime")
                    .HasColumnName("dPurchasedate");

                entity.Property(e => e.DStornozeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dStornozeitpunkt");

                entity.Property(e => e.FItemPromotionalDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fItemPromotionalDiscount");

                entity.Property(e => e.FSumGesamtOfItemPrice)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fSumGesamtOfItemPrice");

                entity.Property(e => e.FVersandkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandkosten");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NAnzahlArtikel).HasColumnName("nAnzahlArtikel");

                entity.Property(e => e.NAnzahlPos).HasColumnName("nAnzahlPos");

                entity.Property(e => e.NB2b).HasColumnName("nB2B");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NFba).HasColumnName("nFba");

                entity.Property(e => e.NIstCustom).HasColumnName("nIstCustom");

                entity.Property(e => e.NIstGeschenk).HasColumnName("nIstGeschenk");

                entity.Property(e => e.NOrderStatus).HasColumnName("nOrderStatus");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NStornogrund).HasColumnName("nStornogrund");

                entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
            });

            modelBuilder.Entity<LvAmazonFulfillmentAuftraege>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonFulfillmentAuftraege", "Amazon");

                entity.Property(e => e.CBestellnummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cBestellnummer");

                entity.Property(e => e.CFehlermeldung)
                    .IsUnicode(false)
                    .HasColumnName("cFehlermeldung");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseEmail");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseKundennummer");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseName)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseName");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePLZ");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferprioritaet)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferprioritaet");

                entity.Property(e => e.CLieferscheinnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinnummer");

                entity.Property(e => e.CPfUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPfUsername");

                entity.Property(e => e.DErstelltAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelltAm");

                entity.Property(e => e.DInBearbeitung)
                    .HasColumnType("datetime")
                    .HasColumnName("dInBearbeitung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NFulfillmentDienstleister).HasColumnName("nFulfillmentDienstleister");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NWarenlagerFulfillment).HasColumnName("nWarenlagerFulfillment");
            });

            modelBuilder.Entity<LvAmazonFulfillmentAuftragPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonFulfillmentAuftragPos", "Amazon");

                entity.Property(e => e.CAbhilfe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbhilfe");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelGeschenkText)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelGeschenkText");

                entity.Property(e => e.CArtikelHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelHinweis");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CErrorType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cErrorType");

                entity.Property(e => e.CIdentCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvAmazonItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonItems", "Amazon");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAsin");

                entity.Property(e => e.CDummyBarcode)
                    .IsUnicode(false)
                    .HasColumnName("cDummyBarcode");

                entity.Property(e => e.CDummyBarcodeType)
                    .IsUnicode(false)
                    .HasColumnName("cDummyBarcodeType");

                entity.Property(e => e.CDummyConditionType)
                    .IsUnicode(false)
                    .HasColumnName("cDummyConditionType");

                entity.Property(e => e.CDummyParentChild)
                    .IsUnicode(false)
                    .HasColumnName("cDummyParentChild");

                entity.Property(e => e.CDummyParentSku)
                    .IsUnicode(false)
                    .HasColumnName("cDummyParentSku");

                entity.Property(e => e.CDummyPreis)
                    .IsUnicode(false)
                    .HasColumnName("cDummyPreis");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEan");

                entity.Property(e => e.CErrorHilfetext)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorHilfetext");

                entity.Property(e => e.CErrormessage)
                    .IsUnicode(false)
                    .HasColumnName("cErrormessage");

                entity.Property(e => e.CFlatFileName)
                    .IsUnicode(false)
                    .HasColumnName("cFlatFileName");

                entity.Property(e => e.CGroupName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cGroupName");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHan");

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIsbn");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPfUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPfUsername");

                entity.Property(e => e.CProducttypeName)
                    .IsUnicode(false)
                    .HasColumnName("cProducttypeName");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUpc");

                entity.Property(e => e.CValue)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.DErrorErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErrorErstellt");

                entity.Property(e => e.DLastTransmission)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastTransmission");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KGroup).HasColumnName("kGroup");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvAmazonLogsitzung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAmazonLogsitzung", "Amazon");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusmeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusmeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<LvAngebote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAngebote", "Kunde");

                entity.Property(e => e.CAngebotsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAngebotsnummer");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CLieferadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdresszusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobilTelefon");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CPlattform)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobilTelefon");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.FAngebotswert)
                    .HasColumnType("decimal(38, 10)")
                    .HasColumnName("fAngebotswert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            });

            modelBuilder.Entity<LvAngebotsposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAngebotsposition", "Verkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FAufEinkaufsliste)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fAufEinkaufsliste");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("numeric(28, 4)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKBrutto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");

                entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            });

            modelBuilder.Entity<LvAngebotsverwaltung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAngebotsverwaltung", "Verkauf");

                entity.Property(e => e.CAngebotsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAngebotsnummer");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CKunde)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKunde");

                entity.Property(e => e.CKundeBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeBundesland");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppe");

                entity.Property(e => e.CLieferadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdresszusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobilTelefon");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobilTelefon");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.FAngebotswert)
                    .HasColumnType("decimal(38, 10)")
                    .HasColumnName("fAngebotswert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");
            });

            modelBuilder.Entity<LvArtikelVerkaeufe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvArtikelVerkaeufe", "Kunde");

                entity.Property(e => e.AvgVkPreis).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelName");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEAN");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.GesamtWert).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.LetzterKauf).HasColumnType("datetime");

                entity.Property(e => e.MengeKaeufe).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("decimal(38, 9)");
            });

            modelBuilder.Entity<LvAuftraege>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftraege", "Kunde");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CExistiertRechnung)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cExistiertRechnung");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobiltelefonnummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobiltelefonnummer");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CLieferadresseZusatzinformationen)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatzinformationen");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobiltelefonnummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobiltelefonnummer");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CRueckhalteGrund)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhalteGrund");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DVersanddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersanddatum");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.FAuftragswert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswert");

                entity.Property(e => e.FAuftragswertVersandland)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAuftragswertVersandland");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FMahnGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahnGebuehr");

                entity.Property(e => e.FOffenerWert)
                    .HasColumnType("decimal(32, 14)")
                    .HasColumnName("fOffenerWert");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.NAnzahlRetouren).HasColumnName("nAnzahlRetouren");

                entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");

                entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");

                entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");

                entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");
            });

            modelBuilder.Entity<LvAuftrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftrag", "Versand");

                entity.Property(e => e.CAmazonServiceLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonServiceLevel");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBenutzername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBestellhinweis)
                    .IsUnicode(false)
                    .HasColumnName("cBestellhinweis");

                entity.Property(e => e.CBestellnr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellnr");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CInetBestellnr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInetBestellnr");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CPlattformName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattformName");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRueckhalteGrund)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhalteGrund");

                entity.Property(e => e.CShopName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShopName");

                entity.Property(e => e.CSpracheName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSpracheName");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CVersandInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandInfo");

                entity.Property(e => e.CVersandartName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.CZahlungsart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsart");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DMailVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dMailVersandt");

                entity.Property(e => e.DVoraussichtlicheLieferung)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlicheLieferung");

                entity.Property(e => e.FAnzahlGepickt)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlGepickt");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertOhneStuecklistenVater)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertOhneStuecklistenVater");

                entity.Property(e => e.FArtikelgewicht)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("fArtikelgewicht");

                entity.Property(e => e.FArtikelversandgewicht)
                    .HasColumnType("numeric(38, 9)")
                    .HasColumnName("fArtikelversandgewicht");

                entity.Property(e => e.FGutschriftWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschriftWert");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.FZahlung)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZahlung");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAlter).HasColumnName("nAlter");

                entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");

                entity.Property(e => e.NIstBezahlt).HasColumnName("nIstBezahlt");

                entity.Property(e => e.NIstDropshipping).HasColumnName("nIstDropshipping");

                entity.Property(e => e.NIstWmsgesperrt).HasColumnName("nIstWMSGesperrt");

                entity.Property(e => e.NIstWmsteillieferungErlaubt).HasColumnName("nIstWMSTeillieferungErlaubt");

                entity.Property(e => e.NPickZustand).HasColumnName("nPickZustand");

                entity.Property(e => e.NPickstatus).HasColumnName("nPickstatus");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NVersandstatus).HasColumnName("nVersandstatus");

                entity.Property(e => e.NVersandstatusEigen).HasColumnName("nVersandstatusEigen");

                entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");

                entity.Property(e => e.NZahlungsstatus).HasColumnName("nZahlungsstatus");
            });

            modelBuilder.Entity<LvAuftragsposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftragsposition", "Verkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.FAnzRetoure)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzRetoure");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FAnzahlAuszuliefern)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlAuszuliefern");

                entity.Property(e => e.FAufEinkaufsliste)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fAufEinkaufsliste");

                entity.Property(e => e.FGeliefert)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fGeliefert");

                entity.Property(e => e.FGutgeschrieben)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fGutgeschrieben");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKBrutto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVknettoGesamt)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKNettoGesamt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");

                entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");

                entity.Property(e => e.NAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("nAnzahlFehlbestandEigen");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLieferbarStatus).HasColumnName("nLieferbarStatus");

                entity.Property(e => e.NLieferbarStatusEigen).HasColumnName("nLieferbarStatusEigen");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            });

            modelBuilder.Entity<LvAuftragsposition1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftragsposition", "Versand");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelbezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelbezeichnung");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.FAnzahlAufPicklisten)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlAufPicklisten");

                entity.Property(e => e.FAuftragsmenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragsmenge");

                entity.Property(e => e.FBereitsGeliefert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBereitsGeliefert");

                entity.Property(e => e.FBestandWms)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestandWMS");

                entity.Property(e => e.FFehlbestand)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fFehlbestand");

                entity.Property(e => e.FFehlbestandEigen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fFehlbestandEigen");

                entity.Property(e => e.FGesamtbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGesamtbestand");

                entity.Property(e => e.FOffeneAuftragsmenge)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fOffeneAuftragsmenge");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FReserviertEigen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fReserviertEigen");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");

                entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NHatLagerbestandInVariationen).HasColumnName("nHatLagerbestandInVariationen");

                entity.Property(e => e.NIstFreiposition).HasColumnName("nIstFreiposition");

                entity.Property(e => e.NIstLagerartikel).HasColumnName("nIstLagerartikel");

                entity.Property(e => e.NLieferbarStatus).HasColumnName("nLieferbarStatus");

                entity.Property(e => e.NLieferbarStatusEigen).HasColumnName("nLieferbarStatusEigen");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<LvAuftragspositionsvariation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftragspositionsvariation", "Versand");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<LvAuftragsverwaltung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftragsverwaltung", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CExistiertRechnung)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cExistiertRechnung");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CKunde)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKunde");

                entity.Property(e => e.CKundeBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeBundesland");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppe");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobiltelefonnummer");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobiltelefonnummer");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CRueckhalteGrund)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhalteGrund");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO");

                entity.Property(e => e.CVersandlandWaehrung)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandWaehrung");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DVersanddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersanddatum");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.DZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsziel");

                entity.Property(e => e.FAuftragswertBrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertBrutto");

                entity.Property(e => e.FAuftragswertNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertNetto");

                entity.Property(e => e.FAuftragswertVersandland)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAuftragswertVersandland");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FMahnGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahnGebuehr");

                entity.Property(e => e.FOffenerWert)
                    .HasColumnType("decimal(32, 14)")
                    .HasColumnName("fOffenerWert");

                entity.Property(e => e.FVersandlandWaehrungFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandlandWaehrungFaktor");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");

                entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");

                entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");

                entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");

                entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");

                entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
            });

            modelBuilder.Entity<LvAuftragsverwaltungCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftragsverwaltungCache", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CExistiertRechnung)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("cExistiertRechnung");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CKunde)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKunde");

                entity.Property(e => e.CKundeBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeBundesland");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppe");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobiltelefonnummer");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobiltelefonnummer");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CRueckhalteGrund)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhalteGrund");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO");

                entity.Property(e => e.CVersandlandWaehrung)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandWaehrung");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DVersanddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersanddatum");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.DZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsziel");

                entity.Property(e => e.FAuftragswertBrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertBrutto");

                entity.Property(e => e.FAuftragswertNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertNetto");

                entity.Property(e => e.FAuftragswertVersandland)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAuftragswertVersandland");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FMahnGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahnGebuehr");

                entity.Property(e => e.FOffenerWert)
                    .HasColumnType("decimal(32, 14)")
                    .HasColumnName("fOffenerWert");

                entity.Property(e => e.FVersandlandWaehrungFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandlandWaehrungFaktor");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");

                entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");

                entity.Property(e => e.NLieferstatus).HasColumnName("nLieferstatus");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NWmsgesperrt).HasColumnName("nWMSGesperrt");

                entity.Property(e => e.NWmsteillieferung).HasColumnName("nWMSTeillieferung");

                entity.Property(e => e.NWmsvorkommissionieren).HasColumnName("nWMSVorkommissionieren");

                entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
            });

            modelBuilder.Entity<LvAuftragsverwaltungDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvAuftragsverwaltungDetail", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStornobenutzer)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStornobenutzer");

                entity.Property(e => e.DStornozeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dStornozeitpunkt");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NStornogrund).HasColumnName("nStornogrund");
            });

            modelBuilder.Entity<LvBestellPosGutschriftErstellbar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvBestellPosGutschriftErstellbar", "Verkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemID");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CStringStandard)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStringStandard");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionID");

                entity.Property(e => e.CUnique)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUnique");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("nAnzahl");

                entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");

                entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
            });

            modelBuilder.Entity<LvBestellPositionen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvBestellPositionen", "Einkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferantenArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenArtNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameLief)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameLief");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FEkNettoGesamt)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fEkNettoGesamt");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FEknettoArtikel)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNettoArtikel");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.FMengeGeliefert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMengeGeliefert");

                entity.Property(e => e.FUst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUST");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KBestellungPos).HasColumnName("kBestellungPos");

                entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<LvBestellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvBestellung", "Einkauf");

                entity.Property(e => e.CBenutzerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerName");

                entity.Property(e => e.CBestellnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBestellnummer");

                entity.Property(e => e.CBezugsAuftragsNummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezugsAuftragsNummer");

                entity.Property(e => e.CDruckAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cDruckAnmerkung");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CInternerKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CKundeFirma)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeName");

                entity.Property(e => e.CKundeVorname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundenNr)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLieferadresseFirma)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseMail)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseName");

                entity.Property(e => e.CLieferadresseOrt)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseVorname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferanschrift)
                    .IsRequired()
                    .HasMaxLength(1279)
                    .IsUnicode(false)
                    .HasColumnName("cLieferanschrift");

                entity.Property(e => e.CLieferantEigeneKundennummer)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantEigeneKundennummer");

                entity.Property(e => e.CLieferantFirmenZusatz)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantFirmenZusatz");

                entity.Property(e => e.CLieferantName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantName");

                entity.Property(e => e.CLieferantennummer)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantennummer");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseName");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CWarenLagerName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarenLagerName");

                entity.Property(e => e.DAngemahnt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAngemahnt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DExportiert)
                    .HasColumnType("datetime")
                    .HasColumnName("dExportiert");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DGefaxt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGefaxt");

                entity.Property(e => e.DGemailt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGemailt");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FGesamtmenge)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fGesamtmenge");

                entity.Property(e => e.FMengeGeliefert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fMengeGeliefert");

                entity.Property(e => e.FProzentGeliefert)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fProzentGeliefert");

                entity.Property(e => e.FSummePositionenBrutto)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fSummePositionenBrutto");

                entity.Property(e => e.FSummePositionenNetto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fSummePositionenNetto");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KInboundRef).HasColumnName("kInboundRef");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NAlterBestellung).HasColumnName("nAlterBestellung");

                entity.Property(e => e.NAnzahlPositionen).HasColumnName("nAnzahlPositionen");

                entity.Property(e => e.NBestaetigt).HasColumnName("nBestaetigt");

                entity.Property(e => e.NHasEingangsrechnung).HasColumnName("nHasEingangsrechnung");

                entity.Property(e => e.NIstUeberfaellig).HasColumnName("nIstUeberfaellig");

                entity.Property(e => e.NManuellAbgeschlossen).HasColumnName("nManuellAbgeschlossen");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvDbeSlogeintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvDbeSLogeintrag", "Sync");

                entity.Property(e => e.CMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.CXml)
                    .IsUnicode(false)
                    .HasColumnName("cXML");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KDbeSlogeintrag)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kDbeSLogeintrag");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");

                entity.Property(e => e.NCallType).HasColumnName("nCallType");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            });

            modelBuilder.Entity<LvEbayAngebote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEbayAngebote", "Ebay");

                entity.Property(e => e.CArtikelKategorieName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelKategorieName");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CCountryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCountryName");

                entity.Property(e => e.CEbayCategory1Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCategory1Name");

                entity.Property(e => e.CEbayCategory2Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCategory2Name");

                entity.Property(e => e.CEbayUserName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserName");

                entity.Property(e => e.CFehler)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cFehler");

                entity.Property(e => e.CHighBidderUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHighBidderUserId");

                entity.Property(e => e.CHtmlTemplateName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHtmlTemplateName");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CListingDuration)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cListingDuration");

                entity.Property(e => e.CListingType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cListingType");

                entity.Property(e => e.CLocation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLocation");

                entity.Property(e => e.CPayPalEmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPayPalEmailAddress");

                entity.Property(e => e.CPaymentMethods)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentMethods");

                entity.Property(e => e.CPlattform)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CPostalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cPostalCode");

                entity.Property(e => e.CRelistId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRelistId");

                entity.Property(e => e.CRueckgabefrist)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRueckgabefrist");

                entity.Property(e => e.CScheduleDate)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cScheduleDate");

                entity.Property(e => e.CScheduleTime)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cScheduleTime");

                entity.Property(e => e.CShipToLocations)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipToLocations");

                entity.Property(e => e.CSubTitle)
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("cSubTitle");

                entity.Property(e => e.CTemplateName)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cTemplateName");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cType")
                    .IsFixedLength(true);

                entity.Property(e => e.CUserProfilePayment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserProfilePayment");

                entity.Property(e => e.CUserProfileReturn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserProfileReturn");

                entity.Property(e => e.CUserProfileShipping)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserProfileShipping");

                entity.Property(e => e.CVersandkostenTraeger)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandkostenTraeger");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungIso");

                entity.Property(e => e.CZahlunghinweis)
                    .IsUnicode(false)
                    .HasColumnName("cZahlunghinweis");

                entity.Property(e => e.CZusatzoptionen)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cZusatzoptionen");

                entity.Property(e => e.DEndtime)
                    .HasColumnType("datetime")
                    .HasColumnName("dEndtime");

                entity.Property(e => e.DStarttime)
                    .HasColumnType("datetime")
                    .HasColumnName("dStarttime");

                entity.Property(e => e.FArtikelEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtikelEbayPreis");

                entity.Property(e => e.FBestOfferAutoAcceptPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestOfferAutoAcceptPrice");

                entity.Property(e => e.FBestOfferMinPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestOfferMinPrice");

                entity.Property(e => e.FBuyItNowPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBuyItNowPrice");

                entity.Property(e => e.FCurrentPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fCurrentPrice");

                entity.Property(e => e.FReservePrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReservePrice");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FStartPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fStartPrice");

                entity.Property(e => e.FStreichPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fStreichPreis");

                entity.Property(e => e.FTotalFees)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fTotalFees");

                entity.Property(e => e.FVatPercent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVatPercent");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FWawiPreisBrutto)
                    .HasColumnType("numeric(38, 7)")
                    .HasColumnName("fWawiPreisBrutto");

                entity.Property(e => e.FWawiPreisNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWawiPreisNetto");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KEbayVorlage).HasColumnName("kEbayVorlage");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.NAngebotsmenge).HasColumnName("nAngebotsmenge");

                entity.Property(e => e.NAutomatischEinstellen).HasColumnName("nAutomatischEinstellen");

                entity.Property(e => e.NBestOfferEnabled).HasColumnName("nBestOfferEnabled");

                entity.Property(e => e.NBestandReserviert).HasColumnName("nBestandReserviert");

                entity.Property(e => e.NBidCount).HasColumnName("nBidCount");

                entity.Property(e => e.NBidderCount).HasColumnName("nBidderCount");

                entity.Property(e => e.NDispatchTimeMax).HasColumnName("nDispatchTimeMax");

                entity.Property(e => e.NEbayCategory1Id).HasColumnName("nEbayCategory1Id");

                entity.Property(e => e.NEbayCategory2Id).HasColumnName("nEbayCategory2Id");

                entity.Property(e => e.NEbayPlus).HasColumnName("nEbayPlus");

                entity.Property(e => e.NGalleryType).HasColumnName("nGalleryType");

                entity.Property(e => e.NGesamtmenge).HasColumnName("nGesamtmenge");

                entity.Property(e => e.NGetItFast).HasColumnName("nGetItFast");

                entity.Property(e => e.NGrundpreisAngabe).HasColumnName("nGrundpreisAngabe");

                entity.Property(e => e.NHitCounter).HasColumnName("nHitCounter");

                entity.Property(e => e.NListingType).HasColumnName("nListingType");

                entity.Property(e => e.NLotSize).HasColumnName("nLotSize");

                entity.Property(e => e.NMaxQuantity).HasColumnName("nMaxQuantity");

                entity.Property(e => e.NMinQuantity).HasColumnName("nMinQuantity");

                entity.Property(e => e.NNurAnGewerbliche).HasColumnName("nNurAnGewerbliche");

                entity.Property(e => e.NPremium).HasColumnName("nPremium");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NRueckgabeMoeglich).HasColumnName("nRueckgabeMoeglich");

                entity.Property(e => e.NScheduleServerSide).HasColumnName("nScheduleServerSide");

                entity.Property(e => e.NSendVat).HasColumnName("nSendVAT");

                entity.Property(e => e.NSiteId).HasColumnName("nSiteId");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NStreichPreisTyp).HasColumnName("nStreichPreisTyp");

                entity.Property(e => e.NUeberverkaeufeMoeglich).HasColumnName("nUeberverkaeufeMoeglich");

                entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");

                entity.Property(e => e.NVerkauft).HasColumnName("nVerkauft");

                entity.Property(e => e.NVorlageLaufend).HasColumnName("nVorlageLaufend");
            });

            modelBuilder.Entity<LvEbayKundenanfragen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEbayKundenanfragen", "Ebay");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CEbayUserName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserName");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CMessage)
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.CMessageId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMessageId");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CSenderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSenderId");

                entity.Property(e => e.CSubject)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSubject");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.DCreationDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("dCreationDate");

                entity.Property(e => e.FEbayItemPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayItemPrice");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KMemberMessageIn).HasColumnName("kMemberMessageIn");

                entity.Property(e => e.NPublic).HasColumnName("nPublic");

                entity.Property(e => e.NSiteId).HasColumnName("nSiteId");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvEbayKundenfeedback>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEbayKundenfeedback", "Ebay");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CCommentText)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("cCommentText");

                entity.Property(e => e.CCommentType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCommentType");

                entity.Property(e => e.CCommentingUser)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCommentingUser");

                entity.Property(e => e.CEbayUserName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserName");

                entity.Property(e => e.CFeedbackId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFeedbackID");

                entity.Property(e => e.CFeedbackRole)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFeedbackRole");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionID");

                entity.Property(e => e.DCommentTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("dCommentTime");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KFeedbackIn).HasColumnName("kFeedbackIn");

                entity.Property(e => e.NCommentingUserScore).HasColumnName("nCommentingUserScore");

                entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
            });

            modelBuilder.Entity<LvEbayPreisvorschlaege>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEbayPreisvorschlaege", "Ebay");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CBestOfferId)
                    .IsRequired()
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cBestOfferId");

                entity.Property(e => e.CCounterMessage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCounterMessage");

                entity.Property(e => e.CCurrency)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cCurrency");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cEmail");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CMessage)
                    .HasMaxLength(501)
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CUserId)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cUserId");

                entity.Property(e => e.DExpirationTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dExpirationTime");

                entity.Property(e => e.FCounterPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fCounterPrice");

                entity.Property(e => e.FEbayItemPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayItemPrice");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NCounterQuantity).HasColumnName("nCounterQuantity");

                entity.Property(e => e.NFeedbackScore).HasColumnName("nFeedbackScore");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NSiteId).HasColumnName("nSiteId");
            });

            modelBuilder.Entity<LvEbayTransactions>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEbayTransactions", "Ebay");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CBezahltOffen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezahltOffen");

                entity.Property(e => e.CCityName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cCityName");

                entity.Property(e => e.CCommentTextIn)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("cCommentTextIn");

                entity.Property(e => e.CCommentTypeIn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCommentTypeIn");

                entity.Property(e => e.CCountryName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCountryName");

                entity.Property(e => e.CDispute)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDispute");

                entity.Property(e => e.CEbayBuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayBuyerName");

                entity.Property(e => e.CEbayItemType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cEbayItemType")
                    .IsFixedLength(true);

                entity.Property(e => e.CEbayUserName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserName");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmail");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CPaymentStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentStatus");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CPostalCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cPostalCode");

                entity.Property(e => e.CRelistId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRelistId");

                entity.Property(e => e.CSaCityName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSA_CityName");

                entity.Property(e => e.CSaCountryname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSA_Countryname");

                entity.Property(e => e.CSaName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSA_Name");

                entity.Property(e => e.CSaPostalCode)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cSA_PostalCode");

                entity.Property(e => e.CSaStateOrProvince)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSA_StateOrProvince");

                entity.Property(e => e.CSaStreet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSA_Street");

                entity.Property(e => e.CSaStreet1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSA_Street1");

                entity.Property(e => e.CSaStreet2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSA_Street2");

                entity.Property(e => e.CSku)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSku");

                entity.Property(e => e.CSssShippingService)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSSS_ShippingService");

                entity.Property(e => e.CStreet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreet");

                entity.Property(e => e.CStreet1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreet1");

                entity.Property(e => e.CStreet2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreet2");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionId");

                entity.Property(e => e.CUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserId");

                entity.Property(e => e.CVariationTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVariationTitle");

                entity.Property(e => e.CVerwendungszweck)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CZahlungsart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsart");

                entity.Property(e => e.CZusatzoptionen)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cZusatzoptionen");

                entity.Property(e => e.DAbgeschlossenAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbgeschlossenAm");

                entity.Property(e => e.DBezahltAbgeschlossen)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahltAbgeschlossen");

                entity.Property(e => e.DCheckoutErstelltAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dCheckoutErstelltAm");

                entity.Property(e => e.DCreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreateDate");

                entity.Property(e => e.DVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersendet");

                entity.Property(e => e.FAmountPaid)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmountPaid");

                entity.Property(e => e.FSssShippingServiceAdditionalCost)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSSS_ShippingServiceAdditionalCost");

                entity.Property(e => e.FSssShippingServiceCost)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSSS_ShippingServiceCost");

                entity.Property(e => e.FSteuersatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSteuersatz");

                entity.Property(e => e.FTransactionPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fTransactionPrice");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KBuyer).HasColumnName("kBuyer");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");

                entity.Property(e => e.KEbayTemplate).HasColumnName("kEbayTemplate");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KTransaction).HasColumnName("kTransaction");

                entity.Property(e => e.NCheckOut).HasColumnName("nCheckOut");

                entity.Property(e => e.NEbayItemStatus).HasColumnName("nEbayItemStatus");

                entity.Property(e => e.NGalleryType).HasColumnName("nGalleryType");

                entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");

                entity.Property(e => e.NKonflikt).HasColumnName("nKonflikt");

                entity.Property(e => e.NListingType).HasColumnName("nListingType");

                entity.Property(e => e.NPremium).HasColumnName("nPremium");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");

                entity.Property(e => e.NSiteId).HasColumnName("nSiteId");

                entity.Property(e => e.NTransactionStatus).HasColumnName("nTransactionStatus");

                entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");

                entity.Property(e => e.NVersandZahlungStatus).HasColumnName("nVersandZahlungStatus");
            });

            modelBuilder.Entity<LvEbayZuAktualisierendeAngebote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEbayZuAktualisierendeAngebote", "Ebay");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CEbayUserName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserName");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CPlattform)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(80)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEbayItem).HasColumnName("kEbayItem");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.NAngebotsmenge).HasColumnName("nAngebotsmenge");

                entity.Property(e => e.NBilderOderBeschreibung).HasColumnName("nBilderOderBeschreibung");

                entity.Property(e => e.NFahrzeugverwendungsliste).HasColumnName("nFahrzeugverwendungsliste");

                entity.Property(e => e.NFehler).HasColumnName("nFehler");

                entity.Property(e => e.NKategorie).HasColumnName("nKategorie");

                entity.Property(e => e.NPreise).HasColumnName("nPreise");

                entity.Property(e => e.NRest).HasColumnName("nRest");

                entity.Property(e => e.NRueckgabe).HasColumnName("nRueckgabe");

                entity.Property(e => e.NSiteId).HasColumnName("nSiteId");

                entity.Property(e => e.NVariationenAktiv).HasColumnName("nVariationenAktiv");

                entity.Property(e => e.NVarkombisNichtPreis).HasColumnName("nVarkombisNichtPreis");

                entity.Property(e => e.NVarkombisPreis).HasColumnName("nVarkombisPreis");

                entity.Property(e => e.NVersand).HasColumnName("nVersand");

                entity.Property(e => e.NZahlungsarten).HasColumnName("nZahlungsarten");
            });

            modelBuilder.Entity<LvEingangsrechnung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEingangsrechnung", "Einkauf");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEigeneRechnungsnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneRechnungsnummer");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CLieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferant");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CWaehrungLieferantIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungLieferantIso");

                entity.Property(e => e.DBelegdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBelegdatum");

                entity.Property(e => e.DBezahlt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahlt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsziel");

                entity.Property(e => e.FBrutto)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fBrutto");

                entity.Property(e => e.FBruttoLieferantenWaehrung)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fBruttoLieferantenWaehrung");

                entity.Property(e => e.FNetto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fNetto");

                entity.Property(e => e.FNettoLieferantenWaehrung)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fNettoLieferantenWaehrung");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTageVerbleibend).HasColumnName("nTageVerbleibend");

                entity.Property(e => e.NZahlungFreigegeben).HasColumnName("nZahlungFreigegeben");
            });

            modelBuilder.Entity<LvEingangsrechnungBestellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEingangsrechnungBestellung", "Einkauf");

                entity.Property(e => e.CEigeneBestellnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneBestellnummer");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            });

            modelBuilder.Entity<LvEingangsrechnungPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEingangsrechnungPos", "Einkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CHan)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHan");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferantenArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenArtNr");

                entity.Property(e => e.CLieferantenBezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenBezeichnung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FEkbrutto)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("fEKBrutto");

                entity.Property(e => e.FEkbruttoGesamt)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fEKBruttoGesamt");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FEknettoGesamt)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fEKNettoGesamt");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KEingangsrechnungPos).HasColumnName("kEingangsrechnungPos");

                entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");
            });

            modelBuilder.Entity<LvEinkaufsliste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvEinkaufsliste", "Einkauf");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHinweis)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLiefArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLiefArtNr");

                entity.Property(e => e.CLieferantGuenstigster)
                    .HasMaxLength(322)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantGuenstigster");

                entity.Property(e => e.CLieferantName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantName");

                entity.Property(e => e.CLieferantSchnellster)
                    .HasMaxLength(322)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantSchnellster");

                entity.Property(e => e.CLieferantStd)
                    .HasMaxLength(322)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantStd");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameBeimLieferanten)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameBeimLieferanten");

                entity.Property(e => e.CNameBenutzer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameBenutzer");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAbnahmeIntervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeIntervall");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(38, 13)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FArtikelGld)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtikelGld");

                entity.Property(e => e.FAufEinkaufslisteGesetzt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufEinkaufslisteGesetzt");

                entity.Property(e => e.FEknettoAktuell)
                    .HasColumnType("numeric(28, 14)")
                    .HasColumnName("fEKNettoAktuell");

                entity.Property(e => e.FFehlbestand)
                    .HasColumnType("decimal(30, 14)")
                    .HasColumnName("fFehlbestand");

                entity.Property(e => e.FLagerbestandEigen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestandEigen");

                entity.Property(e => e.FLiefBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fLiefBestand");

                entity.Property(e => e.FMindestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMindestbestand");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantGuenstigster).HasColumnName("kLieferantGuenstigster");

                entity.Property(e => e.KLieferantSchnellster).HasColumnName("kLieferantSchnellster");

                entity.Property(e => e.KLieferantStd).HasColumnName("kLieferantStd");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");

                entity.Property(e => e.NMindestAbnahme).HasColumnName("nMindestAbnahme");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<LvFulfillmentauftrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvFulfillmentauftrag", "Versand");

                entity.Property(e => e.CBezugsauftragsnummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cBezugsauftragsnummer");

                entity.Property(e => e.CBezugslieferscheinnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezugslieferscheinnummer");

                entity.Property(e => e.CDienstleister)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDienstleister");

                entity.Property(e => e.CFehlermeldung)
                    .IsUnicode(false)
                    .HasColumnName("cFehlermeldung");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CKundenNummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNummer");

                entity.Property(e => e.CLieferprioritaet)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferprioritaet");

                entity.Property(e => e.CLieferungAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungAdressZusatz");

                entity.Property(e => e.CLieferungAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungAnrede");

                entity.Property(e => e.CLieferungBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungBundesland");

                entity.Property(e => e.CLieferungFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungFax");

                entity.Property(e => e.CLieferungFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungFirma");

                entity.Property(e => e.CLieferungLand)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungLand");

                entity.Property(e => e.CLieferungMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungMail");

                entity.Property(e => e.CLieferungName)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungName");

                entity.Property(e => e.CLieferungOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungOrt");

                entity.Property(e => e.CLieferungPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungPlz");

                entity.Property(e => e.CLieferungStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungStrasse");

                entity.Property(e => e.CLieferungTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungTelefon");

                entity.Property(e => e.CLieferungVorname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungVorname");

                entity.Property(e => e.CLieferungZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferungZusatz");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CStornoCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStornoCode");

                entity.Property(e => e.CStornoGrund)
                    .IsUnicode(false)
                    .HasColumnName("cStornoGrund");

                entity.Property(e => e.CTransaktionsnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransaktionsnummer");

                entity.Property(e => e.DErstelltAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelltAm");

                entity.Property(e => e.DInBearbeitungSeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dInBearbeitungSeit");

                entity.Property(e => e.NAmazonUser).HasColumnName("nAmazonUser");

                entity.Property(e => e.NFulfillmentDienstleister).HasColumnName("nFulfillmentDienstleister");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvFulfillmentauftragsposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvFulfillmentauftragsposition", "Versand");

                entity.Property(e => e.CAbhilfe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbhilfe");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelGeschenkText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelGeschenkText");

                entity.Property(e => e.CArtikelHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelHinweis");

                entity.Property(e => e.CCarrier)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cCarrier");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CErrorType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cErrorType");

                entity.Property(e => e.CIdentCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvJtlTrackingPakete>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvJtlTrackingPakete", "Versand");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CExterneBestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExterneBestellnummer");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CLieferscheinnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinnummer");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CTrackingId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingID");

                entity.Property(e => e.CVersandart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandart");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DnextUpdateAttempt)
                    .HasColumnType("datetime")
                    .HasColumnName("dnextUpdateAttempt");

                entity.Property(e => e.DregisteredAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dregisteredAt");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NTrackingServiceProvider).HasColumnName("nTrackingServiceProvider");

                entity.Property(e => e.NTrackingStatus).HasColumnName("nTrackingStatus");

                entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
            });

            modelBuilder.Entity<LvKunde>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvKunde", "Kunde");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEbayName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayName");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CGeburtstag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cGeburtstag");

                entity.Property(e => e.CHerkunft)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunft");

                entity.Property(e => e.CHrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHRNr");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.KBuyer).HasColumnName("kBuyer");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");

                entity.Property(e => e.KundenGruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KundenKategorie)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");

                entity.Property(e => e.NJtlFulfillment).HasColumnName("nJtlFulfillment");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<LvKundenDaten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvKundenDaten", "Kunde");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEbayName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayName");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CGeburtstag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cGeburtstag");

                entity.Property(e => e.CHerkunft)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunft");

                entity.Property(e => e.CHrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHRNr");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKassenKunde)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKassenKunde")
                    .IsFixedLength(true);

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNewsletter)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNewsletter")
                    .IsFixedLength(true);

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CSperre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cSperre")
                    .IsFixedLength(true);

                entity.Property(e => e.CSteuerNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSteuerNr");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FProvision)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fProvision");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FSkonto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkonto");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBuyer).HasColumnName("kBuyer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");

                entity.Property(e => e.NDrittland).HasColumnName("nDrittland");

                entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");

                entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NUstiderfolgreichGeprüft).HasColumnName("nUSTIDErfolgreichGeprüft");

                entity.Property(e => e.NVertreter).HasColumnName("nVertreter");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<LvLagerUebersicht>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLagerUebersicht", "FulfillmentNetwork");

                entity.Property(e => e.BelegterPlatz).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Bestand).HasColumnType("numeric(38, 1)");

                entity.Property(e => e.Datum).HasColumnType("datetime");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.Kosten).HasColumnType("numeric(38, 1)");
            });

            modelBuilder.Entity<LvLagerkosten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLagerkosten", "FulfillmentNetwork");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CLiefArtNr)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLiefArtNr");

                entity.Property(e => e.Datum).HasColumnType("datetime");

                entity.Property(e => e.FLagerBestand)
                    .HasColumnType("numeric(1, 1)")
                    .HasColumnName("fLagerBestand");

                entity.Property(e => e.Firma)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.Kubikmeter).HasColumnType("numeric(6, 6)");

                entity.Property(e => e.KubikmeterGesamt).HasColumnType("numeric(6, 6)");

                entity.Property(e => e.LagergebührProTag).HasColumnType("numeric(1, 1)");

                entity.Property(e => e.PreisProM3).HasColumnType("numeric(1, 1)");
            });

            modelBuilder.Entity<LvLagerkostenRegeln>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLagerkostenRegeln", "FulfillmentNetwork");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelname");

                entity.Property(e => e.CBereich)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cBereich");

                entity.Property(e => e.CSessionId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAbrechnungLagerplatz).HasColumnName("kAbrechnungLagerplatz");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");

                entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");

                entity.Property(e => e.NModus).HasColumnName("nModus");

                entity.Property(e => e.NRegel).HasColumnName("nRegel");
            });

            modelBuilder.Entity<LvLagerkostenUebersicht>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLagerkostenUebersicht", "FulfillmentNetwork");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtNrIndividuell)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNrIndividuell");

                entity.Property(e => e.CName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSessionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(38, 11)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAbrechnungLagerplatz).HasColumnName("kAbrechnungLagerplatz");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelIndividuell).HasColumnName("kArtikelIndividuell");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");

                entity.Property(e => e.NModus).HasColumnName("nModus");

                entity.Property(e => e.NRegel).HasColumnName("nRegel");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<LvLieferant>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLieferant", "Einkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CEigeneKundennummer)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneKundennummer");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CFirmaZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaZusatz");

                entity.Property(e => e.CKontakt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKontakt");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLieferantennummer)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantennummer");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cPlz");

                entity.Property(e => e.CSprache)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSprache");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTelDurchwahl)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTelDurchwahl");

                entity.Property(e => e.CTelZentrale)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTelZentrale");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NIstJtlFulfillment).HasColumnName("nIstJtlFulfillment");
            });

            modelBuilder.Entity<LvLieferschein>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLieferschein", "Versand");

                entity.Property(e => e.CBenutzerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerName");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CBestellungInetBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellungInetBestellNr");

                entity.Property(e => e.CBestellungStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBestellungStatus");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CFulfillmentLager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentLager");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePLZ");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CLieferantFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantFirma");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUsername");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DMailVersand)
                    .HasColumnType("datetime")
                    .HasColumnName("dMailVersand");

                entity.Property(e => e.DVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersendet");

                entity.Property(e => e.FArtikelgewicht)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fArtikelgewicht");

                entity.Property(e => e.FVersandgewicht)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVersandgewicht");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");

                entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");

                entity.Property(e => e.NIstDropshipping).HasColumnName("nIstDropshipping");

                entity.Property(e => e.NIstFulfillment).HasColumnName("nIstFulfillment");

                entity.Property(e => e.NIstRechnungVorhanden).HasColumnName("nIstRechnungVorhanden");

                entity.Property(e => e.NIstWmslieferschein).HasColumnName("nIstWMSLieferschein");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");

                entity.Property(e => e.NShippingStatus).HasColumnName("nShippingStatus");
            });

            modelBuilder.Entity<LvLieferscheinWarenlagerausgang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLieferscheinWarenlagerausgang", "Versand");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.CLagerplatz)
                    .HasMaxLength(511)
                    .IsUnicode(false)
                    .HasColumnName("cLagerplatz");

                entity.Property(e => e.CWarenlagerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarenlagerName");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KWarenLagerAusgang).HasColumnName("kWarenLagerAusgang");

                entity.Property(e => e.NIstWmslager).HasColumnName("nIstWMSLager");
            });

            modelBuilder.Entity<LvLieferscheinpaket>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLieferscheinpaket", "Versand");

                entity.Property(e => e.CEnclosedReturnIdentCode)
                    .HasMaxLength(255)
                    .HasColumnName("cEnclosedReturnIdentCode");

                entity.Property(e => e.CFulfillmentCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenter");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CSendungsreferenz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cSendungsreferenz");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingId");

                entity.Property(e => e.CVersandartName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.DVerpackt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVerpackt");

                entity.Property(e => e.DVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersendet");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.KInternePaketnummer).HasColumnName("kInternePaketnummer");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvLieferscheinposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLieferscheinposition", "Versand");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");
            });

            modelBuilder.Entity<LvLieferschwellen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLieferschwellen");

                entity.Property(e => e.Land)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Lieferschwelle).HasColumnType("decimal(9, 2)");

                entity.Property(e => e.NAktuellEur)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("nAktuellEur");

                entity.Property(e => e.NAktuellPer)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("nAktuellPer");

                entity.Property(e => e.NLetztesJahrEur)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("nLetztesJahrEur");

                entity.Property(e => e.NLetztesJahrPer)
                    .HasColumnType("decimal(9, 2)")
                    .HasColumnName("nLetztesJahrPer");

                entity.Property(e => e.RowColor)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvLogbuch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLogbuch", "FulfillmentNetwork");

                entity.Property(e => e.AnzahlGebucht).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Artikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Artikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Bestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CMessage)
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.CMessageDetails)
                    .IsUnicode(false)
                    .HasColumnName("cMessageDetails");

                entity.Property(e => e.CRequestId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRequestId");

                entity.Property(e => e.CSessionId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.DTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimestamp");

                entity.Property(e => e.FulfillmentAuftrag)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FulfillmentLager)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FulfillmentLieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KFulfillmentLog).HasColumnName("kFulfillmentLog");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.Kundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LieferantenBestellung)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NLogLevel).HasColumnName("nLogLevel");

                entity.Property(e => e.NMessageSource).HasColumnName("nMessageSource");
            });

            modelBuilder.Entity<LvLogeintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLogeintrag");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CMeldung)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
            });

            modelBuilder.Entity<LvLogsitzung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLogsitzung", "Sync");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusMeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<LvLogsitzung1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvLogsitzung", "Zahlungsabgleich");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusmeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusmeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<LvOffenePosten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvOffenePosten", "Mahnwesen");

                entity.Property(e => e.Betrag).HasColumnType("decimal(28, 4)");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.FBruttoBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBruttoBetrag");

                entity.Property(e => e.Gesamt).HasColumnType("decimal(28, 4)");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KMahnstufe).HasColumnName("kMahnstufe");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KZahlungsErinnerung).HasColumnName("kZahlungsErinnerung");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.MahnBetrag).HasColumnType("decimal(29, 4)");

                entity.Property(e => e.Mahngebuehr).HasColumnType("decimal(28, 4)");

                entity.Property(e => e.Mahnstufe)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MahnungErstellt).HasColumnType("datetime");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NaechstesZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("naechstesZahlungsziel");

                entity.Property(e => e.OffenerPosten).HasColumnType("decimal(28, 4)");

                entity.Property(e => e.RechnungZahlungsZiel).HasColumnType("datetime");

                entity.Property(e => e.Rechnungsdatum).HasColumnType("datetime");

                entity.Property(e => e.Versanddatum).HasColumnType("datetime");
            });

            modelBuilder.Entity<LvPakete>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvPakete", "Kunde");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CFulfillmentCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenter");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CSendungsreferenz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cSendungsreferenz");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingId");

                entity.Property(e => e.CVersandartName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.DVerpackt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVerpackt");

                entity.Property(e => e.DVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersendet");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KInternePaketnummer).HasColumnName("kInternePaketnummer");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.NTrackingStatus).HasColumnName("nTrackingStatus");

                entity.Property(e => e.NVersandStatus).HasColumnName("nVersandStatus");
            });

            modelBuilder.Entity<LvPickliste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvPickliste", "Versand");

                entity.Property(e => e.CAnlagebenutzer)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnlagebenutzer");

                entity.Property(e => e.CLetzterBenutzer)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLetzterBenutzer");

                entity.Property(e => e.CVorlage)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cVorlage");

                entity.Property(e => e.CWarenlagerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarenlagerName");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DLetzteBearbeitung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzteBearbeitung");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NLagerplatzVerwaltung).HasColumnName("nLagerplatzVerwaltung");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvPicklistenposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvPicklistenposition", "Versand");

                entity.Property(e => e.CAuftragArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragArtNr");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CStringStandard)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStringStandard");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");

                entity.Property(e => e.LetzterStatusBenutzername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NIstStueckliste).HasColumnName("nIstStueckliste");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<LvPosLogeintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvPosLogeintrag", "Sync");

                entity.Property(e => e.CJson)
                    .IsUnicode(false)
                    .HasColumnName("cJson");

                entity.Property(e => e.CMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KPosLogeintrag)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kPosLogeintrag");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");

                entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");

                entity.Property(e => e.NCallType).HasColumnName("nCallType");

                entity.Property(e => e.NLimit).HasColumnName("nLimit");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            });

            modelBuilder.Entity<LvPreisanfrage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvPreisanfrage", "Einkauf");

                entity.Property(e => e.CKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferadresseFirma)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseMail)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseName");

                entity.Property(e => e.CLieferadresseOrt)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseVorname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferant)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferant");

                entity.Property(e => e.CLieferantEigeneKundennummer)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantEigeneKundennummer");

                entity.Property(e => e.CLieferantFirmenZusatz)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantFirmenZusatz");

                entity.Property(e => e.CLieferantennummer)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantennummer");

                entity.Property(e => e.CPreisanfrage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPreisanfrage");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseName");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DGefaxt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGefaxt");

                entity.Property(e => e.DGemailt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGemailt");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.NBestaetigt).HasColumnName("nBestaetigt");
            });

            modelBuilder.Entity<LvPreisanfragePos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvPreisanfragePos", "Einkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferantenArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenArtNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameLief)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameLief");

                entity.Property(e => e.FAverageEkNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAverageEkNetto");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.FUst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUST");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");
            });

            modelBuilder.Entity<LvRechnungen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRechnungen", "Kunde");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CLieferadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdresszusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobilTelefon");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobilTelefon");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CUmsatzsteuerId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cUmsatzsteuerID");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMahndatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMahndatum");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DVersanddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersanddatum");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.DZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsziel");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FMahnGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahnGebuehr");

                entity.Property(e => e.FOffenerWert)
                    .HasColumnType("decimal(32, 14)")
                    .HasColumnName("fOffenerWert");

                entity.Property(e => e.FRechnungswert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRechnungswert");

                entity.Property(e => e.FRechnungswertVersandland)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fRechnungswertVersandland");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NIstAngemahnt).HasColumnName("nIstAngemahnt");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NRechnungskorrekturErstellt).HasColumnName("nRechnungskorrekturErstellt");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
            });

            modelBuilder.Entity<LvRechnungskorrekturen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRechnungskorrekturen", "Kunde");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CKurztext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKurztext");

                entity.Property(e => e.CLieferadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdresszusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobilTelefon");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobilTelefon");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRechnungskorrekturnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungskorrekturnummer");

                entity.Property(e => e.CRechnungsnummer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CText)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FMwst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwst");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<LvRechnungskorrekturposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRechnungskorrekturposition", "Verkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKBrutto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");

                entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            });

            modelBuilder.Entity<LvRechnungskorrekturverwaltung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRechnungskorrekturverwaltung", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CKunde)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKunde");

                entity.Property(e => e.CKundeBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeBundesland");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppe");

                entity.Property(e => e.CKurztext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKurztext");

                entity.Property(e => e.CLieferadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdresszusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobilTelefon");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobilTelefon");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRechnungskorrekturnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungskorrekturnummer");

                entity.Property(e => e.CRechnungsnummer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CText)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CUstId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUstId");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("numeric(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FMwst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwst");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<LvRechnungsposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRechnungsposition", "Verkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKBrutto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 4)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");

                entity.Property(e => e.KKonfigurationsVater).HasColumnName("kKonfigurationsVater");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KStuecklistenVater).HasColumnName("kStuecklistenVater");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            });

            modelBuilder.Entity<LvRechnungsverwaltung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRechnungsverwaltung", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmenname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenname");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CKunde)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKunde");

                entity.Property(e => e.CKundeBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeBundesland");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNr");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeUmsatzsteuerId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKundeUmsatzsteuerID");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppe");

                entity.Property(e => e.CLieferadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdresszusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobilTelefon");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePostId");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsadresseAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAdresszusatz");

                entity.Property(e => e.CRechnungsadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseAnrede");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobilTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobilTelefon");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadressePostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePostId");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CShopname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopname");

                entity.Property(e => e.CSonstiges)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CUmsatzsteuerId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cUmsatzsteuerID");

                entity.Property(e => e.CVersandartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartname");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartname");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMahndatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMahndatum");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DVersanddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersanddatum");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.DZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsziel");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FOffenerWert)
                    .HasColumnType("decimal(32, 14)")
                    .HasColumnName("fOffenerWert");

                entity.Property(e => e.FRechnungswert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRechnungswert");

                entity.Property(e => e.FRechnungswertVersandland)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fRechnungswertVersandland");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NIstAngemahnt).HasColumnName("nIstAngemahnt");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");

                entity.Property(e => e.NKomplettgeliefert).HasColumnName("nKomplettgeliefert");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");

                entity.Property(e => e.NRechnungskorrekturErstellt).HasColumnName("nRechnungskorrekturErstellt");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
            });

            modelBuilder.Entity<LvRetoure>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRetoure", "RM");

                entity.Property(e => e.AbholadresseCAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cAdressZusatz");

                entity.Property(e => e.AbholadresseCAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cAnrede");

                entity.Property(e => e.AbholadresseCBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cBundesland");

                entity.Property(e => e.AbholadresseCFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cFax");

                entity.Property(e => e.AbholadresseCFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cFirma");

                entity.Property(e => e.AbholadresseCIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cISO");

                entity.Property(e => e.AbholadresseCLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cLand");

                entity.Property(e => e.AbholadresseCMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cMail");

                entity.Property(e => e.AbholadresseCMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cMobil");

                entity.Property(e => e.AbholadresseCName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cName");

                entity.Property(e => e.AbholadresseCOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cOrt");

                entity.Property(e => e.AbholadresseCPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cPLZ");

                entity.Property(e => e.AbholadresseCPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cPostID");

                entity.Property(e => e.AbholadresseCStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cStrasse");

                entity.Property(e => e.AbholadresseCTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cTel");

                entity.Property(e => e.AbholadresseCTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cTitel");

                entity.Property(e => e.AbholadresseCVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cVorname");

                entity.Property(e => e.AbholadresseCZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("Abholadresse_cZusatz");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CAnsprechpartner)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartner");

                entity.Property(e => e.CBenutzer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CExternalNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExternalNumber");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFfnReturnId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFfnReturnId");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CGutschriftNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGutschriftNr");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKommentarExtern)
                    .IsUnicode(false)
                    .HasColumnName("cKommentarExtern");

                entity.Property(e => e.CKommentarIntern)
                    .IsUnicode(false)
                    .HasColumnName("cKommentarIntern");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CRetoureNr)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRetoureNr");

                entity.Property(e => e.CStatus)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingId");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.EbayUsername)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ExterneAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FAnzahlLieferschein).HasColumnName("fAnzahlLieferschein");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NHerkunft).HasColumnName("nHerkunft");

                entity.Property(e => e.Warenlager)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvRetourePosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRetourePosition", "RM");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CGrundKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cGrundKommentar");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CZustandKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cZustandKommentar");

                entity.Property(e => e.DVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersendet");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FAnzahlLieferschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlLieferschein");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.Grund)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NGutschreiben).HasColumnName("nGutschreiben");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ungebucht).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.Zustand)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvRetouren>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRetouren", "Kunde");

                entity.Property(e => e.BestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CRetoureNr)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRetoureNr");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.Firma)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.NStatusTyp).HasColumnName("nStatusTyp");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Warenlagername)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LvRueckstandserinnerung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRueckstandserinnerung", "Einkauf");

                entity.Property(e => e.CBestellungInternerKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cBestellungInternerKommentar");

                entity.Property(e => e.CBestellungLieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBestellungLieferant");

                entity.Property(e => e.CEigeneBestellnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneBestellnummer");

                entity.Property(e => e.DBestellungErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestellungErstellt");

                entity.Property(e => e.DBestellungExportiert)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestellungExportiert");

                entity.Property(e => e.DBestellungGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestellungGedruckt");

                entity.Property(e => e.DBestellungGefaxt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestellungGefaxt");

                entity.Property(e => e.DBestellungGemailt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestellungGemailt");

                entity.Property(e => e.DBestellungLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestellungLieferdatum");

                entity.Property(e => e.DErinnerungDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErinnerungDatum");

                entity.Property(e => e.FBetragNetto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fBetragNetto");

                entity.Property(e => e.KBestellungLieferant).HasColumnName("kBestellungLieferant");

                entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");

                entity.Property(e => e.NBestellungStatus).HasColumnName("nBestellungStatus");
            });

            modelBuilder.Entity<LvRueckstandserinnerungLieferanten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRueckstandserinnerungLieferanten", "Einkauf");

                entity.Property(e => e.CBestellungLieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBestellungLieferant");

                entity.Property(e => e.KBestellungLieferant).HasColumnName("kBestellungLieferant");
            });

            modelBuilder.Entity<LvRueckstandserinnerungsposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvRueckstandserinnerungsposition", "Einkauf");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferantenArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenArtNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FEknettoGesamt)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fEKNettoGesamt");

                entity.Property(e => e.FUst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUST");

                entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");
            });

            modelBuilder.Entity<LvUmsatzuebersicht>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvUmsatzuebersicht", "Zahlungsabgleich");

                entity.Property(e => e.CAbgleichsbenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbgleichsbenutzername");

                entity.Property(e => e.CInternerKommentar)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CKonto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CKontozusatz)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKontozusatz");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTransaktionId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTransaktionID");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DAbgleichszeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbgleichszeitpunkt");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.FSummeZahlungszuweisungen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fSummeZahlungszuweisungen");

                entity.Property(e => e.KAbgleichsbenutzer).HasColumnName("kAbgleichsbenutzer");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");

                entity.Property(e => e.NAnzahlZahlungszuweisungen).HasColumnName("nAnzahlZahlungszuweisungen");

                entity.Property(e => e.NBuchungstyp).HasColumnName("nBuchungstyp");

                entity.Property(e => e.NSichtbar).HasColumnName("nSichtbar");
            });

            modelBuilder.Entity<LvVcsselfInvoiceLogeintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvVCSSelfInvoiceLogeintrag", "Amazon");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.KVcsselfInvoiceLogeintrag)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kVCSSelfInvoiceLogeintrag");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
            });

            modelBuilder.Entity<LvWiederkehrendeAuftraegeVerwaltung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvWiederkehrendeAuftraegeVerwaltung", "Verkauf");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DEnddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnddatum");

                entity.Property(e => e.DStartdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartdatum");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fWert");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KIntervall).HasColumnName("kIntervall");

                entity.Property(e => e.NAmMonatsende).HasColumnName("nAmMonatsende");

                entity.Property(e => e.NJahre).HasColumnName("nJahre");

                entity.Property(e => e.NMonate).HasColumnName("nMonate");

                entity.Property(e => e.NTage).HasColumnName("nTage");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<LvWiederkehrenderAuftragPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvWiederkehrenderAuftragPosition", "Verkauf");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKBrutto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KIntervall).HasColumnName("kIntervall");

                entity.Property(e => e.KIntervallPos).HasColumnName("kIntervallPos");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnzahl");
            });

            modelBuilder.Entity<LvZahlung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvZahlung", "Zahlungsabgleich");

                entity.Property(e => e.CBenutzerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerName");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CExterneTransaktionsid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExterneTransaktionsid");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CRechnungsFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsFirma");

                entity.Property(e => e.CRechnungsName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsName");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CRechnungsOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsOrt");

                entity.Property(e => e.CRechnungsPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsPLZ");

                entity.Property(e => e.CRechnungsStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsStrasse");

                entity.Property(e => e.CRechnungsVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsVorname");

                entity.Property(e => e.CSkrmanuell)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSKRManuell");

                entity.Property(e => e.CUmsatzTransaktionsid)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cUmsatzTransaktionsid");

                entity.Property(e => e.CUmsatzVerwendungszweck)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cUmsatzVerwendungszweck");

                entity.Property(e => e.CZahlungsartName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartName");

                entity.Property(e => e.CZuweisungsinfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cZuweisungsinfo");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KZahlung).HasColumnName("kZahlung");

                entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NIstAnzahlung).HasColumnName("nIstAnzahlung");

                entity.Property(e => e.NIstKeinExport).HasColumnName("nIstKeinExport");

                entity.Property(e => e.NZahlungstyp).HasColumnName("nZahlungstyp");

                entity.Property(e => e.NZuweisungstyp).HasColumnName("nZuweisungstyp");

                entity.Property(e => e.NZuweisungswertung).HasColumnName("nZuweisungswertung");
            });

            modelBuilder.Entity<LvZahlungsabgleichLogeintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvZahlungsabgleichLogeintrag", "Zahlungsabgleich");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KZahlungsabgleichLogeintrag)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kZahlungsabgleichLogeintrag");

                entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            });

            modelBuilder.Entity<LvZahlungsausgangLogeintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvZahlungsausgangLogeintrag", "Zahlungsabgleich");

                entity.Property(e => e.CAnlagebenutzerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnlagebenutzerName");

                entity.Property(e => e.CBuchungsbenutzerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuchungsbenutzerName");

                entity.Property(e => e.CGutschriftNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGutschriftNr");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.DAnlagedatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnlagedatum");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");

                entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.KZahlungsausgangLogeintrag).HasColumnName("kZahlungsausgangLogeintrag");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            });

            modelBuilder.Entity<LvZahlungsausganguebersicht>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvZahlungsausganguebersicht", "Zahlungsabgleich");

                entity.Property(e => e.CInternerKommentar)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CKonto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CKontozusatz)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKontozusatz");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTransaktionId)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cTransaktionID");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DAnlagedatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnlagedatum");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");

                entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KZahlungAusgang).HasColumnName("kZahlungAusgang");

                entity.Property(e => e.KZahlungEingang).HasColumnName("kZahlungEingang");

                entity.Property(e => e.KZahlungsabgleichAusgang)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kZahlungsabgleichAusgang");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.KZahlungsabgleichUmsatzAusgang).HasColumnName("kZahlungsabgleichUmsatzAusgang");

                entity.Property(e => e.KZahlungsabgleichUmsatzEingang).HasColumnName("kZahlungsabgleichUmsatzEingang");

                entity.Property(e => e.NVollstaendigerReferenzbetrag).HasColumnName("nVollstaendigerReferenzbetrag");
            });

            modelBuilder.Entity<LvZahlungszuordnung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lvZahlungszuordnung", "Zahlungsabgleich");

                entity.Property(e => e.CBestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellnummer");

                entity.Property(e => e.CEbayBuyerUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayBuyerUserId");

                entity.Property(e => e.CExterneBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExterneBestellNr");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundennummer");

                entity.Property(e => e.CLieferscheinnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinnummer");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZahlungsartbezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartbezeichnung");

                entity.Property(e => e.DBestelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestelldatum");

                entity.Property(e => e.DRechnungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dRechnungsdatum");

                entity.Property(e => e.FAuftragswert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswert");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.FMahngebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahngebuehr");

                entity.Property(e => e.FOffenerWert)
                    .HasColumnType("decimal(31, 14)")
                    .HasColumnName("fOffenerWert");

                entity.Property(e => e.FSkontowertInProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkontowertInProzent");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");
            });

            modelBuilder.Entity<Parcels>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Parcels", "Report");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum des Pakets");

                entity.Property(e => e.CustomerReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Kundenreferenz");

                entity.Property(e => e.DeliveryNoteInternalId).HasComment("Interne ID des Lieferscheins");

                entity.Property(e => e.IdentCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("IdentCode des Pakets");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Pakets");

                entity.Property(e => e.IsShippingParcel).HasComment("Gibt an, ob es sich um ein Shippingpaket handelt");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Hinweis zum Paket");

                entity.Property(e => e.ShipmentReference)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Sendungsreferenz");

                entity.Property(e => e.ShippingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum des Versands des Pakets");

                entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart des Pakets");

                entity.Property(e => e.ShippingServiceProviderName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Name des Logistikers");

                entity.Property(e => e.TrackingUrl)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("TrackingURL")
                    .HasComment("Tracking-URL");

                entity.Property(e => e.Weight)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Gewicht des Pakets");
            });

            modelBuilder.Entity<PaymentMethod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PaymentMethod", "Report");

                entity.Property(e => e.Account)
                    .HasMaxLength(32)
                    .IsUnicode(false);

                entity.Property(e => e.CashDiscount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentOption)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PfAmazonAngebot>(entity =>
            {
                entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_angebot");

                entity.HasIndex(e => e.CAsin1, "IX_pf_amazon_angebot_cASIN1");

                entity.HasIndex(e => e.CItemName, "IX_pf_amazon_angebot_cItemName");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_angebot_kUser");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.CAsin1)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cASIN1");

                entity.Property(e => e.CAsin2)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cASIN2");

                entity.Property(e => e.CAsin3)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cASIN3");

                entity.Property(e => e.CExpeditedShipping)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cExpeditedShipping");

                entity.Property(e => e.CFulfillmentChannel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentChannel");

                entity.Property(e => e.CItemIsMarketplace)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cItemIsMarketplace");

                entity.Property(e => e.CItemName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemName");

                entity.Property(e => e.CListingId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cListingId");

                entity.Property(e => e.CProductId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cProductId");

                entity.Property(e => e.DOpenDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dOpenDate");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.NChangedPrice).HasColumnName("nChangedPrice");

                entity.Property(e => e.NChangedQuantity).HasColumnName("nChangedQuantity");

                entity.Property(e => e.NItemCondition).HasColumnName("nItemCondition");

                entity.Property(e => e.NProductIdType).HasColumnName("nProductIdType");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NWillShipInternationally).HasColumnName("nWillShipInternationally");
            });

            modelBuilder.Entity<PfAmazonAngebotExt>(entity =>
            {
                entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_angebot_ext");

                entity.HasIndex(e => e.CSellerSku, "IX_pf_amazon_angebot_ext_cSellerSKU");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_angebot_ext_kUser");

                entity.HasIndex(e => e.NPlattform, "IX_pf_amazon_angebot_ext_nPlattform");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.CConditionNote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cConditionNote");

                entity.Property(e => e.CFulfillmentChannel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentChannel");

                entity.Property(e => e.CNameSeller1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameSeller1");

                entity.Property(e => e.DLastSwitchFulfillmentTo)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastSwitchFulfillmentTo");

                entity.Property(e => e.DLetzteBearbeitungszeitAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzteBearbeitungszeitAenderung");

                entity.Property(e => e.DLetzteBestandAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzteBestandAenderung");

                entity.Property(e => e.DLetztePreisAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetztePreisAenderung");

                entity.Property(e => e.DLetzteTaxShippingAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzteTaxShippingAenderung");

                entity.Property(e => e.DLetzteVersandAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzteVersandAenderung");

                entity.Property(e => e.DLetztesApaupdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetztesAPAUpdate");

                entity.Property(e => e.DRestockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dRestockDate");

                entity.Property(e => e.DSaleEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("dSaleEnd");

                entity.Property(e => e.DSaleStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dSaleStart");

                entity.Property(e => e.DSellerdaten)
                    .HasColumnType("datetime")
                    .HasColumnName("dSellerdaten");

                entity.Property(e => e.FApamaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAMaxPreis");

                entity.Property(e => e.FApaminPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAMinPreis");

                entity.Property(e => e.FApapreisabstand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAPreisabstand");

                entity.Property(e => e.FApapreisabstandFba)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAPreisabstandFBA");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.FPreisSeller1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisSeller1");

                entity.Property(e => e.FSalePrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSalePrice");

                entity.Property(e => e.FVersandSeller1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandSeller1");

                entity.Property(e => e.FVersandkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandkosten");

                entity.Property(e => e.KAmazonVersandgruppe).HasColumnName("kAmazonVersandgruppe");

                entity.Property(e => e.KSteuercode).HasColumnName("kSteuercode");

                entity.Property(e => e.NApanutzen).HasColumnName("nAPANutzen");

                entity.Property(e => e.NApapruefIntervall).HasColumnName("nAPAPruefIntervall");

                entity.Property(e => e.NApasellerPositiveFeedbackRating).HasColumnName("nAPASellerPositiveFeedbackRating");

                entity.Property(e => e.NApashippingTime).HasColumnName("nAPAShippingTime");

                entity.Property(e => e.NApaupdate).HasColumnName("nAPAUpdate");

                entity.Property(e => e.NB2bpreiseSenden).HasColumnName("nB2BPreiseSenden");

                entity.Property(e => e.NBearbeitungsZeit).HasColumnName("nBearbeitungsZeit");

                entity.Property(e => e.NConditionNoteChanged).HasColumnName("nConditionNoteChanged");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NDeleteB2bpreis).HasColumnName("nDeleteB2BPreis");

                entity.Property(e => e.NIstApapreisabstandFbaprozentual).HasColumnName("nIstAPAPreisabstandFBAProzentual");

                entity.Property(e => e.NIstApapreisabstandProzentual).HasColumnName("nIstAPAPreisabstandProzentual");

                entity.Property(e => e.NLetzteBearbeitungsZeit).HasColumnName("nLetzteBearbeitungsZeit");

                entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");

                entity.Property(e => e.NSwitchFulfillmentTo).HasColumnName("nSwitchFulfillmentTo");

                entity.Property(e => e.NUseApaglobal).HasColumnName("nUseAPAGlobal");

                entity.Property(e => e.NVerkaufsrang).HasColumnName("nVerkaufsrang");
            });

            modelBuilder.Entity<PfAmazonAngebotFba>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_amazon_angebot_fba");

                entity.HasIndex(e => new { e.CSellerSku, e.CWarehouseConditionType }, "IX_pf_amazon_angebot_fba_cSellerSKU_cWarehouseConditionType_INCL");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_angebot_fba_kUser");

                entity.Property(e => e.CConditionType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cConditionType");

                entity.Property(e => e.CFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFNSKU");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.CWarehouseConditionType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cWarehouseConditionType");

                entity.Property(e => e.FVolume)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVolume");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NQtyInboundShipped).HasColumnName("nQtyInboundShipped");

                entity.Property(e => e.NQtyInboundWorking).HasColumnName("nQtyInboundWorking");

                entity.Property(e => e.NQtyReceiving).HasColumnName("nQtyReceiving");

                entity.Property(e => e.NQtyReserved).HasColumnName("nQtyReserved");

                entity.Property(e => e.NQtyTotal).HasColumnName("nQtyTotal");

                entity.Property(e => e.NQtyUnsellable).HasColumnName("nQtyUnsellable");

                entity.Property(e => e.NQtyWarehouse).HasColumnName("nQtyWarehouse");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            });

            modelBuilder.Entity<PfAmazonAngebotMapping>(entity =>
            {
                entity.HasKey(e => new { e.CSellerSku, e.KUser });

                entity.ToTable("pf_amazon_angebot_mapping");

                entity.HasIndex(e => e.KArtikel, "pf_amazon_angebot_mapping_kArtikel");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<PfAmazonAngebotNeu>(entity =>
            {
                entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_angebot_neu");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.CConditionNote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cConditionNote");

                entity.Property(e => e.CLetzterFehler)
                    .IsUnicode(false)
                    .HasColumnName("cLetzterFehler");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CProductId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cProductId");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGesendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dGesendet");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.KAmazonVersandgruppe).HasColumnName("kAmazonVersandgruppe");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");

                entity.Property(e => e.NCondition).HasColumnName("nCondition");

                entity.Property(e => e.NFulfillmentChannel).HasColumnName("nFulfillmentChannel");

                entity.Property(e => e.NMaxBestand).HasColumnName("nMaxBestand");

                entity.Property(e => e.NProductIdType).HasColumnName("nProductIdType");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonAngebotNeuSettings>(entity =>
            {
                entity.HasKey(e => new { e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_angebot_neu_settings");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.CCondition1)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition1");

                entity.Property(e => e.CCondition10)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition10");

                entity.Property(e => e.CCondition11)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition11");

                entity.Property(e => e.CCondition2)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition2");

                entity.Property(e => e.CCondition3)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition3");

                entity.Property(e => e.CCondition4)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition4");

                entity.Property(e => e.CCondition5)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition5");

                entity.Property(e => e.CCondition6)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition6");

                entity.Property(e => e.CCondition7)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition7");

                entity.Property(e => e.CCondition8)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition8");

                entity.Property(e => e.CCondition9)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cCondition9");

                entity.Property(e => e.NCondition).HasColumnName("nCondition");

                entity.Property(e => e.NStandard)
                    .HasColumnName("nStandard")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PfAmazonAngebotSelbstErstellt>(entity =>
            {
                entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_angebot_selbstErstellt");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KUser)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonAngebotVater>(entity =>
            {
                entity.HasKey(e => new { e.CSellerSku, e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_angebot_vater");

                entity.HasIndex(e => e.CSellerSku, "IX_pf_amazon_angebot_vater_cSellerSKU");

                entity.HasIndex(e => e.CSellerSkuvater, "IX_pf_amazon_angebot_vater_cSellerSKUVater");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.CSellerSkuvater)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKUVater");
            });

            modelBuilder.Entity<PfAmazonApaPreis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_amazon_apa_preis");

                entity.HasIndex(e => e.CSellerSku, "IX_pf_amazon_apa_preis_cSellerSKU");

                entity.HasIndex(e => e.DErstellt, "IX_pf_amazon_apa_preis_dErstellt");

                entity.HasIndex(e => e.NPlattform, "IX_pf_amazon_apa_preis_nPlattform");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<PfAmazonApaUsersettings>(entity =>
            {
                entity.HasKey(e => new { e.KUser, e.NPlattform });

                entity.ToTable("pf_amazon_apa_usersettings");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.FApapreisabstand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAPreisabstand");

                entity.Property(e => e.FApapreisabstandFba)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAPreisabstandFBA");

                entity.Property(e => e.NApasellerPositiveFeedbackRating).HasColumnName("nAPASellerPositiveFeedbackRating");

                entity.Property(e => e.NApashippingTime).HasColumnName("nAPAShippingTime");

                entity.Property(e => e.NIstApapreisabstandFbaprozentual).HasColumnName("nIstAPAPreisabstandFBAProzentual");

                entity.Property(e => e.NIstApapreisabstandProzentual).HasColumnName("nIstAPAPreisabstandProzentual");
            });

            modelBuilder.Entity<PfAmazonBestandAnDatum>(entity =>
            {
                entity.HasKey(e => new { e.KUser, e.CSellerSku, e.DErstellt });

                entity.ToTable("pf_amazon_BestandAnDatum");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");
            });

            modelBuilder.Entity<PfAmazonBestellung>(entity =>
            {
                entity.HasKey(e => e.KAmazonBestellung);

                entity.ToTable("pf_amazon_bestellung");

                entity.HasIndex(e => e.CBuyerName, "IX_pf_amazon_bestellung_cBuyerName");

                entity.HasIndex(e => e.COrderId, "IX_pf_amazon_bestellung_cOrderId");

                entity.HasIndex(e => e.CRecipientName, "IX_pf_amazon_bestellung_cRecipientName");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_bestellung_kUser");

                entity.HasIndex(e => e.NStatus, "IX_pf_amazon_bestellung_nStatus");

                entity.HasIndex(e => e.KMessageId, "UQ_pf_amazon_bestellung_kMessageId")
                    .IsUnique();

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.CBillAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillAddress1");

                entity.Property(e => e.CBillAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillAddress2");

                entity.Property(e => e.CBillAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillAddress3");

                entity.Property(e => e.CBillCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBillCity");

                entity.Property(e => e.CBillCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cBillCountry");

                entity.Property(e => e.CBillPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBillPostalCode");

                entity.Property(e => e.CBillState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBillState");

                entity.Property(e => e.CBuyerEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerEmail");

                entity.Property(e => e.CBuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerName");

                entity.Property(e => e.CBuyerPhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBuyerPhoneNumber");

                entity.Property(e => e.CCurrency)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cCurrency");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CItemPromotionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemPromotionId");

                entity.Property(e => e.CKundenauftragsnummer)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cKundenauftragsnummer");

                entity.Property(e => e.CMerchantOrderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMerchantOrderId");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.COrderStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderStatus");

                entity.Property(e => e.CRecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRecipientName");

                entity.Property(e => e.CSalesChannel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSalesChannel");

                entity.Property(e => e.CShipAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress1");

                entity.Property(e => e.CShipAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress2");

                entity.Property(e => e.CShipAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipAddress3");

                entity.Property(e => e.CShipCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipCity");

                entity.Property(e => e.CShipCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cShipCountry");

                entity.Property(e => e.CShipPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipPhoneNumber");

                entity.Property(e => e.CShipPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cShipPostalCode");

                entity.Property(e => e.CShipPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShipPromotionId");

                entity.Property(e => e.CShipServiceLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cShipServiceLevel");

                entity.Property(e => e.CShipState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipState");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO");

                entity.Property(e => e.DErrorErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErrorErstellt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DPaymentsDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dPaymentsDate");

                entity.Property(e => e.DPurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dPurchaseDate");

                entity.Property(e => e.DShipmentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dShipmentDate");

                entity.Property(e => e.FItemPromotionDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fItemPromotionDiscount");

                entity.Property(e => e.FShipPromotionDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fShipPromotionDiscount");

                entity.Property(e => e.FVersandkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandkosten");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NB2b).HasColumnName("nB2B");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NFba).HasColumnName("nFBA");

                entity.Property(e => e.NIsAmazonInvoice).HasColumnName("nIsAmazonInvoice");

                entity.Property(e => e.NPrime).HasColumnName("nPrime");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonBestellungStorno>(entity =>
            {
                entity.HasKey(e => e.KAmazonBestellungStorno);

                entity.ToTable("pf_amazon_bestellung_storno");

                entity.HasIndex(e => e.COrderId, "IX_pf_amazon_bestellung_storno_cOrderId");

                entity.Property(e => e.KAmazonBestellungStorno).HasColumnName("kAmazonBestellungStorno");

                entity.Property(e => e.COrderId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.DBearbeitet)
                    .HasColumnType("datetime")
                    .HasColumnName("dBearbeitet");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NCancelReason).HasColumnName("nCancelReason");
            });

            modelBuilder.Entity<PfAmazonBestellungVersand>(entity =>
            {
                entity.HasKey(e => e.KAmazonBestellungVersand);

                entity.ToTable("pf_amazon_bestellung_versand");

                entity.HasIndex(e => e.DBearbeitet, "IX_pf_amazon_bestellung_versand_dBearbeitet");

                entity.HasIndex(e => e.KAmazonBestellungPos, "IX_pf_amazon_bestellung_versand_kAmazonBestellungPos");

                entity.HasIndex(e => e.KLieferschein, "IX_pf_amazon_bestellung_versand_kLieferschein");

                entity.Property(e => e.KAmazonBestellungVersand).HasColumnName("kAmazonBestellungVersand");

                entity.Property(e => e.CCarrierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCarrierCode");

                entity.Property(e => e.CCarrierName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCarrierName");

                entity.Property(e => e.CShipMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShipMethod");

                entity.Property(e => e.CTrackingNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingNumber");

                entity.Property(e => e.DBearbeitet)
                    .HasColumnType("datetime")
                    .HasColumnName("dBearbeitet");

                entity.Property(e => e.DShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dShipDate");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.NQuantity).HasColumnName("nQuantity");
            });

            modelBuilder.Entity<PfAmazonBestellungpos>(entity =>
            {
                entity.HasKey(e => e.KAmazonBestellungPos);

                entity.ToTable("pf_amazon_bestellungpos");

                entity.HasIndex(e => e.CArtNr, "IX_pf_amazon_bestellungpos_cArtNr");

                entity.HasIndex(e => e.CName, "IX_pf_amazon_bestellungpos_cName");

                entity.HasIndex(e => e.KAmazonBestellung, "IX_pf_amazon_bestellungpos_kAmazonBestellung");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CCarrier)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cCarrier");

                entity.Property(e => e.CCustomJson)
                    .IsUnicode(false)
                    .HasColumnName("cCustomJson");

                entity.Property(e => e.CCustomUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustomUrl");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CFulfillmentCenterId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenterId");

                entity.Property(e => e.CFulfillmentChannel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentChannel");

                entity.Property(e => e.CGeschenkverpackungTyp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGeschenkverpackungTyp");

                entity.Property(e => e.CGrusstext)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGrusstext");

                entity.Property(e => e.CMerchantOrderItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMerchantOrderItemId");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.CShipCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cShipCountry");

                entity.Property(e => e.CTrackingNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingNumber");

                entity.Property(e => e.DErrorErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErrorErstellt");

                entity.Property(e => e.DEstimatedArrivalDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dEstimatedArrivalDate");

                entity.Property(e => e.FGeschenkverpackungKosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGeschenkverpackungKosten")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.FItemPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fItemPrice");

                entity.Property(e => e.FItemTax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fItemTax");

                entity.Property(e => e.FPreisNetto)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("fPreisNetto");

                entity.Property(e => e.FShippingPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fShippingPrice");

                entity.Property(e => e.FShippingTax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fShippingTax");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");

                entity.Property(e => e.NCustom).HasColumnName("nCustom");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NGeschenk).HasColumnName("nGeschenk");

                entity.Property(e => e.NQuantityPurchased).HasColumnName("nQuantityPurchased");

                entity.Property(e => e.NVersandt).HasColumnName("nVersandt");
            });

            modelBuilder.Entity<PfAmazonBestellungstatus>(entity =>
            {
                entity.HasKey(e => new { e.KMessageId, e.KUser });

                entity.ToTable("pf_amazon_bestellungstatus");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.COrderStatus)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderStatus");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");
            });

            modelBuilder.Entity<PfAmazonComboboxImage>(entity =>
            {
                entity.HasKey(e => e.KImage);

                entity.ToTable("pf_amazon_combobox_image");

                entity.Property(e => e.KImage).HasColumnName("kImage");

                entity.Property(e => e.CEnumToString)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cEnumToString");

                entity.Property(e => e.CPk)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cPK");

                entity.Property(e => e.CText)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.OImage)
                    .HasColumnType("image")
                    .HasColumnName("oImage");
            });

            modelBuilder.Entity<PfAmazonDotLiquidMapping>(entity =>
            {
                entity.HasKey(e => e.KDotLiquidMapping);

                entity.ToTable("pf_amazon_DotLiquidMapping");

                entity.Property(e => e.KDotLiquidMapping).HasColumnName("kDotLiquidMapping");

                entity.Property(e => e.CKey)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.CValue)
                    .IsRequired()
                    .HasColumnName("cValue");

                entity.Property(e => e.KGroup).HasColumnName("kGroup");
            });

            modelBuilder.Entity<PfAmazonFbaKommentar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_amazon_fba_kommentar");

                entity.Property(e => e.CFbakommentar)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cFBAKommentar");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KUser).HasColumnName("kUser");
            });

            modelBuilder.Entity<PfAmazonFeederror>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_amazon_feederror");

                entity.HasIndex(e => e.CSku, "IX_pf_amazon_feederror_cSKU");

                entity.HasIndex(e => e.DErstellt, "IX_pf_amazon_feederror_dErstellt");

                entity.Property(e => e.CAbhilfe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbhilfe");

                entity.Property(e => e.CErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CErrorType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cErrorType");

                entity.Property(e => e.CFeedType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cFeedType");

                entity.Property(e => e.CSku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cSKU");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<PfAmazonGroup>(entity =>
            {
                entity.HasKey(e => e.KGroup);

                entity.ToTable("pf_amazon_group");

                entity.Property(e => e.KGroup).HasColumnName("kGroup");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.NAktiv)
                    .HasColumnName("nAktiv")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PfAmazonItem>(entity =>
            {
                entity.HasKey(e => e.KItem);

                entity.ToTable("pf_amazon_Item");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.CErrorHilfeText)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorHilfeText");

                entity.Property(e => e.CErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CSku)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cSKU");

                entity.Property(e => e.DErrorErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErrorErstellt");

                entity.Property(e => e.DLastTransmission)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastTransmission");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KGroup).HasColumnName("kGroup");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NRemoveBeschreibungsHtml).HasColumnName("nRemoveBeschreibungsHtml");

                entity.Property(e => e.NReplaceLineBreaks)
                    .HasColumnName("nReplaceLineBreaks")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonItemMapping>(entity =>
            {
                entity.HasKey(e => e.KItemMapping);

                entity.ToTable("pf_amazon_ItemMapping");

                entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_external_product_id");

                entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_external_product_id_type");

                entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_item_sku");

                entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_parent_child");

                entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_parent_sku");

                entity.HasIndex(e => e.KItem, "JTL_IX_pf_amazon_itemmapping_cKey_standard_price");

                entity.Property(e => e.KItemMapping).HasColumnName("kItemMapping");

                entity.Property(e => e.CKey)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.CValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KItem).HasColumnName("kItem");
            });

            modelBuilder.Entity<PfAmazonLagerbewegung>(entity =>
            {
                entity.HasKey(e => e.KAmazonLagerbewegung);

                entity.ToTable("pf_amazon_lagerbewegung");

                entity.HasIndex(e => e.CFulfillmentCenter, "IX_pf_amazon_lagerbewegung_cFulfillmentCenter");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_lagerbewegung_kUser_kMessageId");

                entity.Property(e => e.KAmazonLagerbewegung).HasColumnName("kAmazonLagerbewegung");

                entity.Property(e => e.CFulfillmentCenter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenter");

                entity.Property(e => e.CTransactionType)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionType");

                entity.Property(e => e.DSnapshot)
                    .HasColumnType("datetime")
                    .HasColumnName("dSnapshot");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NMenge).HasColumnName("nMenge");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonLogZuordnen>(entity =>
            {
                entity.HasKey(e => e.DErstellt);

                entity.ToTable("pf_amazon_log_zuordnen");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.CNachricht)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNachricht");
            });

            modelBuilder.Entity<PfAmazonMappingAmazonVariationen>(entity =>
            {
                entity.HasKey(e => e.KMappingAmazonVariationen);

                entity.ToTable("pf_amazon_Mapping_AmazonVariationen");

                entity.Property(e => e.KMappingAmazonVariationen).HasColumnName("kMapping_AmazonVariationen");

                entity.Property(e => e.CDisplayName50)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_50");

                entity.Property(e => e.CDisplayName51)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_51");

                entity.Property(e => e.CDisplayName52)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_52");

                entity.Property(e => e.CDisplayName53)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_53");

                entity.Property(e => e.CDisplayName54)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_54");

                entity.Property(e => e.CDisplayName55)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_55");

                entity.Property(e => e.CDisplayName56)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_56");

                entity.Property(e => e.CDisplayName57)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName_57");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<PfAmazonMappingItemsToVariationTheme>(entity =>
            {
                entity.HasKey(e => e.KMappingItemsToVariationTheme);

                entity.ToTable("pf_amazon_Mapping_ItemsToVariationTheme");

                entity.Property(e => e.KMappingItemsToVariationTheme).HasColumnName("kMapping_ItemsToVariationTheme");

                entity.Property(e => e.KMappingAmazonVariationen).HasColumnName("kMapping_AmazonVariationen");

                entity.Property(e => e.KMappingVariationThemes).HasColumnName("kMapping_VariationThemes");
            });

            modelBuilder.Entity<PfAmazonMappingVariationThemes>(entity =>
            {
                entity.HasKey(e => e.KMappingVariationThemes);

                entity.ToTable("pf_amazon_Mapping_VariationThemes");

                entity.Property(e => e.KMappingVariationThemes).HasColumnName("kMapping_VariationThemes");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<PfAmazonMappingVariationsnamen>(entity =>
            {
                entity.HasKey(e => e.KMappingVariationsnamen);

                entity.ToTable("pf_amazon_Mapping_Variationsnamen");

                entity.Property(e => e.KMappingVariationsnamen).HasColumnName("kMapping_Variationsnamen");

                entity.Property(e => e.CWawiVariation)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cWawiVariation");

                entity.Property(e => e.KMappingAmazonVariationen).HasColumnName("kMapping_AmazonVariationen");
            });

            modelBuilder.Entity<PfAmazonMappingVariationswerte>(entity =>
            {
                entity.HasKey(e => e.KMappingVariationswerte);

                entity.ToTable("pf_amazon_Mapping_Variationswerte");

                entity.Property(e => e.KMappingVariationswerte).HasColumnName("kMapping_Variationswerte");

                entity.Property(e => e.CAmazonValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cAmazonValue");

                entity.Property(e => e.CValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KGroup).HasColumnName("kGroup");
            });

            modelBuilder.Entity<PfAmazonQueue>(entity =>
            {
                entity.HasKey(e => e.KAmazonQueue);

                entity.ToTable("pf_amazon_queue");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_queue_kUser");

                entity.Property(e => e.KAmazonQueue).HasColumnName("kAmazonQueue");

                entity.Property(e => e.CFeed)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFeed");

                entity.Property(e => e.CValue)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGesendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dGesendet");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NKey).HasColumnName("nKey");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonRepricehistory>(entity =>
            {
                entity.HasKey(e => e.KMessage);

                entity.ToTable("pf_amazon_repricehistory");

                entity.Property(e => e.KMessage)
                    .ValueGeneratedNever()
                    .HasColumnName("kMessage");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FPreisAlt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisAlt");

                entity.Property(e => e.FPreisNeu)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisNeu");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<PfAmazonRetourmeldung>(entity =>
            {
                entity.HasKey(e => e.KAmazonRetourMeldung);

                entity.ToTable("pf_amazon_retourmeldung");

                entity.HasIndex(e => e.DBearbeitet, "IX_dBearbeitet");

                entity.Property(e => e.KAmazonRetourMeldung)
                    .ValueGeneratedNever()
                    .HasColumnName("kAmazonRetourMeldung");

                entity.Property(e => e.CAdjustmentReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cAdjustmentReason");

                entity.Property(e => e.CCancelReason)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cCancelReason");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderID");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.DBearbeitet)
                    .HasColumnType("datetime")
                    .HasColumnName("dBearbeitet");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");
            });

            modelBuilder.Entity<PfAmazonRetourmeldungadjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_amazon_retourmeldungadjustment");

                entity.HasIndex(e => e.KAmazonRetourMeldung, "IX_kAmazonRetourMeldung");

                entity.Property(e => e.CCurrency)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cCurrency");

                entity.Property(e => e.CItemPriceAdjustmentType)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cItemPriceAdjustmentType");

                entity.Property(e => e.CPromotionClaimCode)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cPromotionClaimCode");

                entity.Property(e => e.FAmount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmount");

                entity.Property(e => e.KAmazonRetourMeldung).HasColumnName("kAmazonRetourMeldung");
            });

            modelBuilder.Entity<PfAmazonRetourpos>(entity =>
            {
                entity.HasKey(e => e.KAmazonRetourPos);

                entity.ToTable("pf_amazon_retourpos");

                entity.HasIndex(e => new { e.CSellerSku, e.COrderId }, "IX_pf_amazon_retourpos_cSellerSKU_cOrderID");

                entity.HasIndex(e => e.KUser, "IX_pf_amazon_retourpos_kUser_kMessageId");

                entity.Property(e => e.KAmazonRetourPos).HasColumnName("kAmazonRetourPos");

                entity.Property(e => e.CArtikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelname");

                entity.Property(e => e.CArtikelzustand)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelzustand");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CFehler)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cFehler");

                entity.Property(e => e.CFremdSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cFremdSKU");

                entity.Property(e => e.CFulfillmentCenter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenter");

                entity.Property(e => e.CFulfillmentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentId");

                entity.Property(e => e.CKundenkommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundenkommentar");

                entity.Property(e => e.CLicencePlateNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLicencePlateNumber");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.COrderItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemCode");

                entity.Property(e => e.CRueckgabegrund)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRueckgabegrund");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.DEingelesen)
                    .HasColumnType("datetime")
                    .HasColumnName("dEingelesen");

                entity.Property(e => e.DRetourzeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dRetourzeit");

                entity.Property(e => e.FAmountPerItem)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("fAmountPerItem");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KSettlementPos).HasColumnName("kSettlementPos");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NGutschriftStatus).HasColumnName("nGutschriftStatus");

                entity.Property(e => e.NMenge).HasColumnName("nMenge");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<PfAmazonSettlement>(entity =>
            {
                entity.HasKey(e => e.KMessageId);

                entity.ToTable("pf_amazon_settlement");

                entity.HasIndex(e => e.SettlementId, "IX_pf_amazon_settlement_SettlementID");

                entity.Property(e => e.KMessageId)
                    .ValueGeneratedNever()
                    .HasColumnName("kMessageId");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.SettlementEndDate).HasColumnType("datetime");

                entity.Property(e => e.SettlementId).HasColumnName("SettlementID");

                entity.Property(e => e.SettlementStartDate).HasColumnType("datetime");

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<PfAmazonSettlementpos>(entity =>
            {
                entity.HasKey(e => e.KMessageId);

                entity.ToTable("pf_amazon_settlementpos");

                entity.HasIndex(e => e.OrderId, "IX_pf_amazon_settlementpos_OrderID");

                entity.HasIndex(e => e.OrderItemCode, "IX_pf_amazon_settlementpos_OrderItemCode");

                entity.HasIndex(e => e.Sku, "IX_pf_amazon_settlementpos_SKUD");

                entity.HasIndex(e => e.SettlementId, "IX_pf_amazon_settlementpos_SettlementID");

                entity.Property(e => e.KMessageId)
                    .ValueGeneratedNever()
                    .HasColumnName("kMessageId");

                entity.Property(e => e.AdjustmentId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("AdjustmentID");

                entity.Property(e => e.Amount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.AmountDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AmountType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FulfillmentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("FulfillmentID");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.MarketplaceName)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantOrderId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MerchantOrderID");

                entity.Property(e => e.MerchantOrderItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MerchantOrderItemID");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OrderItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostedDateTime).HasColumnType("datetime");

                entity.Property(e => e.PromotionId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("PromotionID");

                entity.Property(e => e.SettlementId).HasColumnName("SettlementID");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipmentID");

                entity.Property(e => e.Sku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PfAmazonSteuercodes>(entity =>
            {
                entity.HasKey(e => e.KSteuercode);

                entity.ToTable("pf_amazon_Steuercodes");

                entity.Property(e => e.KSteuercode)
                    .ValueGeneratedNever()
                    .HasColumnName("kSteuercode");

                entity.Property(e => e.CName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<PfAmazonValidation>(entity =>
            {
                entity.HasKey(e => e.CName);

                entity.ToTable("pf_amazon_validation");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.ArraySize).HasColumnName("arraySize");

                entity.Property(e => e.CPattern)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPattern");

                entity.Property(e => e.CType)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cType");

                entity.Property(e => e.MaxLength).HasColumnName("maxLength");

                entity.Property(e => e.MaxOccurs).HasColumnName("maxOccurs");

                entity.Property(e => e.MinLength).HasColumnName("minLength");

                entity.Property(e => e.MinOccurs).HasColumnName("minOccurs");
            });

            modelBuilder.Entity<PfAmazonVcs>(entity =>
            {
                entity.HasKey(e => e.KMessageId);

                entity.ToTable("pf_amazon_vcs");

                entity.Property(e => e.KMessageId)
                    .ValueGeneratedNever()
                    .HasColumnName("kMessageId");

                entity.Property(e => e.Asin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.BuyerTaxRegistration)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerTaxRegistrationJurisdiction)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExportOutsideEu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExportOutsideEU");

                entity.Property(e => e.GiftwraptaxAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxAmount");

                entity.Property(e => e.GiftwraptaxAmountPromo)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxAmountPromo");

                entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");

                entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");

                entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");

                entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");

                entity.Property(e => e.InvoiceLevelCurrencyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JurisdictionLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JurisdictionName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.MarketplaceId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MarketplaceID");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MerchantID");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OurPricetaxAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxAmount");

                entity.Property(e => e.OurPricetaxAmountPromo)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxAmountPromo");

                entity.Property(e => e.OurPricetaxExclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxExclusivePromoAmount");

                entity.Property(e => e.OurPricetaxExclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxExclusiveSellingPrice");

                entity.Property(e => e.OurPricetaxInclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxInclusivePromoAmount");

                entity.Property(e => e.OurPricetaxInclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxInclusiveSellingPrice");

                entity.Property(e => e.ProductTaxCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReturnFcCountry)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellerTaxRegistration)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SellerTaxRegistrationJurisdiction)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCity)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCountry)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromPostalCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromTaxLocationCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToCity)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToCountry)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToLocationCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToPostalCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ShipmentID");

                entity.Property(e => e.ShippingtaxAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxAmount");

                entity.Property(e => e.ShippingtaxAmountPromo)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxAmountPromo");

                entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxExclusivePromoAmount");

                entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");

                entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxInclusivePromoAmount");

                entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.TaxAddressRole)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCalculationDate).HasColumnType("datetime");

                entity.Property(e => e.TaxCalculationReasonCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.TaxType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VatinvoiceNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VATInvoiceNumber");
            });

            modelBuilder.Entity<PfAmazonVcsHistory>(entity =>
            {
                entity.HasKey(e => e.KMessageId);

                entity.ToTable("pf_amazon_vcs_history");

                entity.Property(e => e.KMessageId)
                    .ValueGeneratedNever()
                    .HasColumnName("kMessageId");

                entity.Property(e => e.Asin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.BuyerTaxRegistration)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerTaxRegistrationJurisdiction)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ConvertedTaxAmount).HasColumnType("decimal(20, 2)");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ExportOutsideEu)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ExportOutsideEU");

                entity.Property(e => e.GiftwraptaxAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxAmount");

                entity.Property(e => e.GiftwraptaxAmountPromo)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxAmountPromo");

                entity.Property(e => e.GiftwraptaxExclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxExclusivePromoAmount");

                entity.Property(e => e.GiftwraptaxExclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxExclusiveSellingPrice");

                entity.Property(e => e.GiftwraptaxInclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxInclusivePromoAmount");

                entity.Property(e => e.GiftwraptaxInclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("GIFTWRAPTaxInclusiveSellingPrice");

                entity.Property(e => e.InvoiceLevelCurrencyCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceLevelExchangeRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.InvoiceLevelExchangeRateDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceUrl)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.JurisdictionLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.JurisdictionName)
                    .HasMaxLength(80)
                    .IsUnicode(false);

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.MarketplaceId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MarketplaceID");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MerchantID");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OurPricetaxAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxAmount");

                entity.Property(e => e.OurPricetaxAmountPromo)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxAmountPromo");

                entity.Property(e => e.OurPricetaxExclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxExclusivePromoAmount");

                entity.Property(e => e.OurPricetaxExclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxExclusiveSellingPrice");

                entity.Property(e => e.OurPricetaxInclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxInclusivePromoAmount");

                entity.Property(e => e.OurPricetaxInclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("OUR_PRICETaxInclusiveSellingPrice");

                entity.Property(e => e.ProductTaxCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ReturnFcCountry)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SellerTaxRegistration)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SellerTaxRegistrationJurisdiction)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCity)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCountry)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromPostalCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromTaxLocationCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToCity)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToCountry)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToLocationCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToPostalCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipToState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("ShipmentID");

                entity.Property(e => e.ShippingtaxAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxAmount");

                entity.Property(e => e.ShippingtaxAmountPromo)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxAmountPromo");

                entity.Property(e => e.ShippingtaxExclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxExclusivePromoAmount");

                entity.Property(e => e.ShippingtaxExclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxExclusiveSellingPrice");

                entity.Property(e => e.ShippingtaxInclusivePromoAmount)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxInclusivePromoAmount");

                entity.Property(e => e.ShippingtaxInclusiveSellingPrice)
                    .HasColumnType("decimal(20, 2)")
                    .HasColumnName("SHIPPINGTaxInclusiveSellingPrice");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.TaxAddressRole)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxCalculationDate).HasColumnType("datetime");

                entity.Property(e => e.TaxCalculationReasonCode)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.TaxType)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.VatinvoiceNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("VATInvoiceNumber");
            });

            modelBuilder.Entity<PfAmazonVersandgruppen>(entity =>
            {
                entity.HasKey(e => e.KAmazonVersandgruppe);

                entity.ToTable("pf_amazon_versandgruppen");

                entity.Property(e => e.KAmazonVersandgruppe).HasColumnName("kAmazonVersandgruppe");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KUser).HasColumnName("kUser");
            });

            modelBuilder.Entity<PfAmazonXmlKat>(entity =>
            {
                entity.HasKey(e => e.KId);

                entity.ToTable("pf_amazon_xml_kat");

                entity.Property(e => e.KId)
                    .ValueGeneratedNever()
                    .HasColumnName("kID");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KBrowseNode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("kBrowseNode");

                entity.Property(e => e.KIdparent).HasColumnName("kIDParent");

                entity.Property(e => e.NEbene).HasColumnName("nEbene");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<PfAmazonXmlTrans>(entity =>
            {
                entity.HasKey(e => e.CName);

                entity.ToTable("pf_amazon_xml_trans");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CEnglish)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEnglish");

                entity.Property(e => e.CFrench)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFrench");

                entity.Property(e => e.CGerman)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGerman");

                entity.Property(e => e.CItalian)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItalian");
            });

            modelBuilder.Entity<PfAmazonXmlVersion>(entity =>
            {
                entity.HasKey(e => e.NVersion);

                entity.ToTable("pf_amazon_xml_version");

                entity.Property(e => e.NVersion)
                    .ValueGeneratedNever()
                    .HasColumnName("nVersion");

                entity.Property(e => e.NSqlkorrekt).HasColumnName("nSQLKorrekt");
            });

            modelBuilder.Entity<PfBestellposVater>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_bestellpos_vater");

                entity.HasIndex(e => e.KBestellPos, "IX_pf_bestellpos_vater_kBestellPos");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");
            });

            modelBuilder.Entity<PfListviewColors>(entity =>
            {
                entity.HasKey(e => new { e.NColorId, e.NSubColorId, e.NListViewId });

                entity.ToTable("pf_listview_colors");

                entity.Property(e => e.NColorId).HasColumnName("nColorId");

                entity.Property(e => e.NSubColorId).HasColumnName("nSubColorId");

                entity.Property(e => e.NListViewId).HasColumnName("nListViewId");

                entity.Property(e => e.CRgb)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRGB");
            });

            modelBuilder.Entity<PfLogbuch>(entity =>
            {
                entity.HasKey(e => e.KLogbuch);

                entity.ToTable("pf_logbuch");

                entity.HasIndex(e => new { e.KPlattform, e.CKategorie, e.DZeit }, "IX_pf_logbuch_kPlattform_cKategorie_dZeit");

                entity.Property(e => e.KLogbuch).HasColumnName("kLogbuch");

                entity.Property(e => e.CBetreff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.CLog)
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.DZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeit");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KUser).HasColumnName("kUser");
            });

            modelBuilder.Entity<PfLveinstellungen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_LVEinstellungen");

                entity.HasIndex(e => new { e.NListViewId, e.KBenutzer }, "IX_pf_LVEinstellungen_nListViewID_kBenutzer");

                entity.Property(e => e.CCustomName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustomName");

                entity.Property(e => e.COriginalName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOriginalName");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");

                entity.Property(e => e.NHeaderId).HasColumnName("nHeaderID");

                entity.Property(e => e.NListViewId).HasColumnName("nListViewID");

                entity.Property(e => e.NOrderBy).HasColumnName("nOrderBy");

                entity.Property(e => e.NSize).HasColumnName("nSize");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<PfLvsummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pf_LVSummary");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NListViewId).HasColumnName("nListViewID");

                entity.Property(e => e.NSummaryId).HasColumnName("nSummaryID");
            });

            modelBuilder.Entity<PfSynccheckboxen>(entity =>
            {
                entity.HasKey(e => e.KSyncCheckbox);

                entity.ToTable("pf_synccheckboxen");

                entity.Property(e => e.KSyncCheckbox)
                    .ValueGeneratedNever()
                    .HasColumnName("kSyncCheckbox");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<PfUser>(entity =>
            {
                entity.HasKey(e => e.KUser);

                entity.ToTable("pf_user");

                entity.HasIndex(e => e.CId1, "UQ_pf_user_cId1")
                    .IsUnique();

                entity.Property(e => e.KUser)
                    .ValueGeneratedNever()
                    .HasColumnName("kUser");

                entity.Property(e => e.CAmazonAuthToken)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonAuthToken");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuthToken)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAuthToken");

                entity.Property(e => e.CFbakommentar)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cFBAKommentar");

                entity.Property(e => e.CFbaversandmailKopie)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cFBAVersandmailKopie");

                entity.Property(e => e.CId1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cId1");

                entity.Property(e => e.CId2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cId2");

                entity.Property(e => e.CId3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cId3");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CVersandName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandName");

                entity.Property(e => e.DInventardaten)
                    .HasColumnType("datetime")
                    .HasColumnName("dInventardaten");

                entity.Property(e => e.DInventardatenFba)
                    .HasColumnType("datetime")
                    .HasColumnName("dInventardatenFBA");

                entity.Property(e => e.DRepricingFull)
                    .HasColumnType("datetime")
                    .HasColumnName("dRepricingFull");

                entity.Property(e => e.DStartVcs)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartVCS");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KColorB2border).HasColumnName("kColorB2BOrder");

                entity.Property(e => e.KColorCustomOrder).HasColumnName("kColorCustomOrder");

                entity.Property(e => e.KColorFbaAndB2border).HasColumnName("kColorFbaAndB2BOrder");

                entity.Property(e => e.KColorFbaOrder).HasColumnName("kColorFbaOrder");

                entity.Property(e => e.KColorSellerFulfilledPrimeAndCustomOrder).HasColumnName("kColorSellerFulfilledPrimeAndCustomOrder");

                entity.Property(e => e.KColorSellerFulfilledPrimeOrder).HasColumnName("kColorSellerFulfilledPrimeOrder");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KVersandartExpedited).HasColumnName("kVersandartExpedited");

                entity.Property(e => e.KVersandartNextDayNonPrime).HasColumnName("kVersandartNextDayNonPrime");

                entity.Property(e => e.KVersandartPrimeStandard).HasColumnName("kVersandartPrimeStandard");

                entity.Property(e => e.KVersandartSecondDayNonPrime).HasColumnName("kVersandartSecondDayNonPrime");

                entity.Property(e => e.KVersandartStandard).HasColumnName("kVersandartStandard");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NAnmerkung).HasColumnName("nAnmerkung");

                entity.Property(e => e.NBearbeitungszeitAnpassen).HasColumnName("nBearbeitungszeitAnpassen");

                entity.Property(e => e.NBearbeitungszeitAufschlag).HasColumnName("nBearbeitungszeitAufschlag");

                entity.Property(e => e.NBenutzePosName).HasColumnName("nBenutzePosName");

                entity.Property(e => e.NEu).HasColumnName("nEU");

                entity.Property(e => e.NFbalagerAbziehen).HasColumnName("nFBALagerAbziehen");

                entity.Property(e => e.NFbaversandmailAnKunde).HasColumnName("nFBAVersandmailAnKunde");

                entity.Property(e => e.NIgnorierePaymentsBestellungen).HasColumnName("nIgnorierePaymentsBestellungen");

                entity.Property(e => e.NInventardatenAnfordern)
                    .HasColumnName("nInventardatenAnfordern")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NLagerSenden).HasColumnName("nLagerSenden");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NRepricing).HasColumnName("nRepricing");

                entity.Property(e => e.NSendPriceAdjustment)
                    .IsRequired()
                    .HasColumnName("nSendPriceAdjustment")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NVersandpos0).HasColumnName("nVersandpos0");

                entity.Property(e => e.NZahlung).HasColumnName("nZahlung");
            });

            modelBuilder.Entity<PickList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickList", "Report");

                entity.Property(e => e.Comment)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OperationId)
                    .HasMaxLength(265)
                    .IsUnicode(false);

                entity.Property(e => e.PickListNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PickListTemplateName)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PrintingDate).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StatusCreationDate).HasColumnType("datetime");

                entity.Property(e => e.StatusDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<PickListPositionOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListPositionOrder", "Report");

                entity.Property(e => e.Batchnumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BinLocationName)
                    .HasMaxLength(512)
                    .IsUnicode(false);

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.Serialnumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.Sled)
                    .HasColumnType("datetime")
                    .HasColumnName("SLED");

                entity.Property(e => e.Status)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickListPositionOrderConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListPositionOrderConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickListPositionWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListPositionWarehouse", "Report");

                entity.Property(e => e.Batchnumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BinLocationName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.Serialnumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.Sled)
                    .HasColumnType("datetime")
                    .HasColumnName("SLED");

                entity.Property(e => e.Status)
                    .HasMaxLength(7)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickListPositionWarehouseConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListPositionWarehouseConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickListSalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListSalesOrder", "Report");

                entity.Property(e => e.Comment)
                    .HasMaxLength(4500)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerSalesOrderNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.ExternalSalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InternalId).ValueGeneratedOnAdd();

                entity.Property(e => e.SalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickListSalesOrderBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListSalesOrderBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PickListSalesOrderShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PickListSalesOrderShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Platform>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Platform", "Report");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PosAnfangEnde>(entity =>
            {
                entity.HasKey(e => e.KAnfangEnde);

                entity.ToTable("POS_AnfangEnde");

                entity.Property(e => e.KAnfangEnde).HasColumnName("kAnfangEnde");

                entity.Property(e => e.CAnfangEndeNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cAnfangEndeNr");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.DDatum2)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum2");

                entity.Property(e => e.FEndBetrag).HasColumnName("fEndBetrag");

                entity.Property(e => e.FStartBetrag).HasColumnName("fStartBetrag");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKassenAnfangsBestand).HasColumnName("kKassenAnfangsBestand");
            });

            modelBuilder.Entity<PosAuswahl>(entity =>
            {
                entity.HasKey(e => e.KAuswahl);

                entity.ToTable("POS_Auswahl");

                entity.Property(e => e.KAuswahl).HasColumnName("kAuswahl");

                entity.Property(e => e.BData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bData");

                entity.Property(e => e.DDatumAusgabe)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum_Ausgabe");

                entity.Property(e => e.KBenutzerAusgabe).HasColumnName("kBenutzer_Ausgabe");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<PosAuswahlPosition>(entity =>
            {
                entity.HasKey(e => e.KAuswahlPosition);

                entity.ToTable("POS_AuswahlPosition");

                entity.Property(e => e.KAuswahlPosition).HasColumnName("kAuswahlPosition");

                entity.Property(e => e.BBonPosition)
                    .HasColumnType("image")
                    .HasColumnName("bBonPosition");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSerienNr)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSerienNr");

                entity.Property(e => e.CVariationen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVariationen");

                entity.Property(e => e.DDatumAusgabe)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum_Ausgabe");

                entity.Property(e => e.DDatumRueckgabe)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum_Rueckgabe");

                entity.Property(e => e.FMenge).HasColumnName("fMenge");

                entity.Property(e => e.FVkpreis).HasColumnName("fVKPreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KAuswahl).HasColumnName("kAuswahl");

                entity.Property(e => e.KBenutzerAusgabe).HasColumnName("kBenutzer_Ausgabe");

                entity.Property(e => e.KBenutzerRueckgabe).HasColumnName("kBenutzer_Rueckgabe");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<PosBenutzer>(entity =>
            {
                entity.HasKey(e => e.KBenutzer);

                entity.ToTable("POS_Benutzer");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.BRecht1)
                    .HasColumnName("bRecht1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht10)
                    .HasColumnName("bRecht10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht11)
                    .HasColumnName("bRecht11")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht12)
                    .HasColumnName("bRecht12")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht13)
                    .HasColumnName("bRecht13")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht14)
                    .HasColumnName("bRecht14")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht15)
                    .HasColumnName("bRecht15")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht16)
                    .HasColumnName("bRecht16")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht17)
                    .HasColumnName("bRecht17")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht18)
                    .HasColumnName("bRecht18")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht19)
                    .HasColumnName("bRecht19")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht2)
                    .HasColumnName("bRecht2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht20)
                    .HasColumnName("bRecht20")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BRecht21)
                    .HasColumnName("bRecht21")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BRecht22)
                    .HasColumnName("bRecht22")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht23)
                    .HasColumnName("bRecht23")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht24)
                    .HasColumnName("bRecht24")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht25)
                    .HasColumnName("bRecht25")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht26)
                    .HasColumnName("bRecht26")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht27)
                    .HasColumnName("bRecht27")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht28)
                    .HasColumnName("bRecht28")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht29)
                    .HasColumnName("bRecht29")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht3)
                    .HasColumnName("bRecht3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht30)
                    .HasColumnName("bRecht30")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht31)
                    .HasColumnName("bRecht31")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht32)
                    .HasColumnName("bRecht32")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht33)
                    .HasColumnName("bRecht33")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht34)
                    .HasColumnName("bRecht34")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht35)
                    .HasColumnName("bRecht35")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht36)
                    .HasColumnName("bRecht36")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht37)
                    .HasColumnName("bRecht37")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BRecht38)
                    .HasColumnName("bRecht38")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht39)
                    .HasColumnName("bRecht39")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht4)
                    .HasColumnName("bRecht4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht40)
                    .HasColumnName("bRecht40")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht41)
                    .HasColumnName("bRecht41")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht42)
                    .HasColumnName("bRecht42")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht43)
                    .HasColumnName("bRecht43")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht44)
                    .HasColumnName("bRecht44")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht45)
                    .HasColumnName("bRecht45")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht46)
                    .HasColumnName("bRecht46")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht47)
                    .HasColumnName("bRecht47")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht48)
                    .HasColumnName("bRecht48")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht49)
                    .HasColumnName("bRecht49")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht5)
                    .HasColumnName("bRecht5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht50)
                    .HasColumnName("bRecht50")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht6)
                    .HasColumnName("bRecht6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht7)
                    .HasColumnName("bRecht7")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht8)
                    .HasColumnName("bRecht8")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRecht9)
                    .HasColumnName("bRecht9")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CButtonCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cButtonCode");

                entity.Property(e => e.CLogin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLogin");

                entity.Property(e => e.CPasswort)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPasswort");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.DZugriff)
                    .HasColumnType("datetime")
                    .HasColumnName("dZugriff");

                entity.Property(e => e.FMaxRabatt)
                    .HasColumnName("fMaxRabatt")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");
            });

            modelBuilder.Entity<PosBon>(entity =>
            {
                entity.HasKey(e => e.KBon);

                entity.ToTable("POS_Bon");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.CBonNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBonNr");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CData2)
                    .HasColumnType("image")
                    .HasColumnName("cData2");

                entity.Property(e => e.CHasRabatt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cHasRabatt")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CWawiAuftragErstellt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cWawiAuftragErstellt")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FGegeben).HasColumnName("fGegeben");

                entity.Property(e => e.FGesamtSumme).HasColumnName("fGesamtSumme");

                entity.Property(e => e.FGutscheinAusgabe)
                    .HasColumnName("fGutscheinAusgabe")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.FGutscheinEinloesung)
                    .HasColumnName("fGutscheinEinloesung")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.FMwSt1).HasColumnName("fMwSt1");

                entity.Property(e => e.FMwSt10).HasColumnName("fMwSt10");

                entity.Property(e => e.FMwSt2).HasColumnName("fMwSt2");

                entity.Property(e => e.FMwSt3).HasColumnName("fMwSt3");

                entity.Property(e => e.FMwSt4).HasColumnName("fMwSt4");

                entity.Property(e => e.FMwSt5).HasColumnName("fMwSt5");

                entity.Property(e => e.FMwSt6).HasColumnName("fMwSt6");

                entity.Property(e => e.FMwSt7).HasColumnName("fMwSt7");

                entity.Property(e => e.FMwSt8).HasColumnName("fMwSt8");

                entity.Property(e => e.FMwSt9).HasColumnName("fMwSt9");

                entity.Property(e => e.FRueckgeld).HasColumnName("fRueckgeld");

                entity.Property(e => e.FSumme1).HasColumnName("fSumme1");

                entity.Property(e => e.FSumme10).HasColumnName("fSumme10");

                entity.Property(e => e.FSumme2).HasColumnName("fSumme2");

                entity.Property(e => e.FSumme3).HasColumnName("fSumme3");

                entity.Property(e => e.FSumme4).HasColumnName("fSumme4");

                entity.Property(e => e.FSumme5).HasColumnName("fSumme5");

                entity.Property(e => e.FSumme6).HasColumnName("fSumme6");

                entity.Property(e => e.FSumme7).HasColumnName("fSumme7");

                entity.Property(e => e.FSumme8).HasColumnName("fSumme8");

                entity.Property(e => e.FSumme9).HasColumnName("fSumme9");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBonStorno)
                    .HasColumnName("kBonStorno")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.TRechnungKRechnung).HasColumnName("tRechnung_kRechnung");

                entity.Property(e => e.TVersandartCName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tVersandart_cName");

                entity.Property(e => e.TVersandartKVersandart)
                    .HasColumnName("tVersandart_kVersandart")
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<PosBonIc>(entity =>
            {
                entity.HasKey(e => e.KBonIc);

                entity.ToTable("POS_BonIC");

                entity.Property(e => e.KBonIc).HasColumnName("kBonIC");

                entity.Property(e => e.CStorno)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStorno")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FAnzahl).HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KEigenschaftwert).HasColumnName("kEigenschaftwert");

                entity.Property(e => e.KLagerArtikel).HasColumnName("kLagerArtikel");
            });

            modelBuilder.Entity<PosBonIcwarenLager>(entity =>
            {
                entity.HasKey(e => e.KBonIcwarenLager);

                entity.ToTable("POS_BonICWarenLager");

                entity.Property(e => e.KBonIcwarenLager).HasColumnName("kBonICWarenLager");

                entity.Property(e => e.KBonIc).HasColumnName("kBonIC");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            });

            modelBuilder.Entity<PosBonPosition>(entity =>
            {
                entity.HasKey(e => e.KBonPosition);

                entity.ToTable("POS_BonPosition");

                entity.Property(e => e.KBonPosition).HasColumnName("kBonPosition");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CHasSonderPreis)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cHasSonderPreis")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CHasVariationen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cHasVariationen")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CVariationen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVariationen")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CWawiAuftragErstellt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cWawiAuftragErstellt")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CisAfreitext)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cisAFreitext")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CisAgutschein)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cisAGutschein")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CisArueckgabeAusgleich)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cisARueckgabeAusgleich")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CisAstaffelPreis)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cisAStaffelPreis")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CisLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cisLagerArtikel")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.FEinzelPreis).HasColumnName("fEinzelPreis");

                entity.Property(e => e.FKassenRabattSatz).HasColumnName("fKassenRabattSatz");

                entity.Property(e => e.FMenge).HasColumnName("fMenge");

                entity.Property(e => e.KBenutzer)
                    .HasColumnName("kBenutzer")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KBonPositionStorno)
                    .HasColumnName("kBonPositionStorno")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.TArtikelCArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("tArtikel_cArtNr");

                entity.Property(e => e.TArtikelCEinheit)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("tArtikel_cEinheit");

                entity.Property(e => e.TArtikelCErloeskonto)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tArtikel_cErloeskonto");

                entity.Property(e => e.TArtikelCHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tArtikel_cHersteller");

                entity.Property(e => e.TArtikelCName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tArtikel_cName");

                entity.Property(e => e.TArtikelCWarengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("tArtikel_cWarengruppe");

                entity.Property(e => e.TArtikelFMwSt).HasColumnName("tArtikel_fMwSt");

                entity.Property(e => e.TArtikelFUvp).HasColumnName("tArtikel_fUVP");

                entity.Property(e => e.TArtikelFVkbrutto).HasColumnName("tArtikel_fVKBrutto");

                entity.Property(e => e.TArtikelFVknetto).HasColumnName("tArtikel_fVKNetto");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");

                entity.Property(e => e.TBestellungKBestellung)
                    .HasColumnName("tBestellung_kBestellung")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.TLagerArtikelCSerienNr)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("tLagerArtikel_cSerienNr");

                entity.Property(e => e.TLagerArtikelKLagerArtikel).HasColumnName("tLagerArtikel_kLagerArtikel");

                entity.Property(e => e.TZahlungKZahlung)
                    .HasColumnName("tZahlung_kZahlung")
                    .HasDefaultValueSql("('0')");
            });

            modelBuilder.Entity<PosBonPositionEigenschaftwert>(entity =>
            {
                entity.HasKey(e => e.KBonPositionEigenschaftwert);

                entity.ToTable("POS_BonPositionEigenschaftwert");

                entity.Property(e => e.KBonPositionEigenschaftwert).HasColumnName("kBonPositionEigenschaftwert");

                entity.Property(e => e.KBonPosition).HasColumnName("kBonPosition");

                entity.Property(e => e.KEigenschaftswert).HasColumnName("kEigenschaftswert");
            });

            modelBuilder.Entity<PosBonPositionRueckgabe>(entity =>
            {
                entity.HasKey(e => e.KBonPositionRueckgabe);

                entity.ToTable("POS_BonPositionRueckgabe");

                entity.Property(e => e.KBonPositionRueckgabe).HasColumnName("kBonPositionRueckgabe");

                entity.Property(e => e.CGrund)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGrund");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FAnzahl).HasColumnName("fAnzahl");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KBonPosition).HasColumnName("kBonPosition");

                entity.Property(e => e.KBonRueckgabe).HasColumnName("kBonRueckgabe");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NRueckgabeAktion).HasColumnName("nRueckgabeAktion");
            });

            modelBuilder.Entity<PosBonPositionStorno>(entity =>
            {
                entity.HasKey(e => e.KBonPositionStorno);

                entity.ToTable("POS_BonPositionStorno");

                entity.Property(e => e.KBonPositionStorno).HasColumnName("kBonPositionStorno");

                entity.Property(e => e.CText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBonPosition).HasColumnName("kBonPosition");
            });

            modelBuilder.Entity<PosBonRueckgabe>(entity =>
            {
                entity.HasKey(e => e.KBonRueckgabe);

                entity.ToTable("POS_BonRueckgabe");

                entity.Property(e => e.KBonRueckgabe).HasColumnName("kBonRueckgabe");

                entity.Property(e => e.CBonRueckgabeNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBonRueckgabeNr");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FGesamtMenge).HasColumnName("fGesamtMenge");

                entity.Property(e => e.FGesamtSumme).HasColumnName("fGesamtSumme");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NRueckgabeAktion).HasColumnName("nRueckgabeAktion");
            });

            modelBuilder.Entity<PosBonStorno>(entity =>
            {
                entity.HasKey(e => e.KBonStorno);

                entity.ToTable("POS_BonStorno");

                entity.Property(e => e.KBonStorno).HasColumnName("kBonStorno");

                entity.Property(e => e.CGrund)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGrund");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBon).HasColumnName("kBon");
            });

            modelBuilder.Entity<PosBonpark>(entity =>
            {
                entity.HasKey(e => e.KBonpark);

                entity.ToTable("POS_Bonpark");

                entity.Property(e => e.KBonpark).HasColumnName("kBonpark");

                entity.Property(e => e.CBenutzerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerName");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CKundeName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeName");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FAnzahl).HasColumnName("fAnzahl");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<PosDruckvorlagen>(entity =>
            {
                entity.HasKey(e => e.KDruckvorlage);

                entity.ToTable("POS_Druckvorlagen");

                entity.Property(e => e.KDruckvorlage).HasColumnName("kDruckvorlage");

                entity.Property(e => e.CBezeichnung)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezeichnung");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CDataRendered)
                    .HasColumnType("image")
                    .HasColumnName("cDataRendered");

                entity.Property(e => e.CInfo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInfo");

                entity.Property(e => e.CKlasse)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKlasse");

                entity.Property(e => e.CTyp)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.CVersion)
                    .HasColumnName("cVersion")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.CVorlagenOid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorlagenOID");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");
            });

            modelBuilder.Entity<PosEinnahmeAusgabe>(entity =>
            {
                entity.HasKey(e => e.KEinnahmeAusgabe);

                entity.ToTable("POS_EinnahmeAusgabe");

                entity.Property(e => e.KEinnahmeAusgabe).HasColumnName("kEinnahmeAusgabe");

                entity.Property(e => e.CEinnahmeAusgabeNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cEinnahmeAusgabeNr");

                entity.Property(e => e.CText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.FMwSt).HasColumnName("fMwSt");

                entity.Property(e => e.FSteuerSatz).HasColumnName("fSteuerSatz");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.NKonto).HasColumnName("nKonto");
            });

            modelBuilder.Entity<PosElPayPayment>(entity =>
            {
                entity.HasKey(e => e.KelPayPayment);

                entity.ToTable("POS_elPayPayment");

                entity.Property(e => e.KelPayPayment).HasColumnName("kelPayPayment");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CKartenName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cKartenName");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.KUmsaetze).HasColumnName("kUmsaetze");

                entity.Property(e => e.NBelegNummer).HasColumnName("nBelegNummer");
            });

            modelBuilder.Entity<PosGutscheine>(entity =>
            {
                entity.HasKey(e => e.KGutschein);

                entity.ToTable("POS_Gutscheine");

                entity.Property(e => e.KGutschein).HasColumnName("kGutschein");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .HasDefaultValueSql("('Y')");

                entity.Property(e => e.CBenutzerEinloesen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer_einloesen");

                entity.Property(e => e.CBenutzerVerkaufen)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer_verkaufen");

                entity.Property(e => e.CKundeEinloesen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKunde_einloesen");

                entity.Property(e => e.CKundeKaufen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKunde_kaufen");

                entity.Property(e => e.CNummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNummer");

                entity.Property(e => e.DEinloesung)
                    .HasColumnType("datetime")
                    .HasColumnName("dEinloesung");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.KBenutzerEinloesen).HasColumnName("kBenutzer_einloesen");

                entity.Property(e => e.KBenutzerVerkaufen).HasColumnName("kBenutzer_verkaufen");

                entity.Property(e => e.KBonAusgabe).HasColumnName("kBon_Ausgabe");

                entity.Property(e => e.KBonEinloesung).HasColumnName("kBon_Einloesung");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKasseAusgabe).HasColumnName("kKasse_Ausgabe");

                entity.Property(e => e.KKasseEinloesung).HasColumnName("kKasse_Einloesung");

                entity.Property(e => e.KKundeEinloesen).HasColumnName("kKunde_einloesen");

                entity.Property(e => e.KKundeKaufen).HasColumnName("kKunde_kaufen");
            });

            modelBuilder.Entity<PosHardwareTreiber>(entity =>
            {
                entity.HasKey(e => e.KHardwareTreiber);

                entity.ToTable("POS_HardwareTreiber");

                entity.Property(e => e.KHardwareTreiber).HasColumnName("kHardwareTreiber");

                entity.Property(e => e.CBezeichnung)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezeichnung");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CHardwareOid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHardwareOID");

                entity.Property(e => e.CInfo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInfo");

                entity.Property(e => e.CTyp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.CVersion)
                    .HasColumnName("cVersion")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");
            });

            modelBuilder.Entity<PosKassen>(entity =>
            {
                entity.HasKey(e => e.KKasse);

                entity.ToTable("POS_Kassen");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.CName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CZugriff)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZugriff");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.DZugriff)
                    .HasColumnType("datetime")
                    .HasColumnName("dZugriff");
            });

            modelBuilder.Entity<PosKassenBenutzer>(entity =>
            {
                entity.HasKey(e => e.KKassenBenutzer);

                entity.ToTable("POS_KassenBenutzer");

                entity.Property(e => e.KKassenBenutzer).HasColumnName("kKassenBenutzer");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");
            });

            modelBuilder.Entity<PosKassenBuch>(entity =>
            {
                entity.HasKey(e => e.KKassenBuch);

                entity.ToTable("POS_KassenBuch");

                entity.Property(e => e.KKassenBuch).HasColumnName("kKassenBuch");

                entity.Property(e => e.CBelegNummer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBelegNummer");

                entity.Property(e => e.CBelegText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBelegText");

                entity.Property(e => e.CBelegTyp)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBelegTyp");

                entity.Property(e => e.CCheck)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cCheck");

                entity.Property(e => e.CKonto)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CNachricht)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cNachricht");

                entity.Property(e => e.CZahlart)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlart");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FSteuerSatz).HasColumnName("fSteuerSatz");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.NfAusgabe).HasColumnName("nfAusgabe");

                entity.Property(e => e.NfEinnahme).HasColumnName("nfEinnahme");

                entity.Property(e => e.NfEndBestand).HasColumnName("nfEndBestand");

                entity.Property(e => e.NfMwSt).HasColumnName("nfMwSt");
            });

            modelBuilder.Entity<PosKassenKonfiguration>(entity =>
            {
                entity.HasKey(e => e.KKassenkonfiguration);

                entity.ToTable("POS_KassenKonfiguration");

                entity.Property(e => e.KKassenkonfiguration).HasColumnName("kKassenkonfiguration");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");
            });

            modelBuilder.Entity<PosKassenOption>(entity =>
            {
                entity.HasKey(e => e.KKassenOption);

                entity.ToTable("POS_KassenOption");

                entity.Property(e => e.KKassenOption).HasColumnName("kKassenOption");

                entity.Property(e => e.CKey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");
            });

            modelBuilder.Entity<PosKassenPlugin>(entity =>
            {
                entity.HasKey(e => e.KKassenPlugin);

                entity.ToTable("POS_KassenPlugin");

                entity.Property(e => e.KKassenPlugin).HasColumnName("kKassenPlugin");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .HasDefaultValueSql("('N')");

                entity.Property(e => e.CData1)
                    .HasColumnType("image")
                    .HasColumnName("cData1");

                entity.Property(e => e.CData2)
                    .HasColumnType("image")
                    .HasColumnName("cData2");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KPlugin).HasColumnName("kPlugin");

                entity.Property(e => e.NIndex)
                    .HasColumnName("nIndex")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PosKassensturz>(entity =>
            {
                entity.HasKey(e => e.KKassensturz);

                entity.ToTable("POS_Kassensturz");

                entity.Property(e => e.KKassensturz).HasColumnName("kKassensturz");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.IInfo)
                    .HasColumnName("iInfo")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");
            });

            modelBuilder.Entity<PosKonfiguration>(entity =>
            {
                entity.HasKey(e => e.KKonfiguration);

                entity.ToTable("POS_Konfiguration");

                entity.Property(e => e.KKonfiguration).HasColumnName("kKonfiguration");

                entity.Property(e => e.CExeVersion)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExeVersion");

                entity.Property(e => e.CUpdateComputer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cUpdateComputer");

                entity.Property(e => e.DLastUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastUpdate");

                entity.Property(e => e.DSchemaDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dSchemaDate");

                entity.Property(e => e.FDbschema).HasColumnName("fDBSchema");
            });

            modelBuilder.Entity<PosKundenBild>(entity =>
            {
                entity.HasKey(e => e.KKundenBild);

                entity.ToTable("POS_KundenBild");

                entity.Property(e => e.KKundenBild).HasColumnName("kKundenBild");

                entity.Property(e => e.BBild)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bBild");

                entity.Property(e => e.BBildVorschau)
                    .HasColumnType("image")
                    .HasColumnName("bBildVorschau");

                entity.Property(e => e.CHash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cHash");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NBreite).HasColumnName("nBreite");

                entity.Property(e => e.NHoehe).HasColumnName("nHoehe");
            });

            modelBuilder.Entity<PosLaufendeNummern>(entity =>
            {
                entity.HasKey(e => new { e.KLaufendeNummer, e.KKasse });

                entity.ToTable("POS_LaufendeNummern");

                entity.Property(e => e.KLaufendeNummer)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kLaufendeNummer");

                entity.Property(e => e.KKasse)
                    .HasColumnName("kKasse")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CField)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cField")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPrefix)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cPrefix")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CSuffix)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSuffix")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CTable)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTable")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.NNummer).HasColumnName("nNummer");
            });

            modelBuilder.Entity<PosLog>(entity =>
            {
                entity.HasKey(e => e.KLog);

                entity.ToTable("POS_Log");

                entity.Property(e => e.KLog).HasColumnName("kLog");

                entity.Property(e => e.B1)
                    .HasColumnName("b1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.B2)
                    .HasColumnName("b2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.B3)
                    .HasColumnName("b3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.B4)
                    .HasColumnName("b4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.B5)
                    .HasColumnName("b5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.C1)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("c1");

                entity.Property(e => e.C2)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("c2");

                entity.Property(e => e.C3)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("c3");

                entity.Property(e => e.C4)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("c4");

                entity.Property(e => e.C5)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("c5");

                entity.Property(e => e.CBenutzer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer");

                entity.Property(e => e.CCheck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCheck");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.D1)
                    .HasColumnType("datetime")
                    .HasColumnName("d1");

                entity.Property(e => e.D2)
                    .HasColumnType("datetime")
                    .HasColumnName("d2");

                entity.Property(e => e.D3)
                    .HasColumnType("datetime")
                    .HasColumnName("d3");

                entity.Property(e => e.D4)
                    .HasColumnType("datetime")
                    .HasColumnName("d4");

                entity.Property(e => e.D5)
                    .HasColumnType("datetime")
                    .HasColumnName("d5");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.F1)
                    .HasColumnName("f1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.F2)
                    .HasColumnName("f2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.F3)
                    .HasColumnName("f3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.F4)
                    .HasColumnName("f4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.F5)
                    .HasColumnName("f5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.I1)
                    .HasColumnName("i1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.I2)
                    .HasColumnName("i2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.I3)
                    .HasColumnName("i3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.I4)
                    .HasColumnName("i4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.I5)
                    .HasColumnName("i5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KWawiBenutzer).HasColumnName("kWawiBenutzer");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.S1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("s1");

                entity.Property(e => e.S2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("s2");

                entity.Property(e => e.S3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("s3");

                entity.Property(e => e.S4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("s4");

                entity.Property(e => e.S5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("s5");
            });

            modelBuilder.Entity<PosMitarbeiterBild>(entity =>
            {
                entity.HasKey(e => e.KMitarbeiterBild);

                entity.ToTable("POS_MitarbeiterBild");

                entity.Property(e => e.KMitarbeiterBild).HasColumnName("kMitarbeiterBild");

                entity.Property(e => e.BBild)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bBild");

                entity.Property(e => e.BBildVorschau)
                    .HasColumnType("image")
                    .HasColumnName("bBildVorschau");

                entity.Property(e => e.CHash)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cHash");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NBreite).HasColumnName("nBreite");

                entity.Property(e => e.NHoehe).HasColumnName("nHoehe");
            });

            modelBuilder.Entity<PosPlugin>(entity =>
            {
                entity.HasKey(e => e.KPlugin);

                entity.ToTable("POS_Plugin");

                entity.Property(e => e.KPlugin).HasColumnName("kPlugin");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CEid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEID");

                entity.Property(e => e.COid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOID");

                entity.Property(e => e.NVersion).HasColumnName("nVersion");
            });

            modelBuilder.Entity<PosShopgutscheine>(entity =>
            {
                entity.HasKey(e => e.KShopgutschein);

                entity.ToTable("POS_Shopgutscheine");

                entity.Property(e => e.KShopgutschein).HasColumnName("kShopgutschein");

                entity.Property(e => e.CBenutzer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer");

                entity.Property(e => e.CBonNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBonNr");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CGutscheinNummerHash)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGutscheinNummerHash");

                entity.Property(e => e.CKunde)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKunde");

                entity.Property(e => e.CUploadResponse)
                    .HasColumnType("image")
                    .HasColumnName("cUploadResponse");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.DGutscheinErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dGutscheinErstellung");

                entity.Property(e => e.DGutscheinGueltigkeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dGutscheinGueltigkeit");

                entity.Property(e => e.DUpload)
                    .HasColumnType("datetime")
                    .HasColumnName("dUpload");

                entity.Property(e => e.FWert).HasColumnName("fWert");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NTyp)
                    .HasColumnName("nTyp")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PosSignatur>(entity =>
            {
                entity.HasKey(e => e.KSignatur);

                entity.ToTable("POS_Signatur");

                entity.Property(e => e.KSignatur).HasColumnName("kSignatur");

                entity.Property(e => e.CCheck)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cCheck");

                entity.Property(e => e.CSignatur)
                    .HasColumnType("image")
                    .HasColumnName("cSignatur");

                entity.Property(e => e.CTabelle)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTabelle");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KKey).HasColumnName("kKey");
            });

            modelBuilder.Entity<PosSplitzahlung>(entity =>
            {
                entity.HasKey(e => e.KSplitzahlung);

                entity.ToTable("POS_Splitzahlung");

                entity.Property(e => e.KSplitzahlung).HasColumnName("kSplitzahlung");

                entity.Property(e => e.CZahlart)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlart");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.KBon).HasColumnName("kBon");
            });

            modelBuilder.Entity<PosSystemLog>(entity =>
            {
                entity.HasKey(e => e.KSystemLog);

                entity.ToTable("POS_SystemLog");

                entity.Property(e => e.KSystemLog).HasColumnName("kSystemLog");

                entity.Property(e => e.CCheck)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .HasColumnName("cCheck");

                entity.Property(e => e.CComputer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cComputer");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.NId).HasColumnName("nID");
            });

            modelBuilder.Entity<PosTeleCashPayment>(entity =>
            {
                entity.HasKey(e => e.KTeleCashPayment);

                entity.ToTable("POS_TeleCashPayment");

                entity.Property(e => e.KTeleCashPayment).HasColumnName("kTeleCashPayment");

                entity.Property(e => e.CKartenName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cKartenName");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.KUmsaetze).HasColumnName("kUmsaetze");

                entity.Property(e => e.NBelegNummer).HasColumnName("nBelegNummer");
            });

            modelBuilder.Entity<PosUmsaetze>(entity =>
            {
                entity.HasKey(e => e.KUmsaetze);

                entity.ToTable("POS_Umsaetze");

                entity.Property(e => e.KUmsaetze).HasColumnName("kUmsaetze");

                entity.Property(e => e.CTyp)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.CUmsatzNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cUmsatzNr");

                entity.Property(e => e.CZahlart)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlart");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FAuftragsbezahlung)
                    .HasColumnName("fAuftragsbezahlung")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.FGesamtSumme).HasColumnName("fGesamtSumme");

                entity.Property(e => e.FGutscheinAusgabe)
                    .HasColumnName("fGutscheinAusgabe")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.FGutscheinEinloesung)
                    .HasColumnName("fGutscheinEinloesung")
                    .HasDefaultValueSql("('0')");

                entity.Property(e => e.FMwSt1).HasColumnName("fMwSt1");

                entity.Property(e => e.FMwSt10).HasColumnName("fMwSt10");

                entity.Property(e => e.FMwSt2).HasColumnName("fMwSt2");

                entity.Property(e => e.FMwSt3).HasColumnName("fMwSt3");

                entity.Property(e => e.FMwSt4).HasColumnName("fMwSt4");

                entity.Property(e => e.FMwSt5).HasColumnName("fMwSt5");

                entity.Property(e => e.FMwSt6).HasColumnName("fMwSt6");

                entity.Property(e => e.FMwSt7).HasColumnName("fMwSt7");

                entity.Property(e => e.FMwSt8).HasColumnName("fMwSt8");

                entity.Property(e => e.FMwSt9).HasColumnName("fMwSt9");

                entity.Property(e => e.FSumme1).HasColumnName("fSumme1");

                entity.Property(e => e.FSumme10).HasColumnName("fSumme10");

                entity.Property(e => e.FSumme2).HasColumnName("fSumme2");

                entity.Property(e => e.FSumme3).HasColumnName("fSumme3");

                entity.Property(e => e.FSumme4).HasColumnName("fSumme4");

                entity.Property(e => e.FSumme5).HasColumnName("fSumme5");

                entity.Property(e => e.FSumme6).HasColumnName("fSumme6");

                entity.Property(e => e.FSumme7).HasColumnName("fSumme7");

                entity.Property(e => e.FSumme8).HasColumnName("fSumme8");

                entity.Property(e => e.FSumme9).HasColumnName("fSumme9");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<PosZvt700payment>(entity =>
            {
                entity.HasKey(e => e.KZvt700payment);

                entity.ToTable("POS_ZVT700Payment");

                entity.Property(e => e.KZvt700payment).HasColumnName("kZVT700Payment");

                entity.Property(e => e.CKartenName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cKartenName");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag).HasColumnName("fBetrag");

                entity.Property(e => e.KUmsaetze).HasColumnName("kUmsaetze");
            });

            modelBuilder.Entity<PosefstaBelege>(entity =>
            {
                entity.HasKey(e => e.KEfstaBeleg);

                entity.ToTable("POSEFSTA_Belege");

                entity.Property(e => e.KEfstaBeleg).HasColumnName("kEfstaBeleg");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.CData2)
                    .HasColumnType("image")
                    .HasColumnName("cData2");

                entity.Property(e => e.CField)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cField")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cInfo")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CTable)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTable")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KKey)
                    .HasColumnName("kKey")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<PosefstaDropOut>(entity =>
            {
                entity.HasKey(e => e.KEfstaDropOut);

                entity.ToTable("POSEFSTA_DropOut");

                entity.Property(e => e.KEfstaDropOut).HasColumnName("kEfstaDropOut");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.DLoesung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLoesung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBon).HasColumnName("kBon");

                entity.Property(e => e.KEfstaBeleg)
                    .HasColumnName("kEfstaBeleg")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");
            });

            modelBuilder.Entity<PosgastroDrucker>(entity =>
            {
                entity.HasKey(e => e.KGastroDrucker);

                entity.ToTable("POSGASTRO_Drucker");

                entity.Property(e => e.KGastroDrucker).HasColumnName("kGastroDrucker");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.NArtikelSortierung)
                    .HasColumnName("nArtikelSortierung")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NArtikelVerteilung)
                    .HasColumnName("nArtikelVerteilung")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NAudioSignal)
                    .HasColumnName("nAudioSignal")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NDruckAnzahl)
                    .HasColumnName("nDruckAnzahl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NGleicheArtikelzusammenfassen)
                    .HasColumnName("nGleicheArtikelzusammenfassen")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NPapiervorlauf)
                    .HasColumnName("nPapiervorlauf")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PosgastroDruckerWarengruppe>(entity =>
            {
                entity.HasKey(e => e.KDruckerWarengruppe);

                entity.ToTable("POSGASTRO_DruckerWarengruppe");

                entity.Property(e => e.KDruckerWarengruppe).HasColumnName("kDruckerWarengruppe");

                entity.Property(e => e.KGastroDrucker).HasColumnName("kGastroDrucker");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            });

            modelBuilder.Entity<PosgastroGastroBon>(entity =>
            {
                entity.HasKey(e => e.KGastroBon);

                entity.ToTable("POSGASTRO_GastroBon");

                entity.Property(e => e.KGastroBon).HasColumnName("kGastroBon");

                entity.Property(e => e.CData)
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.KGastroDrucker)
                    .HasColumnName("kGastroDrucker")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KTisch)
                    .HasColumnName("kTisch")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NBelegNr)
                    .HasColumnName("nBelegNr")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NKopiendruck)
                    .HasColumnName("nKopiendruck")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NTyp)
                    .HasColumnName("nTyp")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PosgastroItems>(entity =>
            {
                entity.HasKey(e => e.KItem);

                entity.ToTable("POSGASTRO_Items");

                entity.HasIndex(e => e.KTisch, "IDX_POSGASTRO_Items_kTisch");

                entity.Property(e => e.KItem).HasColumnName("kItem");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("cData");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung");

                entity.Property(e => e.FMenge)
                    .HasColumnName("fMenge")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FPreis).HasColumnName("fPreis");

                entity.Property(e => e.KTisch).HasColumnName("kTisch");

                entity.Property(e => e.NGast)
                    .HasColumnName("nGast")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NSort)
                    .HasColumnName("nSort")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NZustand)
                    .HasColumnName("nZustand")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PosgastroRaum>(entity =>
            {
                entity.HasKey(e => e.KRaum);

                entity.ToTable("POSGASTRO_Raum");

                entity.Property(e => e.KRaum).HasColumnName("kRaum");

                entity.Property(e => e.BRaumplan)
                    .HasColumnType("image")
                    .HasColumnName("bRaumplan");

                entity.Property(e => e.CColor).HasColumnName("cColor");

                entity.Property(e => e.CName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.ISpacer)
                    .HasColumnName("iSpacer")
                    .HasDefaultValueSql("((15))");

                entity.Property(e => e.ISpalten)
                    .HasColumnName("iSpalten")
                    .HasDefaultValueSql("((4))");

                entity.Property(e => e.NTischCount)
                    .HasColumnName("nTischCount")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NTischStart)
                    .HasColumnName("nTischStart")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PosgastroTischSperre>(entity =>
            {
                entity.HasKey(e => e.KTischSperre);

                entity.ToTable("POSGASTRO_TischSperre");

                entity.Property(e => e.KTischSperre).HasColumnName("kTischSperre");

                entity.Property(e => e.DtErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dtErstellung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKasse).HasColumnName("kKasse");

                entity.Property(e => e.KTisch).HasColumnName("kTisch");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Product", "Report");

                entity.Property(e => e.AmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AmazonFNSKU");

                entity.Property(e => e.AmazonSalesPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Asin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.AvailableStock).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BasePriceValue).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.CountryOfOrigin)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.EBaySalesPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("eBaySalesPrice");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN");

                entity.Property(e => e.HazardIdnumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("HazardIDNumber");

                entity.Property(e => e.Height).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.IsSleditem).HasColumnName("IsSLEDItem");

                entity.Property(e => e.Isbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ISBN");

                entity.Property(e => e.Jtlfpid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JTLFPID");

                entity.Property(e => e.Length).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.MinimumOrderQuantity).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.MinimumStockLevel).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Mpn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("MPN");

                entity.Property(e => e.NetSalesPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.OrderedStock).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PackagingQuantity).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PackagingUnit).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PublicationDate).HasColumnType("datetime");

                entity.Property(e => e.PurchasePrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ReservedStock).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Rrp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("RRP");

                entity.Property(e => e.SearchTerms)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Series)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingClassName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingWeight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.Taric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TARIC");

                entity.Property(e => e.TotalStock).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Unnumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UNNumber");

                entity.Property(e => e.UoMquantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("UoMQuantity");

                entity.Property(e => e.Upc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPC");

                entity.Property(e => e.Weight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Width).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurchaseOrder", "Report");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Erstellung der Lieferantenbestellung");

                entity.Property(e => e.CurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Währung");

                entity.Property(e => e.CurrencyIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("Währung angegeben in ISO");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.DeliveryNoteInternalId).HasComment("ID des internen Lieferscheins");

                entity.Property(e => e.DifferentAddresses).HasComment("Gibt an, ob Liefer- und Rechnungsadresse unterschiedlich sind");

                entity.Property(e => e.ExportingDate)
                    .HasColumnType("datetime")
                    .HasComment("Exportierdatum der Lieferantenbestellung");

                entity.Property(e => e.FaxingDate)
                    .HasColumnType("datetime")
                    .HasComment("Faxdatum der Lieferantenbestellung");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Lieferantenbestellung");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Maildatum der Lieferantenbestellung");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(269)
                    .IsUnicode(false)
                    .HasComment("Auftrags-ID der Lieferantenbestellung");

                entity.Property(e => e.OwnPurchaseOrderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Eigene Bestellnummer der Lieferantenbestellung");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Druckdatum der Lieferantenbestellung");

                entity.Property(e => e.PrintingNote)
                    .IsUnicode(false)
                    .HasComment("Drucktext");

                entity.Property(e => e.PurchaseOrderBillToAddressInternalId).HasComment("Interne Rechnungsadresse der Lieferantenbestellung");

                entity.Property(e => e.PurchaseOrderSupplierAddressInternalId).HasComment("Interne Lieferantenadresse der Lieferantenbestellung");

                entity.Property(e => e.PurchaseOrderSupplierInternalId).HasComment("Interne ID des Lieferanten für die Lieferantenbestellung");

                entity.Property(e => e.ReferenceSalesOrderId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Auftragsnummer wenn Bezug zu einem Kundenauftrag besteht");

                entity.Property(e => e.Status)
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasComment("Status der Lieferantenbestellung");

                entity.Property(e => e.SupplierInternalId).HasComment("Interne ID des Lieferanten");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis der Lieferantenbestellung");

                entity.Property(e => e.TotalGrossPriceDiscount)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Rabatt des Gesamtbruttopreises der Lieferantenbestellung");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtnettopreis der Lieferantenbestellung");

                entity.Property(e => e.TotalNetPriceDiscount)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Rabatt des Gesamtnettopreises der Lieferantenbestellung");

                entity.Property(e => e.TotalVatprice)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("TotalVATPrice")
                    .HasComment("Zeigt an, wie hoch die MwSt der Lieferantenbestellung ist");

                entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers");

                entity.Property(e => e.WarehouseInternalId).HasComment("Interne ID des Lagers");
            });

            modelBuilder.Entity<PurchaseOrderBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurchaseOrderBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Strasse des Empfängers");

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Adresszusatz des Empfängers");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Ort des Empfängers");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Firma der Adresse");

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Firmenzusatz des Empfängers");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Landes des Empfängers");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("E-Mail-Adresse des Empfängers");

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Faxnummer des Empfängers");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Vorname des Empfängers");

                entity.Property(e => e.InternalId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Interne ID der Adresse");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Nachname des Empfängers");

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Mobilnummer des Empfängers");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Telefonnummer des Empfängers");

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("PLZ des Empfängers");

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Anrede des Empfängers");

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bundesland des Empfängers");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Titel des Empfängers");
            });

            modelBuilder.Entity<PurchaseOrderPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurchaseOrderPosition", "Report");

                entity.Property(e => e.DeliveredQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Menge der gelieferten Artikel pro Position");

                entity.Property(e => e.DeliveryDays).HasComment("Anzahl der Liefertage");

                entity.Property(e => e.DeliveryNotePositionInternalId).HasComment("Interne Id der Lieferscheinposition");

                entity.Property(e => e.GrossPricePerUnit)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzel-Bruttopreis des Artikels");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Lieferantenbestellungsposition");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bezeichnung der Position");

                entity.Property(e => e.NameOfSupplier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name des Lieferanten");

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis zur Position");

                entity.Property(e => e.OpenQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl noch ausstehender Artikel pro Position");

                entity.Property(e => e.PositionType)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasComment("Typ der Position");

                entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels in der Position");

                entity.Property(e => e.PurchaseOrderInternalId).HasComment("Interne ID der Lieferantenbestellung");

                entity.Property(e => e.PurchasePriceNetPerUnit)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Einzel-Nettopreis des Artikels");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl pro Position (Menge?)");

                entity.Property(e => e.Sku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Nummer des Artikels in der Position");

                entity.Property(e => e.Skusupplier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("SKUSupplier")
                    .HasComment("Artikelnummer des Lieferanten in der Position");

                entity.Property(e => e.SupplierName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bezeichnung des Lieferanten");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamt-Bruttopreis des Artikel über die Anzahl in der Position");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamt-Nettopreis des Artikel über die Anzahl in der Position");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt in Prozent");

                entity.Property(e => e.Vatvalue)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATValue")
                    .HasComment("MwSt.-Betrag");
            });

            modelBuilder.Entity<PurchaseOrderShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurchaseOrderShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InternalId).ValueGeneratedOnAdd();

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PurchaseOrderSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PurchaseOrderSupplier", "Report");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Strasse des Lieferanten");

                entity.Property(e => e.AddressSupplement)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Adresszusatz des Lieferanten");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Ort des Lieferanten");

                entity.Property(e => e.Company)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Firmenname");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Vorname des Ansprechpartners beim Lieferanten");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Nachname des Ansprechpartners beim Lieferanten");

                entity.Property(e => e.ContactSalutation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Anrede des Ansprechpartners beim Lieferanten");

                entity.Property(e => e.CountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Landes");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Emailadresse des Lieferanten");

                entity.Property(e => e.Fax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Faxnummer des Lieferanten");

                entity.Property(e => e.FirmenSupplement)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Firmenzusatz des Lieferanten");

                entity.Property(e => e.InternalId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Interne ID des Lieferanten der Lieferantenbestellung");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Mobilnumme des Lieferanten");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Telefonnummer des Lieferanten");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("PLZ des Lieferanten");

                entity.Property(e => e.State)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bundesland des Lieferanten");

                entity.Property(e => e.SupplierInternalId).HasComment("Interne ID des Lieferanten");
            });

            modelBuilder.Entity<ReceiptOfPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ReceiptOfPayment", "Report");

                entity.Property(e => e.CashDiscount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.CashDiscountValue).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.Comment)
                    .HasMaxLength(4500)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO");

                entity.Property(e => e.CustomerSalesOrderNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.CustomerText).IsUnicode(false);

                entity.Property(e => e.DeliveryNoteAsPdfpath).HasColumnName("DeliveryNoteAsPDFPath");

                entity.Property(e => e.ExemptFromVat)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("ExemptFromVAT");

                entity.Property(e => e.ExternalSalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ExtraWeight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.InvoiceAsPdfpath).HasColumnName("InvoiceAsPDFPath");

                entity.Property(e => e.IsShippingMethodCod).HasColumnName("IsShippingMethodCOD");

                entity.Property(e => e.MailingDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentNotificationDateByEmail).HasColumnType("datetime");

                entity.Property(e => e.PaymentReference)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Platform)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.PrintingDate).HasColumnType("datetime");

                entity.Property(e => e.ReasonForRetention)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCountryCurrencyFactor).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShipFromCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryCurrencyISO");

                entity.Property(e => e.ShippingBox)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TotalGrossPrice).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.TotalNetPrice).HasColumnType("decimal(25, 13)");
            });

            modelBuilder.Entity<SalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrder", "Report");

                entity.Property(e => e.CashDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Skonto in Prozent");

                entity.Property(e => e.CashDiscountValidity).HasComment("Gültigkeit des Skonto in Tagen");

                entity.Property(e => e.CashDiscountValue)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Wert des Skontos");

                entity.Property(e => e.Comment)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasComment("Anmerkung zum Auftrag");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne Id der Firma");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO")
                    .HasComment("ISO-Code des Ziellandes des Auftrags");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum des Auftrags");

                entity.Property(e => e.CurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Währung");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währung ");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden");

                entity.Property(e => e.CustomerSalesOrderNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Kundenauftragsnummer");

                entity.Property(e => e.CustomerText)
                    .IsUnicode(false)
                    .HasComment("Kundendrucktext des Auftrags");

                entity.Property(e => e.DeliveryNoteAsPdfpath)
                    .HasColumnName("DeliveryNoteAsPDFPath")
                    .HasComment("PDF-Pfad des Lieferscheins des Händlers im Auftrag");

                entity.Property(e => e.DifferentAddresses).HasComment("Gibt an, ob Rechnungs- und Lieferadresse unterschiedlich sind");

                entity.Property(e => e.ExemptFromVat)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("ExemptFromVAT")
                    .HasComment("Art der Steuerbefreiung Typfeld");

                entity.Property(e => e.ExternalSalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Externe Nummer des Auftrags");

                entity.Property(e => e.ExtraWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Zustäztliches Gewicht des Auftrags");

                entity.Property(e => e.FinancingCosts)
                    .HasColumnType("numeric(25, 13)")
                    .HasComment("Finanzierungskosten");

                entity.Property(e => e.HasDeliveryNoteAsPdf)
                    .HasColumnName("HasDeliveryNoteAsPDF")
                    .HasComment("Versandanmerkung als PDF vorhanden");

                entity.Property(e => e.HasInvoiceAsPdf)
                    .HasColumnName("HasInvoiceAsPDF")
                    .HasComment("Rechnung als PDF vorhanden");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Auftrags");

                entity.Property(e => e.InvoiceAsPdfpath)
                    .HasColumnName("InvoiceAsPDFPath")
                    .HasComment("PDF-Pfad der Rechnung des Händlers im Auftrag");

                entity.Property(e => e.IsCancelled).HasComment("Gibt an, ob der Auftrag storniert ist");

                entity.Property(e => e.IsPaid).HasComment("Gibt an, ob der Auftrag bezahlt ist");

                entity.Property(e => e.IsShippingMethodCod)
                    .HasColumnName("IsShippingMethodCOD")
                    .HasComment("Gibt an, ob die Zahlungsart des Auftrags Nachnahme ist");

                entity.Property(e => e.IstExterneRechnung).HasComment("Externe Rechnung des Auftrags");

                entity.Property(e => e.LanguageInternalId).HasComment("Interne ID der verwendeten Sprache");

                entity.Property(e => e.LanguageIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .IsFixedLength(true)
                    .HasComment("ISO der Sprache");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum an dem die Email zum Auftrag gesendet wurde");

                entity.Property(e => e.OpenGrossPrice)
                    .HasColumnType("decimal(31, 14)")
                    .HasComment("Noch zu zahlender Betrag");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasComment("Auftrags-ID des Vorgangs");

                entity.Property(e => e.OrderType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum, an dem die Zahlung zum Auftrag gesetzt wurde");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Zahlungsart des Auftrags");

                entity.Property(e => e.PaymentNotificationDateByEmail)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Zahlungsbenachrichtigung per Mail");

                entity.Property(e => e.PaymentReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Verwendungszweck des Auftrags");

                entity.Property(e => e.Platform)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasComment("Plattform, aus der der Auftrag kommt");

                entity.Property(e => e.PlatformInternalId).HasComment("Interne ID der Plattform aus der der Auftrag kommt");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum an dem der Auftag gedruckt wurde");

                entity.Property(e => e.Priority).HasComment("Mit Expressversand");

                entity.Property(e => e.ReasonForRetention)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Name des Rückhaltegrundes");

                entity.Property(e => e.SalesOrderNote)
                    .IsUnicode(false)
                    .HasComment("Anmerkung zum Auftrag");

                entity.Property(e => e.SalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer des Auftrags");

                entity.Property(e => e.ServiceDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Lieferung");

                entity.Property(e => e.ShipFromCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Versandlandwährung");

                entity.Property(e => e.ShipFromCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryCurrencyISO")
                    .HasComment("ISO-Code der Versandlandwährung");

                entity.Property(e => e.ShipFromCountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryISO")
                    .HasComment("ISO-Code des Versandland des Auftrags");

                entity.Property(e => e.ShippingBox)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Versandbox für WMS-Auftrag");

                entity.Property(e => e.ShippingMethodInternalId).HasComment("Interne ID der Versandart");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Status des Auftrags");

                entity.Property(e => e.TaxCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("ISO-Code des Währungfaktors des Steuerlandes im Auftrag");

                entity.Property(e => e.TaxCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryCurrencyISO")
                    .HasComment("ISO-Code der Währung des Steuerlandes im Auftrag");

                entity.Property(e => e.TaxCountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryISO")
                    .HasComment("ISO-Code des Steuerlandes des Auftrags");

                entity.Property(e => e.TermOfPayment).HasComment("Zahlungsziel des Auftrags in Tagen");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis des Auftrags");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis Gesamt des Auftrags");

                entity.Property(e => e.UseNetPrice).HasComment("Es werden Nettopreise angezeigt");

                entity.Property(e => e.UserInternalId).HasComment("Interne Benutzer-ID");

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("Umsatzsteuer-ID des Auftrags");
            });

            modelBuilder.Entity<SalesOrderAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderAttribute", "Report");

                entity.Property(e => e.AttributeName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesOrderBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesOrderPaymentInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderPaymentInformation", "Report");

                entity.Property(e => e.DebitAccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DebitBank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DebitBic)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("DebitBIC");

                entity.Property(e => e.DebitCreditorId)
                    .HasMaxLength(35)
                    .IsUnicode(false);

                entity.Property(e => e.DebitDueDate).HasColumnType("datetime");

                entity.Property(e => e.DebitEndToEndId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DebitIban)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("DebitIBAN");

                entity.Property(e => e.DebitMandateReference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DebitSubject)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.FinancingCosts).HasColumnType("numeric(25, 13)");

                entity.Property(e => e.PayPalId)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeAccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeBank)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeBic)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PayeeBIC");

                entity.Property(e => e.PayeeDueDate).HasColumnType("datetime");

                entity.Property(e => e.PayeeEndToEndId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PayeeIban)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("PayeeIBAN");

                entity.Property(e => e.PayeeSubject)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.PaymentInfo).IsUnicode(false);

                entity.Property(e => e.PaymentMethodType)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false);

                entity.Property(e => e.TransferAccountHolder)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TransferBank)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferBic)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TransferBIC");

                entity.Property(e => e.TransferDueDate).HasColumnType("datetime");

                entity.Property(e => e.TransferEndToEndId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferIban)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("TransferIBAN");

                entity.Property(e => e.TransferSubject)
                    .HasMaxLength(61)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesOrderPayments>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderPayments", "Report");

                entity.Property(e => e.ExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Transaktions-ID");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Zahlung");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Zahlung");

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis zur Zahlung");

                entity.Property(e => e.PaymentDate)
                    .HasColumnType("datetime")
                    .HasComment("Zahlungsdatum");

                entity.Property(e => e.PaymentMethod)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Zahlungsart");

                entity.Property(e => e.PaymentType)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasComment("Gibt den Typ der Zahlung an");

                entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID des Auftrags");

                entity.Property(e => e.StandardChartOfAccountsManual)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Standardkontenrahmen DATEV-Kontenrahmen");

                entity.Property(e => e.Value)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Betrag der Zahlung");
            });

            modelBuilder.Entity<SalesOrderPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderPosition", "Report");

                entity.Property(e => e.AmazonCustomJson)
                    .IsUnicode(false)
                    .HasColumnName("AmazonCustomJSON")
                    .HasComment("Amazon Custom JSON-Datei");

                entity.Property(e => e.BillOfMaterialsPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Komponente der Stückliste");

                entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Vaterartikel-ID der Stücklistenposition");

                entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels");

                entity.Property(e => e.ConfiguratorPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Gibt den Typ der Konfiguratorposition an");

                entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Position des Vaterartikels des Konfigurationsartikels");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Rabatt in Prozent");

                entity.Property(e => e.DiscountValue)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Rabattbetrag");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN")
                    .HasComment("Internationale Artikelnummer");

                entity.Property(e => e.GrossPricePerUnit)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelbruttopreis des Artikels");

                entity.Property(e => e.IndividualShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelversandgewicht des Artikels");

                entity.Property(e => e.IndividualWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelgewicht des Artikels");

                entity.Property(e => e.InternalId).HasComment("Interne ID der Auftragsposition");

                entity.Property(e => e.IsAmazonCustomPosition).HasComment("Amazon Custom-Position");

                entity.Property(e => e.ItemDescriptionBrief)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasComment("Kurze Artikelbeschreibung");

                entity.Property(e => e.ItemDescriptionDetailed)
                    .IsUnicode(false)
                    .HasComment("Lange Artikelbeschreibung");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bezeichnung für den Druck, Speichern oder E-Mail senden");

                entity.Property(e => e.NetPricePerUnit)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Einzelnettopreis des Artikels");

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis zur Position");

                entity.Property(e => e.PositionType)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasComment("Typ der Position");

                entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels in der Position");

                entity.Property(e => e.PurchasePriceNet)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Netto Einkaufspreis des Artikels");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl des Artikels in einer Position");

                entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID des Auftrags");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Artikelnummer");

                entity.Property(e => e.Sorting).HasComment("Wert zu Sortierung der Position innerhalb des Auftrags");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis über die Anzahl des Artikels in der Position");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtnettopreis über die Anzahl des Artikels in der Position");

                entity.Property(e => e.TotalShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtversandgewicht der Position");

                entity.Property(e => e.TotalWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtgewicht der Position");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Einheit des Artikels");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt. in Prozent");

                entity.Property(e => e.Vatvalue)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATValue")
                    .HasComment("Betrag der MwSt.");
            });

            modelBuilder.Entity<SalesOrderPositionConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderPositionConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesOrderPositionDeliveryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderPositionDeliveryDetails", "Report");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesOrderShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesOrderShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesQuotation", "Report");

                entity.Property(e => e.CashDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Skonto des Angebots");

                entity.Property(e => e.CashDiscountValidity).HasComment("Skontogültigkeitszeitraum in Tagen");

                entity.Property(e => e.CashDiscountValue)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Skontowert des Angebots");

                entity.Property(e => e.Comment)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasComment("Anmerkung zum Angebot");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CreationDate)
                    .HasColumnType("datetime")
                    .HasComment("Erstelldatum des Angebots");

                entity.Property(e => e.CurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Währung");

                entity.Property(e => e.CurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("CurrencyISO")
                    .HasComment("ISO-Code der Währungsangabe");

                entity.Property(e => e.CustomerInternalId).HasComment("Interne ID des Kunden im Angebot");

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasComment("Kundennummer im Angebot");

                entity.Property(e => e.CustomerSalesQuotationNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasComment("Kundenangebotsnummer");

                entity.Property(e => e.CustomerText)
                    .IsUnicode(false)
                    .HasComment("Kundentext");

                entity.Property(e => e.DifferentAddresses).HasComment("Gibt an, ob Rechnungs- und Lieferadresse unterschiedlich sind");

                entity.Property(e => e.ExemptFromVat)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("ExemptFromVAT")
                    .HasComment("Umsatzsteuerfrei");

                entity.Property(e => e.ExtraWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Zusatzgewicht des Angebots");

                entity.Property(e => e.FinancingCosts)
                    .HasColumnType("numeric(25, 13)")
                    .HasComment("Finanzierungskosten");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Angebots");

                entity.Property(e => e.IsShippingMethodCod)
                    .HasColumnName("IsShippingMethodCOD")
                    .HasComment("Gibt an, ob Nachnahme als Versandart angegeben ist");

                entity.Property(e => e.LanguageInternalId).HasComment("Interne ID der verwendeten Sprache");

                entity.Property(e => e.LanguageIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("LanguageISO")
                    .IsFixedLength(true)
                    .HasComment("ISO-Code der Sprache des Angebots");

                entity.Property(e => e.MailingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum des Mailversands");

                entity.Property(e => e.OperationId)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasComment("Art des Vorgangs (hier Angebot)");

                entity.Property(e => e.PaymentInfo)
                    .IsUnicode(false)
                    .HasComment("Drucktext für Rechnungskauf");

                entity.Property(e => e.PaymentMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name der Zahlungsart");

                entity.Property(e => e.PaymentReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Verwendungszweck des Angebots");

                entity.Property(e => e.Platform)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasComment("Gibt die Plattform an, von der das Angebot kommt");

                entity.Property(e => e.PrintingDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum des Drucks des Angebots");

                entity.Property(e => e.SalesQuotationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComment("Nummer des Angebots");

                entity.Property(e => e.ServiceDate)
                    .HasColumnType("datetime")
                    .HasComment("Datum der Lieferung ");

                entity.Property(e => e.ShipFromCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Faktor zur Umrechnung der Versandlandwährung");

                entity.Property(e => e.ShipFromCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryCurrencyISO")
                    .HasComment("ISO-Code der Versandlandwährungsangabe");

                entity.Property(e => e.ShipFromCountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ShipFromCountryISO")
                    .HasComment("ISO-Code des Versandlandes im Angebot");

                entity.Property(e => e.Status)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Status des Angebots");

                entity.Property(e => e.TaxCountryCurrencyFactor)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Währungsfaktor des Steuerlandes im Angebot");

                entity.Property(e => e.TaxCountryCurrencyIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryCurrencyISO");

                entity.Property(e => e.TaxCountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TaxCountryISO")
                    .HasComment("ISO-Code des Steuerlandes im Angebot");

                entity.Property(e => e.TermOfPayment).HasComment("Zahlungsziel in Tagen");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis des Angebots");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtnettopreis des Angebots");

                entity.Property(e => e.UseNetPrice).HasComment("Nettopreise benutzen");

                entity.Property(e => e.UserInternalId).HasComment("Interne ID des Benutzers im Angebot");

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasComment("USt-IdNr. des Angebots");
            });

            modelBuilder.Entity<SalesQuotationBillToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesQuotationBillToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesQuotationPosition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesQuotationPosition", "Report");

                entity.Property(e => e.BillOfMaterialsPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Typ des Stücklistenangebots");

                entity.Property(e => e.BillOfMaterialsPositionParentId).HasComment("Typ der Vaterartikel-ID des Stücklistenangebots der Angebotsposition");

                entity.Property(e => e.ConfigurationItemInternalId).HasComment("Interne ID des Konfigurationsartikels im Angebot");

                entity.Property(e => e.ConfiguratorPosition)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasComment("Gibt den Typ der Konfiguratorposition an");

                entity.Property(e => e.ConfiguratorPositionParentId).HasComment("Typ der Vaterartikel-ID des Konfigurationsangebots der Angebotsposition");

                entity.Property(e => e.DiscountRate)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Rabatt in Prozent");

                entity.Property(e => e.DiscountValue)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Rabattbetrag");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN")
                    .HasComment("Internationale Artikelnummer");

                entity.Property(e => e.GrossPricePerUnit)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis Einzel des Artikels");

                entity.Property(e => e.IndividualShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzel-Versandgewicht des Artikels");

                entity.Property(e => e.IndividualWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Einzelgewicht des Artikels");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Angebots");

                entity.Property(e => e.ItemDescriptionBrief)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasComment("Kurze Artikelbeschreibung");

                entity.Property(e => e.ItemDescriptionDetailed)
                    .IsUnicode(false)
                    .HasComment("Lange Artikelbeschreibung");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Drucktext");

                entity.Property(e => e.NetPricePerUnit)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Nettopreis Einzel des Artikels");

                entity.Property(e => e.Note)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasComment("Hinweis zur Angebotsposition");

                entity.Property(e => e.PositionType)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasComment("Typ der Position");

                entity.Property(e => e.ProductInternalId).HasComment("Interne ID des Artikels in der Position");

                entity.Property(e => e.PurchasePriceNet)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Nettoeinkaufspreis des Artikels");

                entity.Property(e => e.Quantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasComment("Anzahl des Artikels in der Position");

                entity.Property(e => e.SalesQuotationInternalId).HasComment("Interne Angebots-ID der Angebotsposition");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU")
                    .HasComment("Nummer des Artikels in der Position");

                entity.Property(e => e.Sorting).HasComment("Sortierung der Positionen innerhalb eines Angebots");

                entity.Property(e => e.TotalGrossPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttpreis Gesamt über die Anzahl des Artikels in der Position");

                entity.Property(e => e.TotalNetPrice)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis Gesamt über die Anzahl des Artikels in der Position");

                entity.Property(e => e.TotalShippingWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamt-Versandgewicht des Artikels über die Anzahl in der Position");

                entity.Property(e => e.TotalWeight)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtgewicht des Artikels über die Anzahl in der Position");

                entity.Property(e => e.Unit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Einheit des Artikels");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt in Prozent");

                entity.Property(e => e.Vatvalue)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATValue")
                    .HasComment("Betrag der MwSt");
            });

            modelBuilder.Entity<SalesQuotationPositionConfiguration>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesQuotationPositionConfiguration", "Report");

                entity.Property(e => e.AdditionalNetPrice).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValueText)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesQuotationPositionDeliveryDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesQuotationPositionDeliveryDetails", "Report");

                entity.Property(e => e.BatchNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BestBeforeDate).HasColumnType("datetime");

                entity.Property(e => e.Quantity).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SalesQuotationShipToAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalesQuotationShipToAddress", "Report");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CustomerNumber)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MobilePhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ShippingMethod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ShippingMethod", "Report");

                entity.Property(e => e.AdditionalWeight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.AmazonCarrierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CTrackingUrlTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingUrlTemplate");

                entity.Property(e => e.EbayCarrierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingCostsFree).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate");

                entity.Property(e => e.WeighingMandatory)
                    .HasMaxLength(32)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ShippingNotification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ShippingNotification", "Report");

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryNoteNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DeliveryNoteText).IsUnicode(false);

                entity.Property(e => e.MailingDate).HasColumnType("datetime");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SalesOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Supplier", "Report");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.AddressSupplement)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Comment).IsUnicode(false);

                entity.Property(e => e.Company)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySupplement)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Contact)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CountryISO");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Fax)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(126)
                    .IsUnicode(false);

                entity.Property(e => e.InternalId).ValueGeneratedOnAdd();

                entity.Property(e => e.LastName)
                    .HasMaxLength(126)
                    .IsUnicode(false);

                entity.Property(e => e.OwnCustomerNumber)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneDirectDialing)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneOffice)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Salutation)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.State)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ValueAddedTaxId)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.WebsiteUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("WebsiteURL");
            });

            modelBuilder.Entity<TAbrechnung>(entity =>
            {
                entity.HasKey(e => e.KAbrechnung);

                entity.ToTable("tAbrechnung", "FulfillmentNetwork");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.CAbrechnungsNummer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAbrechnungsNummer");

                entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");

                entity.Property(e => e.DAbrechnungBis)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungBis");

                entity.Property(e => e.DAbrechnungVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungVon");

                entity.Property(e => e.DAuftragErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAuftragErstellt");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");
            });

            modelBuilder.Entity<TAbrechnungEinzelnachweis>(entity =>
            {
                entity.HasKey(e => e.KAbrechnungEinzelnachweis);

                entity.ToTable("tAbrechnungEinzelnachweis", "FulfillmentNetwork");

                entity.Property(e => e.KAbrechnungEinzelnachweis).HasColumnName("kAbrechnungEinzelnachweis");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KAbrechnungPos).HasColumnName("kAbrechnungPos");

                entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");

                entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            });

            modelBuilder.Entity<TAbrechnungLagerplatz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tAbrechnungLagerplatz", "FulfillmentNetwork");

                entity.Property(e => e.KAbrechnungLagerplatz)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kAbrechnungLagerplatz");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");

                entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");

                entity.Property(e => e.NModus).HasColumnName("nModus");
            });

            modelBuilder.Entity<TAbrechnungLagerplatzPreview>(entity =>
            {
                entity.HasKey(e => e.KAbrechnungLagerplatz);

                entity.ToTable("tAbrechnungLagerplatzPreview", "FulfillmentNetwork");

                entity.Property(e => e.KAbrechnungLagerplatz).HasColumnName("kAbrechnungLagerplatz");

                entity.Property(e => e.CSessionId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");

                entity.Property(e => e.NLagerkostenBerechnung).HasColumnName("nLagerkostenBerechnung");

                entity.Property(e => e.NModus).HasColumnName("nModus");
            });

            modelBuilder.Entity<TAbrechnungPos>(entity =>
            {
                entity.HasKey(e => e.KAbrechnungPos);

                entity.ToTable("tAbrechnungPos", "FulfillmentNetwork");

                entity.Property(e => e.KAbrechnungPos).HasColumnName("kAbrechnungPos");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CBezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezeichnung");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KAbrechnungStueckliste).HasColumnName("kAbrechnungStueckliste");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<TAbverkauf>(entity =>
            {
                entity.HasKey(e => e.KAbverkauf)
                    .HasName("PK_Repricer_tAbverkauf");

                entity.ToTable("tAbverkauf", "Repricer");

                entity.Property(e => e.KAbverkauf).HasColumnName("kAbverkauf");

                entity.Property(e => e.FAenderungMaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAenderungMaxPreis");

                entity.Property(e => e.FAenderungMinPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAenderungMinPreis");

                entity.Property(e => e.NAenderungMaxPreisTyp).HasColumnName("nAenderungMaxPreisTyp");

                entity.Property(e => e.NAenderungMinPreisTyp).HasColumnName("nAenderungMinPreisTyp");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NBestandBis).HasColumnName("nBestandBis");
            });

            modelBuilder.Entity<TAdressExportFelder>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tAdressExportFelder");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPrefix)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPrefix");

                entity.Property(e => e.CStandardWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStandardWert");

                entity.Property(e => e.CSuffix)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuffix");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.CZusatzzeile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZusatzzeile");

                entity.Property(e => e.KAdressExportVorlage).HasColumnName("kAdressExportVorlage");

                entity.Property(e => e.NFeldNr).HasColumnName("nFeldNr");

                entity.Property(e => e.NMaxlen).HasColumnName("nMaxlen");
            });

            modelBuilder.Entity<TAdressExportFelderErweitert>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tAdressExportFelderErweitert");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.CZone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZone");

                entity.Property(e => e.KAdressExportVorlage).HasColumnName("kAdressExportVorlage");

                entity.Property(e => e.NFeldNr).HasColumnName("nFeldNr");
            });

            modelBuilder.Entity<TAdressExportVorlage>(entity =>
            {
                entity.HasKey(e => e.KAdressExportVorlage);

                entity.ToTable("tAdressExportVorlage");

                entity.Property(e => e.KAdressExportVorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kAdressExportVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CKomma)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("cKomma")
                    .HasDefaultValueSql("('.')");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPfad)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cPfad");

                entity.Property(e => e.CTrennzeichen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cTrennzeichen");

                entity.Property(e => e.DErstellt)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("dErstellt");

                entity.Property(e => e.NKopfzeile)
                    .HasColumnName("nKopfzeile")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NZusatzzeile).HasColumnName("nZusatzzeile");
            });

            modelBuilder.Entity<TAdresse>(entity =>
            {
                entity.HasKey(e => e.KAdresse);

                entity.ToTable("tAdresse");

                entity.HasIndex(e => e.KKunde, "IX_tAdresse_kKunde");

                entity.HasIndex(e => new { e.KKunde, e.NTyp, e.NStandard }, "IX_tAdresse_kKunde_nTyp_nStandard");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TAgentAngeseheneTickets>(entity =>
            {
                entity.HasKey(e => e.KAgentAngeseheneTickets)
                    .HasName("PK_Ticketsystem_tAgentAngeseheneTickets");

                entity.ToTable("tAgentAngeseheneTickets", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tAgentAngeseheneTickets_kBenutzer");

                entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tAgentAngeseheneTickets_kNachricht");

                entity.HasIndex(e => e.KNotiz, "IX_Ticketsystem_tAgentAngeseheneTickets_kNotiz");

                entity.HasIndex(e => e.KTelefonat, "IX_Ticketsystem_tAgentAngeseheneTickets_kTelefonat");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tAgentAngeseheneTickets_kTicket");

                entity.HasIndex(e => new { e.KBenutzer, e.KTicket }, "UQ_Ticketsystem_tAgentAngeseheneTickets_kBenutzer_kTicket")
                    .IsUnique();

                entity.Property(e => e.KAgentAngeseheneTickets).HasColumnName("kAgentAngeseheneTickets");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.KNotiz).HasColumnName("kNotiz");

                entity.Property(e => e.KTelefonat).HasColumnName("kTelefonat");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TAgentAngeseheneTickets)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kNachricht");

                entity.HasOne(d => d.KNotizNavigation)
                    .WithMany(p => p.TAgentAngeseheneTickets)
                    .HasForeignKey(d => d.KNotiz)
                    .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kNotiz");

                entity.HasOne(d => d.KTelefonatNavigation)
                    .WithMany(p => p.TAgentAngeseheneTickets)
                    .HasForeignKey(d => d.KTelefonat)
                    .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kTelefonat");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TAgentAngeseheneTickets)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tAgentAngeseheneTickets_kTicket");
            });

            modelBuilder.Entity<TAgentLiestTicket>(entity =>
            {
                entity.HasKey(e => e.KAgentLiestTicket)
                    .HasName("PK_Ticketsystem_tAgentLiestTicket");

                entity.ToTable("tAgentLiestTicket", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tAgentLiestTicket_kBenutzer");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tAgentLiestTicket_kTicket");

                entity.Property(e => e.KAgentLiestTicket).HasColumnName("kAgentLiestTicket");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TAgentLiestTicket)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tAgentLiestTicket_kTicket");
            });

            modelBuilder.Entity<TAktiverAbgleich>(entity =>
            {
                entity.HasKey(e => e.KAktiverEmailAbgleich)
                    .HasName("PK_Ticketsystem_tAktiverAbgleich");

                entity.ToTable("tAktiverAbgleich", "Ticketsystem");

                entity.Property(e => e.KAktiverEmailAbgleich).HasColumnName("kAktiverEmailAbgleich");

                entity.Property(e => e.CHostname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("cHostname");

                entity.Property(e => e.DLock)
                    .HasColumnType("datetime")
                    .HasColumnName("dLock");
            });

            modelBuilder.Entity<TAmazonAngebotFehler>(entity =>
            {
                entity.HasKey(e => e.KAmazonAngebotFehler)
                    .HasName("PK_Amazon_tAmazonAngebotFehler");

                entity.ToTable("tAmazonAngebotFehler", "Amazon");

                entity.HasIndex(e => new { e.KUser, e.NPlattform, e.CSku }, "IX_Amazon_tAmazonAngebotFehler_kUser_nPlattform_cSku");

                entity.Property(e => e.KAmazonAngebotFehler).HasColumnName("kAmazonAngebotFehler");

                entity.Property(e => e.CFehlerCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cFehlerCode");

                entity.Property(e => e.CFehlerText)
                    .IsRequired()
                    .HasColumnName("cFehlerText");

                entity.Property(e => e.CFehlerTyp).HasColumnName("cFehlerTyp");

                entity.Property(e => e.CSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cSku");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.HasOne(d => d.KUserNavigation)
                    .WithMany(p => p.TAmazonAngebotFehler)
                    .HasForeignKey(d => d.KUser)
                    .HasConstraintName("FK_Amazon_tAmazonAngebotFehler_kUser");
            });

            modelBuilder.Entity<TAmazonBuyBoxStrategy>(entity =>
            {
                entity.HasKey(e => e.KAmazonBuyBoxStrategy)
                    .HasName("PK_Repricer_tAmazonBuyBoxStrategy");

                entity.ToTable("tAmazonBuyBoxStrategy", "Repricer");

                entity.Property(e => e.KAmazonBuyBoxStrategy).HasColumnName("kAmazonBuyBoxStrategy");

                entity.Property(e => e.FMaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMaxPreis");

                entity.Property(e => e.FMaxPreisAufschlagProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMaxPreisAufschlagProzent");

                entity.Property(e => e.FMinPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMinPreis");

                entity.Property(e => e.FMinPreisAufschlagProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMinPreisAufschlagProzent");

                entity.Property(e => e.FPreisabstand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisabstand");

                entity.Property(e => e.NAufschlagProzentNutzen).HasColumnName("nAufschlagProzentNutzen");

                entity.Property(e => e.NPreisabstandNutzen).HasColumnName("nPreisabstandNutzen");
            });

            modelBuilder.Entity<TAmazonCompetitor>(entity =>
            {
                entity.HasKey(e => e.KAmazonCompetitor)
                    .HasName("PK_Repricer_tAmazonCompetitor");

                entity.ToTable("tAmazonCompetitor", "Repricer");

                entity.HasIndex(e => new { e.KAmazonCompetitorAsinStrategy, e.CAsin }, "UQ_Repricer_tAmazonCompetitor_kAmazonCompetitorAsinStrategy_cAsin")
                    .IsUnique();

                entity.Property(e => e.KAmazonCompetitor).HasColumnName("kAmazonCompetitor");

                entity.Property(e => e.CAsin)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cAsin");

                entity.Property(e => e.CBewertungAfn)
                    .HasMaxLength(100)
                    .HasColumnName("cBewertungAfn");

                entity.Property(e => e.CBewertungMfn)
                    .HasMaxLength(100)
                    .HasColumnName("cBewertungMfn");

                entity.Property(e => e.CLieferzeitAfn)
                    .HasMaxLength(100)
                    .HasColumnName("cLieferzeitAfn");

                entity.Property(e => e.CLieferzeitMfn)
                    .HasMaxLength(100)
                    .HasColumnName("cLieferzeitMfn");

                entity.Property(e => e.DLetztePreisAktualisierung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetztePreisAktualisierung");

                entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");

                entity.Property(e => e.NAnzahlBewertungenAfn).HasColumnName("nAnzahlBewertungenAfn");

                entity.Property(e => e.NAnzahlBewertungenMfn).HasColumnName("nAnzahlBewertungenMfn");

                entity.Property(e => e.NMinPreisAfn)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMinPreisAfn");

                entity.Property(e => e.NMinPreisMfn)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMinPreisMfn");

                entity.HasOne(d => d.KAmazonCompetitorAsinStrategyNavigation)
                    .WithMany(p => p.TAmazonCompetitor)
                    .HasForeignKey(d => d.KAmazonCompetitorAsinStrategy)
                    .HasConstraintName("FK_Repricer_tAmazonCompetitor_kAmazonCompetitorAsinStrategy");
            });

            modelBuilder.Entity<TAmazonCompetitorAsinStrategy>(entity =>
            {
                entity.HasKey(e => e.KAmazonCompetitorAsinStrategy)
                    .HasName("PK_Repricer_tAmazonCompetitorAsinStrategy");

                entity.ToTable("tAmazonCompetitorAsinStrategy", "Repricer");

                entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");

                entity.Property(e => e.FMaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMaxPreis");

                entity.Property(e => e.FMaxPreisAufschlagProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMaxPreisAufschlagProzent");

                entity.Property(e => e.FMinPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMinPreis");

                entity.Property(e => e.FMinPreisAufschlagProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMinPreisAufschlagProzent");

                entity.Property(e => e.FPreisabstand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisabstand");

                entity.Property(e => e.NAufschlagProzentNutzen).HasColumnName("nAufschlagProzentNutzen");

                entity.Property(e => e.NDeliveryTimeMax).HasColumnName("nDeliveryTimeMax");

                entity.Property(e => e.NDeliveryTimeMin).HasColumnName("nDeliveryTimeMin");

                entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");

                entity.Property(e => e.NRating).HasColumnName("nRating");

                entity.Property(e => e.NRatingCount).HasColumnName("nRatingCount");
            });

            modelBuilder.Entity<TAmazonShippingDruckereinstellungen>(entity =>
            {
                entity.HasKey(e => e.KAmazonShippingDruckereinstellungen)
                    .HasName("PK_tAmazonShippingDruckereinstellungen_kAmazonShippingDruckereinstellungen");

                entity.ToTable("tAmazonShippingDruckereinstellungen");

                entity.Property(e => e.KAmazonShippingDruckereinstellungen).HasColumnName("kAmazonShippingDruckereinstellungen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDruckername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.NPageScaling).HasColumnName("nPageScaling");
            });

            modelBuilder.Entity<TAmazonTask>(entity =>
            {
                entity.HasKey(e => e.KAmazonTask)
                    .HasName("PK_Repricer_tAmazonTask");

                entity.ToTable("tAmazonTask", "Repricer");

                entity.HasIndex(e => new { e.CSku, e.NPlattform, e.KUser }, "UQ_Repricer_tAmazonTask_cSku_nPlattform_kUser")
                    .IsUnique();

                entity.Property(e => e.KAmazonTask).HasColumnName("kAmazonTask");

                entity.Property(e => e.CSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cSku");

                entity.Property(e => e.DZuletztGesendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dZuletztGesendet");

                entity.Property(e => e.KAbverkauf).HasColumnName("kAbverkauf");

                entity.Property(e => e.KAmazonBuyBoxStrategy).HasColumnName("kAmazonBuyBoxStrategy");

                entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");

                entity.Property(e => e.KMargensteigerung).HasColumnName("kMargensteigerung");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NAktiveStrategie).HasColumnName("nAktiveStrategie");

                entity.Property(e => e.NDeaktiviertDurchBestand).HasColumnName("nDeaktiviertDurchBestand");

                entity.Property(e => e.NGeaendert).HasColumnName("nGeaendert");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NRepricingAktiv).HasColumnName("nRepricingAktiv");

                entity.HasOne(d => d.KAmazonBuyBoxStrategyNavigation)
                    .WithMany(p => p.TAmazonTask)
                    .HasForeignKey(d => d.KAmazonBuyBoxStrategy)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repricer_tAmazonTask_kAmazonBuyBoxStrategy");

                entity.HasOne(d => d.KAmazonCompetitorAsinStrategyNavigation)
                    .WithMany(p => p.TAmazonTask)
                    .HasForeignKey(d => d.KAmazonCompetitorAsinStrategy)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repricer_tAmazonTask_kAmazonCompetitorAsinStrategy");

                entity.HasOne(d => d.KUserNavigation)
                    .WithMany(p => p.TAmazonTask)
                    .HasForeignKey(d => d.KUser)
                    .HasConstraintName("FK_Repricer_tAmazonTask_kUser");
            });

            modelBuilder.Entity<TAmazonVersandschnittstellenkonfiguration>(entity =>
            {
                entity.HasKey(e => e.KAmazonVersandschnittstellenkonfiguration)
                    .HasName("PK_tAmazonVersandschnittstellenkonfiguration_kAmazonVersandschnittstellenkonfiguration");

                entity.ToTable("tAmazonVersandschnittstellenkonfiguration");

                entity.Property(e => e.KAmazonVersandschnittstellenkonfiguration).HasColumnName("kAmazonVersandschnittstellenkonfiguration");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CVersandartName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.DHeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dHeight");

                entity.Property(e => e.DLength)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dLength");

                entity.Property(e => e.DWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dWeight");

                entity.Property(e => e.DWidth)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dWidth");

                entity.Property(e => e.FMinWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMinWeight");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.NAdditionalInsurance).HasColumnName("nAdditionalInsurance");

                entity.Property(e => e.NAutoCalcWeight).HasColumnName("nAutoCalcWeight");

                entity.Property(e => e.NCarrierWillPickUp).HasColumnName("nCarrierWillPickUp");

                entity.Property(e => e.NUseWarenlagerAdresse).HasColumnName("nUseWarenlagerAdresse");
            });

            modelBuilder.Entity<TAmazonabgleichLogsitzung>(entity =>
            {
                entity.HasKey(e => e.KAmazonabgleichLogsitzung);

                entity.ToTable("tAmazonabgleichLogsitzung", "Amazon");

                entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusMeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TAmazonbestellpositionVcszuordnung>(entity =>
            {
                entity.HasKey(e => new { e.KMessageId, e.KAmazonBestellungPos, e.NTyp })
                    .HasName("PK_Amazon_tAmazonbestellpositionVCSZuordnung");

                entity.ToTable("tAmazonbestellpositionVCSZuordnung", "Amazon");

                entity.Property(e => e.KMessageId).HasColumnName("kMessageId");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TAnfangsNr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tAnfangsNr");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.SAnPost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sAnPost");

                entity.Property(e => e.SAnPre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sAnPre");

                entity.Property(e => e.SApost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sAPost");

                entity.Property(e => e.SApre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sAPre");

                entity.Property(e => e.SArtPost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sArtPost");

                entity.Property(e => e.SArtPre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sArtPre");

                entity.Property(e => e.SBpost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sBPost");

                entity.Property(e => e.SBpre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sBPre");

                entity.Property(e => e.SGpost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sGPost");

                entity.Property(e => e.SGpre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sGPre");

                entity.Property(e => e.SKpost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sKPost");

                entity.Property(e => e.SKpre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sKPre");

                entity.Property(e => e.SPpost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sPPost");

                entity.Property(e => e.SPpre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sPPre");

                entity.Property(e => e.SRpost)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sRPost");

                entity.Property(e => e.SRpre)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("sRPre");
            });

            modelBuilder.Entity<TAntwortkanal>(entity =>
            {
                entity.HasKey(e => e.KAntwortkanal)
                    .HasName("PK_Ticketsystem_tAntwortkanal");

                entity.ToTable("tAntwortkanal", "Ticketsystem");

                entity.HasIndex(e => new { e.CAdresse, e.NTyp }, "UQ_Ticketsystem_tAntwortkanal_cAdresse_nTyp")
                    .IsUnique();

                entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdresse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresse");

                entity.Property(e => e.DDeaktivierung)
                    .HasColumnType("datetime")
                    .HasColumnName("dDeaktivierung");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TArtikel>(entity =>
            {
                entity.HasKey(e => e.KArtikel);

                entity.ToTable("tArtikel");

                entity.HasIndex(e => e.CAsin, "IX_tArtikel_cASIN");

                entity.HasIndex(e => new { e.CAktiv, e.CLagerAktiv, e.CLagerVariation, e.NIstVater, e.KStueckliste }, "IX_tArtikel_cAktiv_cLagerAktiv_cLagerVariation_nIstVater_kStueckliste");

                entity.HasIndex(e => e.CBarcode, "IX_tArtikel_cBarcode");

                entity.HasIndex(e => e.CGefahrnr, "IX_tArtikel_cGefahrnr");

                entity.HasIndex(e => e.CHan, "IX_tArtikel_cHAN");

                entity.HasIndex(e => e.CIsbn, "IX_tArtikel_cISBN");

                entity.HasIndex(e => e.CJfsku, "IX_tArtikel_cJfsku");

                entity.HasIndex(e => e.CPreisliste, "IX_tArtikel_cPreisliste");

                entity.HasIndex(e => e.CSerie, "IX_tArtikel_cSerie");

                entity.HasIndex(e => e.CSuchbegriffe, "IX_tArtikel_cSuchbegriffe");

                entity.HasIndex(e => e.CUnnummer, "IX_tArtikel_cUNNummer");

                entity.HasIndex(e => e.FEknetto, "IX_tArtikel_fEKNetto");

                entity.HasIndex(e => e.KEigenschaftKombi, "IX_tArtikel_kEigenschaftKombi");

                entity.HasIndex(e => e.KHersteller, "IX_tArtikel_kHersteller");

                entity.HasIndex(e => e.KStueckliste, "IX_tArtikel_kStueckliste_cTeilbar");

                entity.HasIndex(e => new { e.KVaterArtikel, e.CAktiv, e.NIstMindestbestand }, "IX_tArtikel_kVaterArtikel_cAktiv_nIstMindestbestand");

                entity.HasIndex(e => new { e.KVaterArtikel, e.NIstVater }, "IX_tArtikel_kVaterArtikel_nIstVater");

                entity.HasIndex(e => e.KWarengruppe, "IX_tArtikel_kWarengruppe");

                entity.HasIndex(e => e.NSort, "IX_tArtikel_nSort");

                entity.HasIndex(e => new { e.CLagerAktiv, e.NIstVater, e.KStueckliste, e.CLagerVariation }, "IX_tartikel_cLagerAktiv_nIstVater_kStueckliste_cLagerVariation");

                entity.HasIndex(e => e.CArtNr, "UQ_tArtikel_cArtNr")
                    .IsUnique();

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CAmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonFNSKU");

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DLetzterEk)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzterEK");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DNeuImSortiment)
                    .HasColumnType("datetime")
                    .HasColumnName("dNeuImSortiment");

                entity.Property(e => e.DZulaufVerfuegbarAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dZulaufVerfuegbarAm");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FGrundpreisMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGrundpreisMenge");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FLetzterEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLetzterEK");

                entity.Property(e => e.FMassMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMassMenge");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand)
                    .HasColumnName("kZustand")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NAutomatischeLiefertageberechnung)
                    .HasColumnName("nAutomatischeLiefertageberechnung")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete)
                    .HasColumnName("nDelete")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NEbayAbgleich).HasColumnName("nEbayAbgleich");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NLiefertageWennAusverkauft)
                    .HasColumnName("nLiefertageWennAusverkauft")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NPaketlaufzeitMax).HasColumnName("nPaketlaufzeitMax");

                entity.Property(e => e.NPaketlaufzeitMin).HasColumnName("nPaketlaufzeitMin");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");

                entity.Property(e => e.NZulaufVerfuegbarMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nZulaufVerfuegbarMenge");
            });

            modelBuilder.Entity<TArtikelAbnahme>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KKundengruppe });

                entity.ToTable("tArtikelAbnahme");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FIntervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fIntervall");

                entity.Property(e => e.FMindestabnahme)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMindestabnahme");
            });

            modelBuilder.Entity<TArtikelAttribut>(entity =>
            {
                entity.HasKey(e => e.KArtikelAttribut);

                entity.ToTable("tArtikelAttribut");

                entity.HasIndex(e => e.KAttribut, "IX_tArtikelAttribut_kAttribut");

                entity.HasIndex(e => new { e.KArtikel, e.KAttribut, e.KShop }, "UQ_tArtikelAttribut_kArtikel_kAttribut_kShop")
                    .IsUnique();

                entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TArtikelAttributSprache>(entity =>
            {
                entity.HasKey(e => new { e.KArtikelAttribut, e.KSprache });

                entity.ToTable("tArtikelAttributSprache");

                entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");

                entity.Property(e => e.DWertDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dWertDateTime");

                entity.Property(e => e.FWertDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertDecimal");

                entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
            });

            modelBuilder.Entity<TArtikelBeschreibung>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KSprache, e.KPlattform, e.KShop });

                entity.ToTable("tArtikelBeschreibung");

                entity.HasIndex(e => new { e.KArtikel, e.KPlattform, e.KSprache }, "IX_tArtikelBeschreibung_kArtikel_kPlattform_kSprache_INCL");

                entity.HasIndex(e => e.KPlattform, "IX_tArtikelBeschreibung_kPlattform_INCL_kArtikel_kSprache");

                entity.HasIndex(e => new { e.KSprache, e.KPlattform }, "IX_tArtikelBeschreibung_kSprache_kPlattform");

                entity.HasIndex(e => new { e.KArtikel, e.KSprache, e.KPlattform }, "IX_tArtikelbeschreibung_kArtikel_kSprache_kPlattform");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CKurzBeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzBeschreibung");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTitleTag)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cTitleTag");

                entity.Property(e => e.CUrlPfad)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUrlPfad");
            });

            modelBuilder.Entity<TArtikelEinkaufsliste>(entity =>
            {
                entity.HasKey(e => e.KArtikel);

                entity.ToTable("tArtikelEinkaufsliste");

                entity.Property(e => e.KArtikel)
                    .ValueGeneratedNever()
                    .HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBestellmodus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBestellmodus");

                entity.Property(e => e.CHinweis)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FEknettoLieferant)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNettoLieferant");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<TArtikelEpid>(entity =>
            {
                entity.HasKey(e => e.KArtikelEpid);

                entity.ToTable("tArtikelEpid");

                entity.HasIndex(e => new { e.KArtikel, e.KSiteId }, "UQ_tArtikelEpid")
                    .IsUnique();

                entity.Property(e => e.KArtikelEpid).HasColumnName("kArtikelEpid");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEpid)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cEpid");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KSiteId).HasColumnName("kSiteId");

                entity.HasOne(d => d.KArtikelNavigation)
                    .WithMany(p => p.TArtikelEpid)
                    .HasForeignKey(d => d.KArtikel)
                    .HasConstraintName("FK_dbo_tArtikelEpid_kArtikel");

                entity.HasOne(d => d.KSite)
                    .WithMany(p => p.TArtikelEpid)
                    .HasForeignKey(d => d.KSiteId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_kSiteID_ebay_xx_sites");
            });

            modelBuilder.Entity<TArtikelHistory>(entity =>
            {
                entity.HasKey(e => e.KArtikelHistory);

                entity.ToTable("tArtikelHistory");

                entity.HasIndex(e => e.KArtikel, "IX_tArtikelHistory_kArtikel");

                entity.HasIndex(e => new { e.KBuchungsart, e.KWarenLagerPlatz }, "IX_tArtikelHistory_kWarenLagerPlatz_kBuchungsart_kWarenLagerPlatz_fAnzahl_dGebucht_kBenutzer_kWarenEingang_cKommentar");

                entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.DGebucht)
                    .HasColumnType("datetime")
                    .HasColumnName("dGebucht");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FLagerBestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerBestand");

                entity.Property(e => e.FLagerBestandGesamt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerBestandGesamt");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KWarenEingang).HasColumnName("kWarenEingang");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            });

            modelBuilder.Entity<TArtikelLabel>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KLabel });

                entity.ToTable("tArtikelLabel");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.HasOne(d => d.KArtikelNavigation)
                    .WithMany(p => p.TArtikelLabel)
                    .HasForeignKey(d => d.KArtikel)
                    .HasConstraintName("FK_tArtikelLabel_kArtikel");
            });

            modelBuilder.Entity<TArtikelLagerOrt>(entity =>
            {
                entity.HasKey(e => e.KArtikelLagerOrt);

                entity.ToTable("tArtikelLagerOrt");

                entity.Property(e => e.KArtikelLagerOrt)
                    .ValueGeneratedNever()
                    .HasColumnName("kArtikelLagerOrt");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLager).HasColumnName("kLager");

                entity.Property(e => e.KLagerOrt).HasColumnName("kLagerOrt");
            });

            modelBuilder.Entity<TArtikelMehrzweckGutschein>(entity =>
            {
                entity.HasKey(e => e.KArtikel)
                    .HasName("PK_Artikel_tArtikelMehrzweckGutschein");

                entity.ToTable("tArtikelMehrzweckGutschein", "Artikel");

                entity.Property(e => e.KArtikel)
                    .ValueGeneratedNever()
                    .HasColumnName("kArtikel");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKampagne)
                    .HasMaxLength(255)
                    .HasColumnName("cKampagne");

                entity.Property(e => e.KGutscheinDruckVorlage).HasColumnName("kGutscheinDruckVorlage");

                entity.Property(e => e.NBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nBetrag");

                entity.Property(e => e.NGutscheinTyp).HasColumnName("nGutscheinTyp");

                entity.Property(e => e.NGutscheinVersandArt).HasColumnName("nGutscheinVersandArt");

                entity.Property(e => e.NIsMehrzweckGutschein).HasColumnName("nIsMehrzweckGutschein");

                entity.HasOne(d => d.KArtikelNavigation)
                    .WithOne(p => p.TArtikelMehrzweckGutschein)
                    .HasForeignKey<TArtikelMehrzweckGutschein>(d => d.KArtikel)
                    .HasConstraintName("FK_Artikel_tArtikelMehrzweckGutschein_kArtikel");
            });

            modelBuilder.Entity<TArtikelMerkmal>(entity =>
            {
                entity.HasKey(e => new { e.KMerkmalWert, e.KArtikel });

                entity.ToTable("tArtikelMerkmal");

                entity.HasIndex(e => e.KArtikel, "IX_tArtikelMerkmal_kArtikel");

                entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");
            });

            modelBuilder.Entity<TArtikelRankingGlobal>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.NType, e.KShop, e.NPlattform });

                entity.ToTable("tArtikelRankingGlobal");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStand)
                    .HasColumnType("datetime")
                    .HasColumnName("dStand");

                entity.Property(e => e.DVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dVon");

                entity.Property(e => e.NAnteilProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnteilProzent");

                entity.Property(e => e.NPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nPauschal");

                entity.Property(e => e.NRang).HasColumnName("nRang");

                entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
            });

            modelBuilder.Entity<TArtikelRankingZeitraum>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.NZeitraum, e.DVon, e.NType, e.KShop, e.NPlattform });

                entity.ToTable("tArtikelRankingZeitraum");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NZeitraum).HasColumnName("nZeitraum");

                entity.Property(e => e.DVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dVon");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStand)
                    .HasColumnType("datetime")
                    .HasColumnName("dStand");

                entity.Property(e => e.NAnteilProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnteilProzent");

                entity.Property(e => e.NPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nPauschal");

                entity.Property(e => e.NRang).HasColumnName("nRang");

                entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
            });

            modelBuilder.Entity<TArtikelShop>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KShop });

                entity.ToTable("tArtikelShop");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.NAktion)
                    .HasColumnName("nAktion")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NInBearbeitung)
                    .HasColumnName("nInBearbeitung")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TArtikelSichtbarkeit>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KKundenGruppe, e.KShop });

                entity.ToTable("tArtikelSichtbarkeit");

                entity.HasIndex(e => new { e.KArtikel, e.KShop }, "IX_tArtikelSichtbarkeit_kArtikel_kShop");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TArtikelSonderpreis>(entity =>
            {
                entity.HasKey(e => e.KArtikelSonderpreis);

                entity.ToTable("tArtikelSonderpreis");

                entity.HasIndex(e => e.KArtikel, "IX_tArtikelSonderpreis_kArtikel_INCL");

                entity.Property(e => e.KArtikelSonderpreis).HasColumnName("kArtikelSonderpreis");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");

                entity.Property(e => e.NIstAnzahl).HasColumnName("nIstAnzahl");

                entity.Property(e => e.NIstDatum).HasColumnName("nIstDatum");
            });

            modelBuilder.Entity<TArtikelSpeicher>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.CNummer, e.NId });

                entity.ToTable("tArtikelSpeicher");

                entity.HasIndex(e => new { e.NId, e.KArtikel }, "IX_tArtikelSpeicher_nID_kArtikel");

                entity.HasIndex(e => new { e.CNummer, e.NAktiv, e.KArtikel }, "IX_tartikelspeicher_cNummer_nAktiv_kArtikel");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.CNummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNummer");

                entity.Property(e => e.NId).HasColumnName("nID");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            });

            modelBuilder.Entity<TArtikelSperre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tArtikelSperre");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<TArtikelUpload>(entity =>
            {
                entity.HasKey(e => e.KArtikelUpload);

                entity.ToTable("tArtikelUpload");

                entity.HasIndex(e => e.KArtikel, "IX_tArtikelUpload_kArtikel");

                entity.Property(e => e.KArtikelUpload)
                    .ValueGeneratedNever()
                    .HasColumnName("kArtikelUpload");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDateiTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDateiTyp");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NPflicht).HasColumnName("nPflicht");
            });

            modelBuilder.Entity<TArtikelUploadSprache>(entity =>
            {
                entity.HasKey(e => new { e.KArtikelUpload, e.KSprache });

                entity.ToTable("tArtikelUploadSprache");

                entity.Property(e => e.KArtikelUpload).HasColumnName("kArtikelUpload");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TArtikelZustand>(entity =>
            {
                entity.HasKey(e => e.KArtikelZustand);

                entity.ToTable("tArtikelZustand");

                entity.Property(e => e.KArtikelZustand).HasColumnName("kArtikelZustand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KHauptartikel).HasColumnName("kHauptartikel");

                entity.Property(e => e.KZustandArtikel).HasColumnName("kZustandArtikel");
            });

            modelBuilder.Entity<TArtikelbildPlattform>(entity =>
            {
                entity.HasKey(e => e.KArtikelbildPlattform);

                entity.ToTable("tArtikelbildPlattform");

                entity.HasIndex(e => e.KBild, "IX_dbo_tArtikelbildPlattform_kBild");

                entity.HasIndex(e => new { e.KPlattform, e.NNr }, "IX_dbo_tArtikelbildPlattform_kPlattform_nNr");

                entity.HasIndex(e => new { e.KArtikel, e.KPlattform, e.KShop, e.KEbayUser, e.NNr }, "UQ_tArtikelbildPlattform_kArtikel_kPlattform_kShop_kEbayUser_nNr")
                    .IsUnique();

                entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBildname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBildname");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet)
                    .HasColumnName("nInet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NNr).HasColumnName("nNr");
            });

            modelBuilder.Entity<TArtikelbildPlattformSeo>(entity =>
            {
                entity.HasKey(e => e.KArtikelbildPlattformSeo);

                entity.ToTable("tArtikelbildPlattformSeo");

                entity.HasIndex(e => new { e.KArtikelbildPlattform, e.KSprache }, "UQ_tArtikelbildPlattformSeo_kArtikelbildPlattform_kSprache")
                    .IsUnique();

                entity.Property(e => e.KArtikelbildPlattformSeo).HasColumnName("kArtikelbildPlattformSeo");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAlternativtext)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAlternativtext");

                entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");
            });

            modelBuilder.Entity<TAttribut>(entity =>
            {
                entity.HasKey(e => e.KAttribut);

                entity.ToTable("tAttribut");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CGruppeName)
                    .HasMaxLength(150)
                    .HasColumnName("cGruppeName");

                entity.Property(e => e.CRegEx).HasColumnName("cRegEx");

                entity.Property(e => e.KFeldTyp).HasColumnName("kFeldTyp");

                entity.Property(e => e.NAktivFuerArtikelOhneWarengruppe)
                    .IsRequired()
                    .HasColumnName("nAktivFuerArtikelOhneWarengruppe")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NAusgabeweg).HasColumnName("nAusgabeweg");

                entity.Property(e => e.NBezugstyp).HasColumnName("nBezugstyp");

                entity.Property(e => e.NIstFreifeld).HasColumnName("nIstFreifeld");

                entity.Property(e => e.NIstMehrsprachig).HasColumnName("nIstMehrsprachig");

                entity.Property(e => e.NIstStandard).HasColumnName("nIstStandard");

                entity.Property(e => e.NReadOnly).HasColumnName("nReadOnly");

                entity.Property(e => e.NSortierung).HasColumnName("nSortierung");
            });

            modelBuilder.Entity<TAttributShop>(entity =>
            {
                entity.HasKey(e => new { e.KAttribut, e.KShop });

                entity.ToTable("tAttributShop");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TAttributSprache>(entity =>
            {
                entity.HasKey(e => new { e.KAttribut, e.KSprache });

                entity.ToTable("tAttributSprache");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWertListe)
                    .IsUnicode(false)
                    .HasColumnName("cWertListe");
            });

            modelBuilder.Entity<TAttributWarengruppe>(entity =>
            {
                entity.HasKey(e => e.KAttributWarengruppe)
                    .HasName("PK_dbo_tAttributWarengruppe");

                entity.ToTable("tAttributWarengruppe");

                entity.HasIndex(e => new { e.KAttribut, e.KWarengruppe }, "UQ_dbo_tAttributWarengruppe_kAttribut_kWarengruppe")
                    .IsUnique();

                entity.Property(e => e.KAttributWarengruppe).HasColumnName("kAttributWarengruppe");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.HasOne(d => d.KAttributNavigation)
                    .WithMany(p => p.TAttributWarengruppe)
                    .HasForeignKey(d => d.KAttribut)
                    .HasConstraintName("FK_dbo_tAttributWarengruppe_tAttribut");

                entity.HasOne(d => d.KWarengruppeNavigation)
                    .WithMany(p => p.TAttributWarengruppe)
                    .HasForeignKey(d => d.KWarengruppe)
                    .HasConstraintName("FK_dbo_tAttributWarengruppe_tWarengruppe");
            });

            modelBuilder.Entity<TAuftragLabel>(entity =>
            {
                entity.HasKey(e => new { e.KAuftrag, e.KLabel });

                entity.ToTable("tAuftragLabel");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TAuftragMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tAuftragMapping", "Pos");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KPosAuftrag).HasColumnName("kPosAuftrag");

                entity.Property(e => e.KShopSubShop).HasColumnName("kShopSubShop");
            });

            modelBuilder.Entity<TAuftragPositionAttribut>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tAuftragPositionAttribut", "Verkauf");

                entity.HasIndex(e => new { e.KAuftragPosition, e.NTyp }, "IX_Verkauf_tAuftragPositionAttribut_kAuftragPosition_nTyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWert)
                    .HasMaxLength(4000)
                    .HasColumnName("cWert");

                entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");

                entity.Property(e => e.NArchiv).HasColumnName("nArchiv");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TAuftragPositionMapping>(entity =>
            {
                entity.HasKey(e => new { e.KAuftragPosition, e.KPosAuftragPosition, e.KShopSubShop })
                    .HasName("PK_Pos_tAuftragPositionMapping");

                entity.ToTable("tAuftragPositionMapping", "Pos");

                entity.Property(e => e.KAuftragPosition).HasColumnName("kAuftragPosition");

                entity.Property(e => e.KPosAuftragPosition).HasColumnName("kPosAuftragPosition");

                entity.Property(e => e.KShopSubShop).HasColumnName("kShopSubShop");
            });

            modelBuilder.Entity<TAusgangskanalEmail>(entity =>
            {
                entity.HasKey(e => e.KAusgangskanalEmail)
                    .HasName("PK_Ticketsystem_tAusgangskanalEmail");

                entity.ToTable("tAusgangskanalEmail", "Ticketsystem");

                entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");

                entity.Property(e => e.CBenutzername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CEmailAdresse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmailAdresse");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPasswort)
                    .HasMaxLength(255)
                    .HasColumnName("cPasswort");

                entity.Property(e => e.CServeradresse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cServeradresse");

                entity.Property(e => e.CServerport)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cServerport");

                entity.Property(e => e.CVerschluesselung).HasColumnName("cVerschluesselung");

                entity.Property(e => e.KStatusAntwortGeschrieben).HasColumnName("kStatus_AntwortGeschrieben");

                entity.Property(e => e.NProtokoll).HasColumnName("nProtokoll");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.HasOne(d => d.KStatusAntwortGeschriebenNavigation)
                    .WithMany(p => p.TAusgangskanalEmail)
                    .HasForeignKey(d => d.KStatusAntwortGeschrieben)
                    .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmail_kStatus_AntwortGeschrieben");
            });

            modelBuilder.Entity<TAusgangskanalEmailBenutzerSignatur>(entity =>
            {
                entity.HasKey(e => e.KAusgangskanalEmailBenutzerSignatur)
                    .HasName("PK_Ticketsystem_tAusgangskanalEmailBenutzerSignatur");

                entity.ToTable("tAusgangskanalEmailBenutzerSignatur", "Ticketsystem");

                entity.Property(e => e.KAusgangskanalEmailBenutzerSignatur).HasColumnName("kAusgangskanalEmailBenutzerSignatur");

                entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.HasOne(d => d.KAusgangskanalEmailNavigation)
                    .WithMany(p => p.TAusgangskanalEmailBenutzerSignatur)
                    .HasForeignKey(d => d.KAusgangskanalEmail)
                    .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmailBenutzerSignatur_kAusgangskanalEmail");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TAusgangskanalEmailBenutzerSignatur)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tAusgangskanalEmailBenutzerSignatur_kFile_HtmlInhalt");
            });

            modelBuilder.Entity<TAuthCode>(entity =>
            {
                entity.HasKey(e => e.KAuthCode);

                entity.ToTable("tAuthCode", "Sync");

                entity.Property(e => e.KAuthCode)
                    .ValueGeneratedNever()
                    .HasColumnName("kAuthCode");

                entity.Property(e => e.CAuthToken)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAuthToken");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KMandant).HasColumnName("kMandant");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TB2bartikel>(entity =>
            {
                entity.HasKey(e => e.KB2bartikel);

                entity.ToTable("tB2BArtikel");

                entity.Property(e => e.KB2bartikel).HasColumnName("kB2BArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CJpid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cJpid");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<TBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBackup");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DDatum)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBackup)
                    .HasColumnName("kBackup")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TBemerkungen>(entity =>
            {
                entity.HasKey(e => e.KBemerkungen);

                entity.ToTable("tBemerkungen");

                entity.Property(e => e.KBemerkungen)
                    .ValueGeneratedNever()
                    .HasColumnName("kBemerkungen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");
            });

            modelBuilder.Entity<TBenutzerAktiv>(entity =>
            {
                entity.HasKey(e => e.KBenutzerAktiv);

                entity.ToTable("tBenutzerAktiv");

                entity.Property(e => e.KBenutzerAktiv).HasColumnName("kBenutzerAktiv");

                entity.Property(e => e.BAbmelden).HasColumnName("bAbmelden");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCustom)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustom");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CUniqueId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUniqueId");

                entity.Property(e => e.DLetzteAktion)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzteAktion");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KMandant).HasColumnName("kMandant");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
            });

            modelBuilder.Entity<TBenutzerFirma>(entity =>
            {
                entity.HasKey(e => new { e.KBenutzer, e.KFirma, e.KMandant });

                entity.ToTable("tBenutzerFirma");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KMandant).HasColumnName("kMandant");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TBenutzerLog>(entity =>
            {
                entity.HasKey(e => e.KBenutzerLog);

                entity.ToTable("tBenutzerLog");

                entity.Property(e => e.KBenutzerLog).HasColumnName("kBenutzerLog");

                entity.Property(e => e.CAktion)
                    .IsUnicode(false)
                    .HasColumnName("cAktion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NAktionsTyp).HasColumnName("nAktionsTyp");

                entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
            });

            modelBuilder.Entity<TBenutzerSuchfilter>(entity =>
            {
                entity.HasKey(e => e.KBenutzerSuchfilter);

                entity.ToTable("tBenutzerSuchfilter");

                entity.HasIndex(e => e.KBenutzer, "IX_tBenutzerSuchfilter_kBenutzer");

                entity.Property(e => e.KBenutzerSuchfilter).HasColumnName("kBenutzerSuchfilter");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NFilterTyp).HasColumnName("nFilterTyp");

                entity.Property(e => e.NModus).HasColumnName("nModus");
            });

            modelBuilder.Entity<TBestellHinweis>(entity =>
            {
                entity.HasKey(e => e.KBestellHinweis);

                entity.ToTable("tBestellHinweis");

                entity.Property(e => e.KBestellHinweis)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellHinweis");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");
            });

            modelBuilder.Entity<TBestellung>(entity =>
            {
                entity.HasKey(e => e.KBestellung);

                entity.ToTable("tBestellung");

                entity.HasIndex(e => e.CBestellNr, "IX_tBestellung_cBestellNr");

                entity.HasIndex(e => new { e.CType, e.DErstellt }, "IX_tBestellung_cType_dErstellt_include_tKunde_kKunde");

                entity.HasIndex(e => new { e.KInetBestellung, e.KShop }, "IX_tBestellung_kInetBestellung_kShop");

                entity.HasIndex(e => new { e.NKomplettAusgeliefert, e.TRechnungKRechnung }, "IX_tBestellung_nKomplettAusgeliefert_tRechnung_kRechnung");

                entity.HasIndex(e => new { e.TKundeKKunde, e.DBezahlt }, "IX_tKunde_kKunde_dBezahlt");

                entity.HasIndex(e => e.CInetBestellNr, "IX_tbestellung_cInetBestellNr");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAmazonServiceLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonServiceLevel");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CIdentCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInetBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInetBestellNr");

                entity.Property(e => e.CKampagne)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKampagne");

                entity.Property(e => e.CKampagneName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKampagneName");

                entity.Property(e => e.CKampagneParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKampagneParam");

                entity.Property(e => e.CKundenauftragsnummer)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cKundenauftragsnummer");

                entity.Property(e => e.CModulId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModulID");

                entity.Property(e => e.COutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundId");

                entity.Property(e => e.CPuizahlungsdaten)
                    .IsUnicode(false)
                    .HasColumnName("cPUIZahlungsdaten");

                entity.Property(e => e.CReferrer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cReferrer");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cType")
                    .IsFixedLength(true);

                entity.Property(e => e.CUserAgent)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cUserAgent");

                entity.Property(e => e.CUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserName");

                entity.Property(e => e.CUstId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cUstId")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CVersandInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandInfo");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO")
                    .HasDefaultValueSql("('DE')");

                entity.Property(e => e.CVersandlandWaehrung)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandWaehrung")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DBezahlt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahlt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DErstelltWawi)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelltWawi")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.DMailVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dMailVersandt");

                entity.Property(e => e.DVersandMail)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandMail");

                entity.Property(e => e.DVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandt");

                entity.Property(e => e.DZahlungsMail)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsMail");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FSkonto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkonto");

                entity.Property(e => e.FVersandBruttoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandBruttoPreis");

                entity.Property(e => e.FVersandlandWaehrungFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandlandWaehrungFaktor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FZusatzGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzGewicht");

                entity.Property(e => e.KBestellHinweis)
                    .HasColumnName("kBestellHinweis")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KColor)
                    .HasColumnName("kColor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KLieferAdresse)
                    .HasColumnName("kLieferAdresse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KLogistik).HasColumnName("kLogistik");

                entity.Property(e => e.KRechnungsAdresse)
                    .HasColumnName("kRechnungsAdresse")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSplitBestellung).HasColumnName("kSplitBestellung");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KZahlungsArt).HasColumnName("kZahlungsArt");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NIgl)
                    .HasColumnName("nIGL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");

                entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");

                entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");

                entity.Property(e => e.NPlatform).HasColumnName("nPlatform");

                entity.Property(e => e.NPremium).HasColumnName("nPremium");

                entity.Property(e => e.NPrio)
                    .HasColumnName("nPrio")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");

                entity.Property(e => e.NUstFrei)
                    .HasColumnName("nUStFrei")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NZahlungsTyp).HasColumnName("nZahlungsTyp");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");

                entity.Property(e => e.TAdresseKAdresse).HasColumnName("tAdresse_kAdresse");

                entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");

                entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");

                entity.Property(e => e.TRechnungKRechnung).HasColumnName("tRechnung_kRechnung");

                entity.Property(e => e.TTextKText).HasColumnName("tText_kText");

                entity.Property(e => e.TVersandArtKVersandArt).HasColumnName("tVersandArt_kVersandArt");
            });

            modelBuilder.Entity<TBestellungAlt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBestellungAlt");

                entity.HasIndex(e => e.KBestellungAlt, "IX_tBestellungAlt_kBestellungAlt");

                entity.HasIndex(e => e.KBestellungNeu, "IX_tBestellungAlt_kBestellungNeu");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CIdentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CInetBestellung)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInetBestellung");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CVersandInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandInfo");

                entity.Property(e => e.DErstellt)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DLieferDatum)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("dLieferDatum");

                entity.Property(e => e.DVersandt)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("dVersandt");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.KBestellHinweis).HasColumnName("kBestellHinweis");

                entity.Property(e => e.KBestellungAlt).HasColumnName("kBestellungAlt");

                entity.Property(e => e.KBestellungNeu).HasColumnName("kBestellungNeu");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KLogistik).HasColumnName("kLogistik");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NPlatform).HasColumnName("nPlatform");
            });

            modelBuilder.Entity<TBestellungAttribute>(entity =>
            {
                entity.HasKey(e => e.KBestellungAttribute);

                entity.ToTable("tBestellungAttribute");

                entity.HasIndex(e => e.KBestellung, "IX_tBestellungAttribute_kBestellung");

                entity.Property(e => e.KBestellungAttribute)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellungAttribute");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<TBestellungAttributeKey>(entity =>
            {
                entity.HasKey(e => e.KBestellungAttributeKey);

                entity.ToTable("tBestellungAttributeKey");

                entity.Property(e => e.KBestellungAttributeKey)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellungAttributeKey");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TBestellungColor>(entity =>
            {
                entity.HasKey(e => e.KColor)
                    .HasName("PK_tBestellungColor_kColor");

                entity.ToTable("tBestellungColor");

                entity.Property(e => e.KColor)
                    .ValueGeneratedNever()
                    .HasColumnName("kColor");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TBestellungDokument>(entity =>
            {
                entity.HasKey(e => e.KBestellungDokument);

                entity.ToTable("tBestellungDokument");

                entity.Property(e => e.KBestellungDokument).HasColumnName("kBestellungDokument");

                entity.Property(e => e.BDokument)
                    .IsRequired()
                    .HasColumnName("bDokument");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDateierweiterung)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cDateierweiterung");

                entity.Property(e => e.DAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dAenderung");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");

                entity.Property(e => e.NDokumentTyp).HasColumnName("nDokumentTyp");
            });

            modelBuilder.Entity<TBestellungEckDaten>(entity =>
            {
                entity.HasKey(e => e.KBestellung);

                entity.ToTable("tBestellungEckDaten");

                entity.Property(e => e.KBestellung)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CRueckhaltegrundName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhaltegrundName");

                entity.Property(e => e.CShopName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopName");

                entity.Property(e => e.CVersandartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartName");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMahndatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMahndatum");

                entity.Property(e => e.DRechnungErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dRechnungErstellt");

                entity.Property(e => e.DZahlungsfrist)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsfrist");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.FGutschrift)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschrift");

                entity.Property(e => e.FMahngebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahngebuehr");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.FWertNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertNetto");

                entity.Property(e => e.FZahlung)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZahlung");

                entity.Property(e => e.NExistiertLieferschein).HasColumnName("nExistiertLieferschein");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NRechnungZahlungsziel).HasColumnName("nRechnungZahlungsziel");
            });

            modelBuilder.Entity<TBestellungGebuehr>(entity =>
            {
                entity.HasKey(e => e.KBestellungGebuehr);

                entity.ToTable("tBestellungGebuehr");

                entity.Property(e => e.KBestellungGebuehr).HasColumnName("kBestellungGebuehr");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KGebuehrtyp).HasColumnName("kGebuehrtyp");
            });

            modelBuilder.Entity<TBestellungKampagne>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBestellungKampagne");

                entity.HasIndex(e => e.KBestellung, "UQ_tBestellungKampagne_kBestellung")
                    .IsUnique();

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CGeraet)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cGeraet");

                entity.Property(e => e.CKampagne)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cKampagne");

                entity.Property(e => e.CKampagneWert)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cKampagneWert");

                entity.Property(e => e.CUserAgent)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cUserAgent");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<TBestellungPicklisteLock>(entity =>
            {
                entity.HasKey(e => e.KBestellung);

                entity.ToTable("tBestellungPicklisteLock");

                entity.Property(e => e.KBestellung)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            });

            modelBuilder.Entity<TBestellungSperre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBestellungSperre");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<TBestellungWmsfreigabe>(entity =>
            {
                entity.HasKey(e => e.KBestellungWmsfreigabe);

                entity.ToTable("tBestellungWMSFreigabe");

                entity.HasIndex(e => new { e.KBestellung, e.NAktiv }, "IX_tBestellungWMSFreigabe_kBestellung_nAktiv");

                entity.Property(e => e.KBestellungWmsfreigabe).HasColumnName("kBestellungWMSFreigabe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NSperre).HasColumnName("nSperre");

                entity.Property(e => e.NTeillieferungErlaubt).HasColumnName("nTeillieferungErlaubt");

                entity.Property(e => e.NVorkommissionieren).HasColumnName("nVorkommissionieren");
            });

            modelBuilder.Entity<TBestellvorschlagPlugin>(entity =>
            {
                entity.HasKey(e => e.KBestellvorschlagPlugin)
                    .HasName("PK_Einkauf_tBestellvorschlagPlugin");

                entity.ToTable("tBestellvorschlagPlugin", "Einkauf");

                entity.HasIndex(e => e.CName, "UQ_Einkauf_tBestellvorschlagPlugin_cName")
                    .IsUnique();

                entity.Property(e => e.KBestellvorschlagPlugin).HasColumnName("kBestellvorschlagPlugin");

                entity.Property(e => e.BIcon).HasColumnName("bIcon");

                entity.Property(e => e.BIconSelektiert).HasColumnName("bIconSelektiert");

                entity.Property(e => e.CAnzeigeName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cAnzeigeName");

                entity.Property(e => e.CBeschreibung)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CFunctionName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cFunctionName");

                entity.Property(e => e.CHersteller)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("cName");

                entity.Property(e => e.CParameter)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnName("cParameter");

                entity.Property(e => e.CVersion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cVersion");
            });

            modelBuilder.Entity<TBild>(entity =>
            {
                entity.HasKey(e => e.KBild);

                entity.ToTable("tBild");

                entity.HasIndex(e => e.CHash, "IX_tBild_cHash");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.BBild)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bBild");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BVorschauBild)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bVorschauBild");

                entity.Property(e => e.CChecksum)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChecksum");

                entity.Property(e => e.CHash)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHash");

                entity.Property(e => e.CQuelle)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cQuelle");

                entity.Property(e => e.DAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dAenderung");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.NBreite).HasColumnName("nBreite");

                entity.Property(e => e.NDateigroesse).HasColumnName("nDateigroesse");

                entity.Property(e => e.NHoehe).HasColumnName("nHoehe");

                entity.Property(e => e.NVorschauBreite).HasColumnName("nVorschauBreite");

                entity.Property(e => e.NVorschauDateigroesse).HasColumnName("nVorschauDateigroesse");

                entity.Property(e => e.NVorschauHoehe).HasColumnName("nVorschauHoehe");
            });

            modelBuilder.Entity<TBroken>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBroken");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBroken)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("cBroken");

                entity.Property(e => e.CKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");
            });

            modelBuilder.Entity<TBuchungsArt>(entity =>
            {
                entity.HasKey(e => e.KBuchungsart);

                entity.ToTable("tBuchungsArt");

                entity.Property(e => e.KBuchungsart)
                    .ValueGeneratedNever()
                    .HasColumnName("kBuchungsart");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TBundesland>(entity =>
            {
                entity.HasKey(e => new { e.CIsoland, e.CBundesland });

                entity.ToTable("tBundesland");

                entity.Property(e => e.CIsoland)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISOLand");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKuerzelBundesland)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cKuerzelBundesland");
            });

            modelBuilder.Entity<TCategoryRef>(entity =>
            {
                entity.HasKey(e => e.KCategoryRef)
                    .HasName("PK_FulfillmentNetwork.tCategoryRef");

                entity.ToTable("tCategoryRef", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.CMerchantId, e.CProductGroup }, "IX_FulfillmentNetwork_tCategoryRef_cMerchantId_cProductGroup")
                    .IsUnique();

                entity.HasIndex(e => e.KKategorie, "IX_FulfillmentNetwork_tCategoryRef_kKategorie")
                    .IsUnique();

                entity.Property(e => e.KCategoryRef).HasColumnName("kCategoryRef");

                entity.Property(e => e.CMerchantId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cMerchantId");

                entity.Property(e => e.CProductGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cProductGroup");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.HasOne(d => d.KKategorieNavigation)
                    .WithOne(p => p.TCategoryRef)
                    .HasForeignKey<TCategoryRef>(d => d.KKategorie)
                    .HasConstraintName("FK_dbo_tKategorie_kkategorie");
            });

            modelBuilder.Entity<TConfiguration>(entity =>
            {
                entity.HasKey(e => e.KConfig);

                entity.ToTable("tConfiguration");

                entity.Property(e => e.KConfig).HasColumnName("kConfig");

                entity.Property(e => e.Arbeitsplatz).HasMaxLength(200);

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.ElementId).HasColumnName("ElementID");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            });

            modelBuilder.Entity<TConnectorKategorieTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tConnectorKategorieTemp");

                entity.HasIndex(e => e.CVaterEndpointId, "IX_tConnectorKategorieTemp_cVaterEndpointID")
                    .IsClustered();

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CVaterEndpointId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cVaterEndpointID");

                entity.Property(e => e.KKindKategorie).HasColumnName("kKindKategorie");
            });

            modelBuilder.Entity<TConnectorStuecklisteTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tConnectorStuecklisteTemp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CVaterId)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cVaterID");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikelKind).HasColumnName("kArtikelKind");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            });

            modelBuilder.Entity<TCryptoSlot>(entity =>
            {
                entity.HasKey(e => e.KCryptoSlot);

                entity.ToTable("tCryptoSlot");

                entity.HasIndex(e => new { e.NSlotId, e.KBenutzer }, "UQ_tCrypoSlot_nSlotId_kBenutzer")
                    .IsUnique();

                entity.Property(e => e.KCryptoSlot).HasColumnName("kCryptoSlot");

                entity.Property(e => e.BCryptedSlotkey)
                    .IsRequired()
                    .HasColumnName("bCryptedSlotkey");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBenutzerZugewiesenDurch).HasColumnName("kBenutzerZugewiesenDurch");

                entity.Property(e => e.NSlotId).HasColumnName("nSlotId");
            });

            modelBuilder.Entity<TCryptoVault>(entity =>
            {
                entity.HasKey(e => e.KCryptoVault);

                entity.ToTable("tCryptoVault");

                entity.HasIndex(e => e.NSlotId, "UQ_tCryptoVault_nSlotId")
                    .IsUnique();

                entity.Property(e => e.KCryptoVault).HasColumnName("kCryptoVault");

                entity.Property(e => e.BDaten)
                    .IsRequired()
                    .HasColumnName("bDaten");

                entity.Property(e => e.BIv)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasColumnName("bIv")
                    .IsFixedLength(true);

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NSlotId).HasColumnName("nSlotId");
            });

            modelBuilder.Entity<TCsvSettings>(entity =>
            {
                entity.HasKey(e => e.CKey)
                    .HasName("PK_cKey");

                entity.ToTable("tCsvSettings");

                entity.HasIndex(e => e.CKey, "AK_cKey")
                    .IsUnique();

                entity.Property(e => e.CKey)
                    .HasMaxLength(50)
                    .HasColumnName("cKey");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CComment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("cComment");

                entity.Property(e => e.CDelmiter)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("cDelmiter");

                entity.Property(e => e.CEscape)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("cEscape");

                entity.Property(e => e.CQuote)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("cQuote");
            });

            modelBuilder.Entity<TCustomerQuery>(entity =>
            {
                entity.HasKey(e => e.KCustomerQuery);

                entity.ToTable("tCustomerQuery");

                entity.Property(e => e.KCustomerQuery).HasColumnName("kCustomerQuery");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CQueryText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cQueryText");

                entity.Property(e => e.KKontext).HasColumnName("kKontext");
            });

            modelBuilder.Entity<TCustomerQueryColumn>(entity =>
            {
                entity.HasKey(e => e.KCustomerQueryColumn)
                    .HasName("PK_dbo_tCustomerQueryColumn");

                entity.ToTable("tCustomerQueryColumn");

                entity.Property(e => e.KCustomerQueryColumn).HasColumnName("kCustomerQueryColumn");

                entity.Property(e => e.KCustomerQueryUser).HasColumnName("kCustomerQueryUser");

                entity.Property(e => e.NGridIndex).HasColumnName("nGridIndex");

                entity.Property(e => e.NSqlIndex).HasColumnName("nSqlIndex");

                entity.Property(e => e.NWidth).HasColumnName("nWidth");

                entity.HasOne(d => d.KCustomerQueryUserNavigation)
                    .WithMany(p => p.TCustomerQueryColumn)
                    .HasForeignKey(d => d.KCustomerQueryUser)
                    .HasConstraintName("FK_dbo_tCustomerQueryColumn_kCustomerQueryUser");
            });

            modelBuilder.Entity<TCustomerQueryOverview>(entity =>
            {
                entity.HasKey(e => e.KCustomerQueryOverview)
                    .HasName("PK_dbo_tCustomerQueryOverview");

                entity.ToTable("tCustomerQueryOverview");

                entity.Property(e => e.KCustomerQueryOverview).HasColumnName("kCustomerQueryOverview");

                entity.Property(e => e.BIcon).HasColumnName("bIcon");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cName");

                entity.Property(e => e.CQueryText)
                    .IsRequired()
                    .HasColumnName("cQueryText");

                entity.Property(e => e.KParent).HasColumnName("kParent");

                entity.Property(e => e.NBereich).HasColumnName("nBereich");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TCustomerQueryOverviewRecht>(entity =>
            {
                entity.HasKey(e => new { e.KCustomerQueryOverview, e.KRechtBenutzerGruppe })
                    .HasName("PK_dbo_tCustomerQueryOverviewRecht");

                entity.ToTable("tCustomerQueryOverviewRecht");

                entity.Property(e => e.KCustomerQueryOverview).HasColumnName("kCustomerQueryOverview");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.HasOne(d => d.KCustomerQueryOverviewNavigation)
                    .WithMany(p => p.TCustomerQueryOverviewRecht)
                    .HasForeignKey(d => d.KCustomerQueryOverview)
                    .HasConstraintName("FK_dbo_tCustomerQueryOverviewRecht_kCustomerQueryOverview");
            });

            modelBuilder.Entity<TCustomerQueryRecht>(entity =>
            {
                entity.HasKey(e => new { e.KCustomerQuery, e.KRechtBenutzerGruppe });

                entity.ToTable("tCustomerQueryRecht");

                entity.Property(e => e.KCustomerQuery).HasColumnName("kCustomerQuery");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.HasOne(d => d.KCustomerQueryNavigation)
                    .WithMany(p => p.TCustomerQueryRecht)
                    .HasForeignKey(d => d.KCustomerQuery)
                    .HasConstraintName("FK_tCustomerQueryRecht_tCustomerQuery");
            });

            modelBuilder.Entity<TCustomerQueryUser>(entity =>
            {
                entity.HasKey(e => e.KCustomerQueryUser)
                    .HasName("PK_dbo_tCustomerQueryUser");

                entity.ToTable("tCustomerQueryUser");

                entity.Property(e => e.KCustomerQueryUser).HasColumnName("kCustomerQueryUser");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KCustomerQuery).HasColumnName("kCustomerQuery");

                entity.HasOne(d => d.KCustomerQueryNavigation)
                    .WithMany(p => p.TCustomerQueryUser)
                    .HasForeignKey(d => d.KCustomerQuery)
                    .HasConstraintName("FK_dbo_tCustomerQueryUser_kCustomerQuery");
            });

            modelBuilder.Entity<TDateityp>(entity =>
            {
                entity.HasKey(e => e.CDateityp);

                entity.ToTable("tDateityp");

                entity.Property(e => e.CDateityp)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cDateityp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TDatevConfig>(entity =>
            {
                entity.HasKey(e => e.KFirma);

                entity.ToTable("tDatevConfig");

                entity.Property(e => e.KFirma)
                    .ValueGeneratedNever()
                    .HasColumnName("kFirma");

                entity.Property(e => e.BUseSandbox).HasColumnName("bUseSandbox");

                entity.Property(e => e.DAbgleichStartDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbgleichStartDatum");

                entity.Property(e => e.NBeraterNummer).HasColumnName("nBeraterNummer");

                entity.Property(e => e.NMandantenNummer).HasColumnName("nMandantenNummer");

                entity.Property(e => e.TOauthConfigCId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("tOauthConfig_cId");
            });

            modelBuilder.Entity<TDatevLogs>(entity =>
            {
                entity.HasKey(e => e.KDatevLog);

                entity.ToTable("tDatevLogs");

                entity.Property(e => e.KDatevLog).HasColumnName("kDatevLog");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CFehlerMessage)
                    .HasMaxLength(500)
                    .HasColumnName("cFehlerMessage");

                entity.Property(e => e.CJsonData)
                    .HasMaxLength(2000)
                    .HasColumnName("cJsonData");

                entity.Property(e => e.CLogLocation)
                    .HasMaxLength(200)
                    .HasColumnName("cLogLocation");

                entity.Property(e => e.DUebertragungsDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dUebertragungsDatum");

                entity.Property(e => e.KBeleg).HasColumnName("kBeleg");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.NDatevBelegTyp).HasColumnName("nDatevBelegTyp");

                entity.Property(e => e.NDatevUebertragungsStatus).HasColumnName("nDatevUebertragungsStatus");
            });

            modelBuilder.Entity<TDbHash>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tDbHash", "MaintenanceIntern");

                entity.Property(e => e.CHashJtl)
                    .HasMaxLength(35)
                    .HasColumnName("cHashJTL");

                entity.Property(e => e.CHashLocal)
                    .HasMaxLength(35)
                    .HasColumnName("cHashLocal");

                entity.Property(e => e.CName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSchema)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSchema");
            });

            modelBuilder.Entity<TDbeSlogeintrag>(entity =>
            {
                entity.HasKey(e => e.KDbeSlogeintrag)
                    .HasName("PK_Sync_tDbeSLogeintrag");

                entity.ToTable("tDbeSLogeintrag", "Sync");

                entity.Property(e => e.KDbeSlogeintrag).HasColumnName("kDbeSLogeintrag");

                entity.Property(e => e.CMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.CXml)
                    .IsUnicode(false)
                    .HasColumnName("cXML");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");

                entity.Property(e => e.NCallType).HasColumnName("nCallType");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.HasOne(d => d.KSyncLogsitzungNavigation)
                    .WithMany(p => p.TDbeSlogeintrag)
                    .HasForeignKey(d => d.KSyncLogsitzung)
                    .HasConstraintName("FK_Sync_tDbeSLogeintrag_kSyncLogsitzung");
            });

            modelBuilder.Entity<TDeliveryQueue>(entity =>
            {
                entity.HasKey(e => new { e.KDeliveryQueue, e.KFulfillmentAuftrag })
                    .HasName("PK_FulfillmentNetwork.tDeliveryQueue");

                entity.ToTable("tDeliveryQueue", "FulfillmentNetwork");

                entity.HasIndex(e => e.KFulfillmentAuftrag, "IX_FulfillmentNetwork_tDeliveryQueue_kFulfillmentAuftrag")
                    .IsUnique();

                entity.Property(e => e.KDeliveryQueue)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kDeliveryQueue");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.NDeliveryNoteState).HasColumnName("nDeliveryNoteState");

                entity.Property(e => e.NInvoiceState).HasColumnName("nInvoiceState");

                entity.Property(e => e.NState).HasColumnName("nState");

                entity.HasOne(d => d.KFulfillmentAuftragNavigation)
                    .WithOne(p => p.TDeliveryQueue)
                    .HasForeignKey<TDeliveryQueue>(d => d.KFulfillmentAuftrag)
                    .HasConstraintName("FK_dbo_tFulfillmentAuftrag_kFulfillmentAuftrag");
            });

            modelBuilder.Entity<TDhlekp>(entity =>
            {
                entity.HasKey(e => e.KDhlekp)
                    .HasName("PK_Shipping_tDHLEKP");

                entity.ToTable("tDHLEKP", "Shipping");

                entity.Property(e => e.KDhlekp).HasColumnName("kDHLEKP");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(128)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CEkp)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("cEkp");

                entity.Property(e => e.KShipperAccount).HasColumnName("kShipperAccount");

                entity.HasOne(d => d.KShipperAccountNavigation)
                    .WithMany(p => p.TDhlekp)
                    .HasForeignKey(d => d.KShipperAccount)
                    .HasConstraintName("FK_tDHLEKP_tShipperAccount");
            });

            modelBuilder.Entity<TDownload>(entity =>
            {
                entity.HasKey(e => e.KDownload);

                entity.ToTable("tDownload");

                entity.HasIndex(e => e.CId, "IX_tDownload_cID");

                entity.Property(e => e.KDownload).HasColumnName("kDownload");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cID");

                entity.Property(e => e.CPfad)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPfad");

                entity.Property(e => e.CPfadVorschau)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPfadVorschau");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NTage).HasColumnName("nTage");
            });

            modelBuilder.Entity<TDownloadShop>(entity =>
            {
                entity.HasKey(e => new { e.KDownload, e.KShop });

                entity.ToTable("tDownloadShop");

                entity.Property(e => e.KDownload).HasColumnName("kDownload");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TDropShippingPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tDropShippingPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBEstellungPos");
            });

            modelBuilder.Entity<TDruckEinstellung>(entity =>
            {
                entity.HasKey(e => e.KDruckEinstellung);

                entity.ToTable("tDruckEinstellung");

                entity.HasIndex(e => new { e.KBenutzer, e.CArbeitsplatz, e.KDruckvorlage }, "UQ_tDruckEinstellung_cArbeitsplatz_kBenutzer_kDruckvorlage")
                    .IsUnique();

                entity.Property(e => e.KDruckEinstellung).HasColumnName("kDruckEinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArbeitsplatz)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cArbeitsplatz");

                entity.Property(e => e.CDruckername1)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername1");

                entity.Property(e => e.CDruckername2)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername2");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KDruckvorlage).HasColumnName("kDruckvorlage");
            });

            modelBuilder.Entity<TDruckQueue>(entity =>
            {
                entity.HasKey(e => e.KDruckQueue);

                entity.ToTable("tDruckQueue");

                entity.Property(e => e.KDruckQueue).HasColumnName("kDruckQueue");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLhm).HasColumnName("kLHM");

                entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TDruckvorlage>(entity =>
            {
                entity.HasKey(e => e.KDruckvorlage);

                entity.ToTable("tDruckvorlage");

                entity.Property(e => e.KDruckvorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kDruckvorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFormType).HasColumnName("kFormType");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KLlvorlage).HasColumnName("kLLVorlage");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NAusgabe)
                    .HasColumnName("nAusgabe")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TDtaus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tDTAUS");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBlz)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cBLZ");

                entity.Property(e => e.CKontoInhaber)
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("cKontoInhaber");

                entity.Property(e => e.CKontoNr)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cKontoNr");

                entity.Property(e => e.CName)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CZeile1)
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("cZeile1");

                entity.Property(e => e.CZeile2)
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("cZeile2");

                entity.Property(e => e.NZahlung).HasColumnName("nZahlung");
            });

            modelBuilder.Entity<TEan>(entity =>
            {
                entity.HasKey(e => e.CEan);

                entity.ToTable("tEAN");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEAN");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DImportdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dImportdatum");

                entity.Property(e => e.DLockDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dLockDate");
            });

            modelBuilder.Entity<TEazyShippingVerpackQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEazyShippingVerpackQueue");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimeStamp");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<TEbayAbgleichLogeintrag>(entity =>
            {
                entity.HasKey(e => e.KEbayAbgleichLogeintrag);

                entity.ToTable("tEbayAbgleichLogeintrag", "Ebay");

                entity.Property(e => e.KEbayAbgleichLogeintrag).HasColumnName("kEbayAbgleichLogeintrag");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KEbayAbgleichLogsitzung).HasColumnName("kEbayAbgleichLogsitzung");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KItemId).HasColumnName("kItemId");

                entity.Property(e => e.KSiteId).HasColumnName("kSiteId");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.Property(e => e.NVorgang).HasColumnName("nVorgang");

                entity.HasOne(d => d.KEbayAbgleichLogsitzungNavigation)
                    .WithMany(p => p.TEbayAbgleichLogeintrag)
                    .HasForeignKey(d => d.KEbayAbgleichLogsitzung)
                    .HasConstraintName("FK_tEbayAbgleichLogeintrag_kEbayAbgleichLogsitzung");
            });

            modelBuilder.Entity<TEbayAbgleichLogsitzung>(entity =>
            {
                entity.HasKey(e => e.KEbayAbgleichLogsitzung);

                entity.ToTable("tEbayAbgleichLogsitzung", "Ebay");

                entity.Property(e => e.KEbayAbgleichLogsitzung).HasColumnName("kEbayAbgleichLogsitzung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusMeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TEigenschaftKombiWert>(entity =>
            {
                entity.HasKey(e => new { e.KEigenschaftKombi, e.KEigenschaft });

                entity.ToTable("tEigenschaftKombiWert");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            });

            modelBuilder.Entity<TEigenschaftSichtbarkeit>(entity =>
            {
                entity.HasKey(e => new { e.KEigenschaft, e.KKundenGruppe, e.KShop });

                entity.ToTable("tEigenschaftSichtbarkeit");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TEigenschaftSprache>(entity =>
            {
                entity.HasKey(e => new { e.KEigenschaft, e.KSprache });

                entity.ToTable("tEigenschaftSprache");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TEigenschaftWertAbhaengigkeit>(entity =>
            {
                entity.HasKey(e => e.KEigenschaftWertAbhaengigkeit);

                entity.ToTable("tEigenschaftWertAbhaengigkeit");

                entity.Property(e => e.KEigenschaftWertAbhaengigkeit).HasColumnName("kEigenschaftWertAbhaengigkeit");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KEigenschaftWertZiel).HasColumnName("kEigenschaftWertZiel");
            });

            modelBuilder.Entity<TEigenschaftWertAufpreis>(entity =>
            {
                entity.HasKey(e => new { e.KEigenschaftWert, e.KKundenGruppe, e.KShop });

                entity.ToTable("tEigenschaftWertAufpreis");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAufpreisNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufpreisNetto");
            });

            modelBuilder.Entity<TEigenschaftWertPict>(entity =>
            {
                entity.HasKey(e => e.KEigenschaftWertPict);

                entity.ToTable("tEigenschaftWertPict");

                entity.Property(e => e.KEigenschaftWertPict)
                    .ValueGeneratedNever()
                    .HasColumnName("kEigenschaftWertPict");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet).HasColumnName("nInet");
            });

            modelBuilder.Entity<TEigenschaftWertSichtbarkeit>(entity =>
            {
                entity.HasKey(e => new { e.KEigenschaftWert, e.KKundenGruppe, e.KShop });

                entity.ToTable("tEigenschaftWertSichtbarkeit");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TEigenschaftWertSprache>(entity =>
            {
                entity.HasKey(e => new { e.KEigenschaftWert, e.KSprache });

                entity.ToTable("tEigenschaftWertSprache");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TEingangskanalEmail>(entity =>
            {
                entity.HasKey(e => e.KEingangskanalEmail)
                    .HasName("PK_Ticketsystem_tEingangskanalEmail");

                entity.ToTable("tEingangskanalEmail", "Ticketsystem");

                entity.HasIndex(e => e.KAusgangskanalEmail, "IX_Ticketsystem_tEingangskanalEmail_kAusgangskanalEmail");

                entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");

                entity.Property(e => e.CBenutzername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CEmailAdresse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmailAdresse");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName")
                    .HasDefaultValueSql("('kein Name')");

                entity.Property(e => e.CPasswort)
                    .HasMaxLength(255)
                    .HasColumnName("cPasswort");

                entity.Property(e => e.CServeradresse)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cServeradresse");

                entity.Property(e => e.CServerport)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cServerport");

                entity.Property(e => e.CVerschluesselung).HasColumnName("cVerschluesselung");

                entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");

                entity.Property(e => e.KStatusNeueAntwort).HasColumnName("kStatusNeueAntwort");

                entity.Property(e => e.KStatusNeuesTicket).HasColumnName("kStatusNeuesTicket");

                entity.Property(e => e.NGeleseneNachrichtenAbholen).HasColumnName("nGeleseneNachrichtenAbholen");

                entity.Property(e => e.NIntervall).HasColumnName("nIntervall");

                entity.Property(e => e.NMailNachDemAbrufenLoeschen)
                    .HasColumnName("nMailNachDemAbrufenLoeschen")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NMaximalesEmailAlter).HasColumnName("nMaximalesEmailAlter");

                entity.Property(e => e.NProtokoll).HasColumnName("nProtokoll");

                entity.HasOne(d => d.KAusgangskanalEmailNavigation)
                    .WithMany(p => p.TEingangskanalEmail)
                    .HasForeignKey(d => d.KAusgangskanalEmail)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Ticketsystem_tEingangskanalEmail_kAusgangskanal");

                entity.HasOne(d => d.KStatusNeueAntwortNavigation)
                    .WithMany(p => p.TEingangskanalEmailKStatusNeueAntwortNavigation)
                    .HasForeignKey(d => d.KStatusNeueAntwort)
                    .HasConstraintName("FK_Ticketsystem_tEingangskanalEmail_kStatusNeueAntwort");

                entity.HasOne(d => d.KStatusNeuesTicketNavigation)
                    .WithMany(p => p.TEingangskanalEmailKStatusNeuesTicketNavigation)
                    .HasForeignKey(d => d.KStatusNeuesTicket)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tEingangskanalEmail_kStatusNeuesTicket");
            });

            modelBuilder.Entity<TEingangskanalEmailLabel>(entity =>
            {
                entity.HasKey(e => e.KEingangskanalEmailLabel)
                    .HasName("PK_Ticketsystem_tEingangskanalEmailLabel");

                entity.ToTable("tEingangskanalEmailLabel", "Ticketsystem");

                entity.HasIndex(e => e.KEingangskanalEmail, "IX_Ticketsystem_tEingangskanalEmailLabel_kEingangskanalEmail");

                entity.HasIndex(e => e.KLabel, "IX_Ticketsystem_tEingangskanalEmailLabel_kLabel");

                entity.Property(e => e.KEingangskanalEmailLabel).HasColumnName("kEingangskanalEmailLabel");

                entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.HasOne(d => d.KEingangskanalEmailNavigation)
                    .WithMany(p => p.TEingangskanalEmailLabel)
                    .HasForeignKey(d => d.KEingangskanalEmail)
                    .HasConstraintName("FK_Ticketsystem_tEingangskanalEmailLabel_kEingangskanalEmail");

                entity.HasOne(d => d.KLabelNavigation)
                    .WithMany(p => p.TEingangskanalEmailLabel)
                    .HasForeignKey(d => d.KLabel)
                    .HasConstraintName("FK_Ticketsystem_tEingangskanalEmailLabel_kLabel");
            });

            modelBuilder.Entity<TEingangsrechnung>(entity =>
            {
                entity.HasKey(e => e.KEingangsrechnung);

                entity.ToTable("tEingangsrechnung");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEigeneRechnungsnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneRechnungsnummer");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CHinweise)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweise");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CLieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferant");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.DBelegdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBelegdatum");

                entity.Property(e => e.DBezahlt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahlt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DZahlungsziel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsziel");

                entity.Property(e => e.FFremdFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFremdFaktor");

                entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NKumuliert).HasColumnName("nKumuliert");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NVerteilungsArt).HasColumnName("nVerteilungsArt");

                entity.Property(e => e.NZahlungFreigegeben).HasColumnName("nZahlungFreigegeben");
            });

            modelBuilder.Entity<TEingangsrechnungPos>(entity =>
            {
                entity.HasKey(e => e.KEingangsrechnungPos);

                entity.ToTable("tEingangsrechnungPos");

                entity.HasIndex(e => e.KEingangsrechnung, "IX_tEingangsrechnungPos_kEingangsrechnung_kLieferantenbestellung");

                entity.Property(e => e.KEingangsrechnungPos).HasColumnName("kEingangsrechnungPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferantenArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenArtNr");

                entity.Property(e => e.CLieferantenBezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenBezeichnung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");

                entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");
            });

            modelBuilder.Entity<TEingangsrechnungPosZusatzkosten>(entity =>
            {
                entity.HasKey(e => new { e.KZusatzkosten, e.KEingangsrechnungPos });

                entity.ToTable("tEingangsrechnungPosZusatzkosten");

                entity.Property(e => e.KZusatzkosten).HasColumnName("kZusatzkosten");

                entity.Property(e => e.KEingangsrechnungPos).HasColumnName("kEingangsrechnungPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dWert");

                entity.Property(e => e.FFremdFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFremdFaktor");

                entity.Property(e => e.FMwst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwst");
            });

            modelBuilder.Entity<TEingangsrechnungzusatzkosten>(entity =>
            {
                entity.HasKey(e => e.KZusatzkosten);

                entity.ToTable("tEingangsrechnungzusatzkosten");

                entity.Property(e => e.KZusatzkosten).HasColumnName("kZusatzkosten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NGld).HasColumnName("nGLD");

                entity.Property(e => e.NPreis).HasColumnName("nPreis");
            });

            modelBuilder.Entity<TEinheit>(entity =>
            {
                entity.HasKey(e => e.KEinheit);

                entity.ToTable("tEinheit");

                entity.Property(e => e.KEinheit).HasColumnName("kEinheit");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NIstUnsichtbar).HasColumnName("nIstUnsichtbar");
            });

            modelBuilder.Entity<TEinheitSprache>(entity =>
            {
                entity.HasKey(e => new { e.KEinheit, e.KSprache });

                entity.ToTable("tEinheitSprache");

                entity.Property(e => e.KEinheit).HasColumnName("kEinheit");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TEmailEinstellung>(entity =>
            {
                entity.HasKey(e => e.KEmailEinstellungen);

                entity.ToTable("tEMailEinstellung");

                entity.Property(e => e.KEmailEinstellungen).HasColumnName("kEMailEinstellungen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BSmimezertifikatData).HasColumnName("bSMIMEZertifikatData");

                entity.Property(e => e.CAbsender)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbsender");

                entity.Property(e => e.CBcc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBCC");

                entity.Property(e => e.CNutzernameSmtp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNutzernameSMTP");

                entity.Property(e => e.CPasswortSmtp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPasswortSMTP");

                entity.Property(e => e.CServerSmtp)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cServerSMTP");

                entity.Property(e => e.CSigBefehlDateiname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSigBefehlDateiname");

                entity.Property(e => e.CSigBefehlParameter)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSigBefehlParameter");

                entity.Property(e => e.CSigPortalKdNummer)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSigPortalKdNummer");

                entity.Property(e => e.CSigPortalNutzername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSigPortalNutzername");

                entity.Property(e => e.CSigPortalPasswort)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSigPortalPasswort");

                entity.Property(e => e.CSigPortalPfad)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSigPortalPfad");

                entity.Property(e => e.CSmimepasswort)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cSMIMEPasswort");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.NPortSmtp).HasColumnName("nPortSMTP");

                entity.Property(e => e.NSecurity).HasColumnName("nSecurity");

                entity.Property(e => e.NSigBefehlAktiv).HasColumnName("nSigBefehlAktiv");

                entity.Property(e => e.NSigPortalAktiv).HasColumnName("nSigPortalAktiv");

                entity.Property(e => e.NSigPortalVerifizierung).HasColumnName("nSigPortalVerifizierung");

                entity.Property(e => e.NSmimeaktiv).HasColumnName("nSMIMEAktiv");
            });

            modelBuilder.Entity<TEntityPlatform>(entity =>
            {
                entity.HasKey(e => new { e.KEntityId, e.NEntityType, e.KShop })
                    .HasName("PK_Sync_tEntityPlatform");

                entity.ToTable("tEntityPlatform", "Sync");

                entity.Property(e => e.KEntityId).HasColumnName("kEntityId");

                entity.Property(e => e.NEntityType).HasColumnName("nEntityType");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");
            });

            modelBuilder.Entity<TEntityTracking>(entity =>
            {
                entity.HasKey(e => new { e.KEntityId, e.NEntityType, e.NSyncType })
                    .HasName("PK_Sync_tEntityTracking");

                entity.ToTable("tEntityTracking", "Sync");

                entity.Property(e => e.KEntityId).HasColumnName("kEntityId");

                entity.Property(e => e.NEntityType).HasColumnName("nEntityType");

                entity.Property(e => e.NSyncType).HasColumnName("nSyncType");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.DCreated)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreated");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");
            });

            modelBuilder.Entity<TErlaubterDateityp>(entity =>
            {
                entity.HasKey(e => e.KErlaubterDateityp)
                    .HasName("PK_Ticketsystem_tErlaubterDateityp");

                entity.ToTable("tErlaubterDateityp", "Ticketsystem");

                entity.Property(e => e.KErlaubterDateityp).HasColumnName("kErlaubterDateityp");

                entity.Property(e => e.CDateityp)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cDateityp");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");
            });

            modelBuilder.Entity<TErloeskonten>(entity =>
            {
                entity.HasKey(e => e.KErloeskonten);

                entity.ToTable("tErloeskonten");

                entity.Property(e => e.KErloeskonten)
                    .ValueGeneratedNever()
                    .HasColumnName("kErloeskonten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<TErreichbarkeit>(entity =>
            {
                entity.HasKey(e => e.KEreichbarkeit)
                    .HasName("PK_Ticketsystem_tErreichbarkeit");

                entity.ToTable("tErreichbarkeit", "Ticketsystem");

                entity.HasIndex(e => e.KAntwortkanal, "IX_Ticketsystem_tErreichbarkeit_kAntwortkanal");

                entity.Property(e => e.KEreichbarkeit).HasColumnName("kEreichbarkeit");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DAnfang)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnfang");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");

                entity.HasOne(d => d.KAntwortkanalNavigation)
                    .WithMany(p => p.TErreichbarkeit)
                    .HasForeignKey(d => d.KAntwortkanal)
                    .HasConstraintName("FK_Ticketsystem_tErreichbarkeit_kAntwortkanal");
            });

            modelBuilder.Entity<TErrorlog>(entity =>
            {
                entity.HasKey(e => e.KErrorlog)
                    .HasName("PK_dbo_tErrorlog");

                entity.ToTable("tErrorlog");

                entity.Property(e => e.KErrorlog).HasColumnName("kErrorlog");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.DErstelltUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelltUtc");

                entity.Property(e => e.NFehlerId).HasColumnName("nFehlerID");

                entity.Property(e => e.NIstWorker).HasColumnName("nIstWorker");
            });

            modelBuilder.Entity<TEtikett>(entity =>
            {
                entity.HasKey(e => e.KEtikett);

                entity.ToTable("tEtikett");

                entity.Property(e => e.KEtikett)
                    .ValueGeneratedNever()
                    .HasColumnName("kEtikett");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAfontName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cAFontName");

                entity.Property(e => e.CAzeile1)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cAZeile1");

                entity.Property(e => e.CAzeile2)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cAZeile2");

                entity.Property(e => e.CAzeile3)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cAZeile3");

                entity.Property(e => e.CAzeile4)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cAZeile4");

                entity.Property(e => e.CAzeile5)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cAZeile5");

                entity.Property(e => e.CEfontName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEFontName");

                entity.Property(e => e.CEzeile1)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEZeile1");

                entity.Property(e => e.CEzeile2)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEZeile2");

                entity.Property(e => e.CEzeile3)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEZeile3");

                entity.Property(e => e.CEzeile4)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEZeile4");

                entity.Property(e => e.CEzeile5)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEZeile5");

                entity.Property(e => e.CEzeile6)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cEZeile6");

                entity.Property(e => e.CName)
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DAx1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAX1");

                entity.Property(e => e.DAx2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAX2");

                entity.Property(e => e.DAx3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAX3");

                entity.Property(e => e.DAx4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAX4");

                entity.Property(e => e.DAx5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAX5");

                entity.Property(e => e.DAxx1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAXX1");

                entity.Property(e => e.DAxx2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAXX2");

                entity.Property(e => e.DAxx3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAXX3");

                entity.Property(e => e.DAxx4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAXX4");

                entity.Property(e => e.DAxx5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAXX5");

                entity.Property(e => e.DAy1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAY1");

                entity.Property(e => e.DAy2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAY2");

                entity.Property(e => e.DAy3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAY3");

                entity.Property(e => e.DAy4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAY4");

                entity.Property(e => e.DAy5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAY5");

                entity.Property(e => e.DAyy1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAYY1");

                entity.Property(e => e.DAyy2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAYY2");

                entity.Property(e => e.DAyy3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAYY3");

                entity.Property(e => e.DAyy4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAYY4");

                entity.Property(e => e.DAyy5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dAYY5");

                entity.Property(e => e.DEx1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEX1");

                entity.Property(e => e.DEx2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEX2");

                entity.Property(e => e.DEx3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEX3");

                entity.Property(e => e.DEx4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEX4");

                entity.Property(e => e.DEx5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEX5");

                entity.Property(e => e.DEx6)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEX6");

                entity.Property(e => e.DExx1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEXX1");

                entity.Property(e => e.DExx2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEXX2");

                entity.Property(e => e.DExx3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEXX3");

                entity.Property(e => e.DExx4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEXX4");

                entity.Property(e => e.DExx5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEXX5");

                entity.Property(e => e.DExx6)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEXX6");

                entity.Property(e => e.DEy1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEY1");

                entity.Property(e => e.DEy2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEY2");

                entity.Property(e => e.DEy3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEY3");

                entity.Property(e => e.DEy4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEY4");

                entity.Property(e => e.DEy5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEY5");

                entity.Property(e => e.DEy6)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEY6");

                entity.Property(e => e.DEyy1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEYY1");

                entity.Property(e => e.DEyy2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEYY2");

                entity.Property(e => e.DEyy3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEYY3");

                entity.Property(e => e.DEyy4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEYY4");

                entity.Property(e => e.DEyy5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEYY5");

                entity.Property(e => e.DEyy6)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("dEYY6");

                entity.Property(e => e.NAfontSize).HasColumnName("nAFontSize");

                entity.Property(e => e.NEfontSize).HasColumnName("nEFontSize");
            });

            modelBuilder.Entity<TFehler>(entity =>
            {
                entity.HasKey(e => e.KFehler);

                entity.ToTable("tFehler");

                entity.Property(e => e.KFehler).HasColumnName("kFehler");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CValue1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue1");

                entity.Property(e => e.CValue2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue2");

                entity.Property(e => e.CValue3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue3");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.Kkey1).HasColumnName("kkey1");

                entity.Property(e => e.Kkey2).HasColumnName("kkey2");

                entity.Property(e => e.NValue1).HasColumnName("nValue1");

                entity.Property(e => e.NValue2).HasColumnName("nValue2");

                entity.Property(e => e.NValue3).HasColumnName("nValue3");
            });

            modelBuilder.Entity<TFeldTyp>(entity =>
            {
                entity.HasKey(e => e.KFeldTyp);

                entity.ToTable("tFeldTyp");

                entity.Property(e => e.KFeldTyp).HasColumnName("kFeldTyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .HasColumnName("cName");

                entity.Property(e => e.CRegEx).HasColumnName("cRegEx");

                entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");
            });

            modelBuilder.Entity<TFile>(entity =>
            {
                entity.HasKey(e => e.KFile)
                    .HasName("PK_dbo_tFile");

                entity.ToTable("tFile");

                entity.Property(e => e.KFile).HasColumnName("kFile");

                entity.Property(e => e.BFile)
                    .IsRequired()
                    .HasColumnName("bFile");

                entity.Property(e => e.CFileHash)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFileHash");

                entity.Property(e => e.CFileName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFileName");

                entity.Property(e => e.CFileType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFileType");

                entity.Property(e => e.DErstellDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellDatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NFileSizeKb).HasColumnName("nFileSizeKB");
            });

            modelBuilder.Entity<TFirmaUstIdNr>(entity =>
            {
                entity.HasKey(e => e.KFirmaUstIdNr);

                entity.ToTable("tFirmaUStIdNr");

                entity.HasIndex(e => new { e.KFirma, e.CLandIso }, "UQ_tFirmaUStIdNr_kFirma_cLandISO")
                    .IsUnique();

                entity.Property(e => e.KFirmaUstIdNr).HasColumnName("kFirmaUStIdNr");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CLandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CUstId)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cUStId");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.NAuchAlsVersandlandBetrachten).HasColumnName("nAuchAlsVersandlandBetrachten");
            });

            modelBuilder.Entity<TFormular>(entity =>
            {
                entity.HasKey(e => e.KFormular);

                entity.ToTable("tFormular");

                entity.Property(e => e.KFormular).HasColumnName("kFormular");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TFormularAnhangDaten>(entity =>
            {
                entity.HasKey(e => e.KFormularAnhangDaten);

                entity.ToTable("tFormularAnhangDaten");

                entity.Property(e => e.KFormularAnhangDaten).HasColumnName("kFormularAnhangDaten");

                entity.Property(e => e.BDaten)
                    .IsRequired()
                    .HasColumnName("bDaten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BSha1)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("bSHA1")
                    .IsFixedLength(true);

                entity.Property(e => e.CDateiname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDateiname");
            });

            modelBuilder.Entity<TFormularDruckEinstellung>(entity =>
            {
                entity.HasKey(e => e.KFormularDruckEinstellung);

                entity.ToTable("tFormularDruckEinstellung");

                entity.HasIndex(e => new { e.KFormular, e.CRechnername, e.KBenutzer }, "UQ_tFormularDruckEinstellung_cRechnername_kBenutzer_kFormular")
                    .IsUnique();

                entity.Property(e => e.KFormularDruckEinstellung).HasColumnName("kFormularDruckEinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDruckername1)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername1");

                entity.Property(e => e.CDruckername2)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername2");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFormular).HasColumnName("kFormular");

                entity.Property(e => e.NKopien1).HasColumnName("nKopien1");

                entity.Property(e => e.NKopien2).HasColumnName("nKopien2");
            });

            modelBuilder.Entity<TFormularEmailEinstellung>(entity =>
            {
                entity.HasKey(e => e.KFormularEmailEinstellung);

                entity.ToTable("tFormularEMailEinstellung");

                entity.HasIndex(e => e.KFormular, "UQ_tFormularEMailEinstellung_kFormular")
                    .IsUnique();

                entity.Property(e => e.KFormularEmailEinstellung).HasColumnName("kFormularEMailEinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBcc)
                    .IsRequired()
                    .HasMaxLength(127)
                    .IsUnicode(false)
                    .HasColumnName("cBcc");

                entity.Property(e => e.KFormular).HasColumnName("kFormular");

                entity.Property(e => e.NSignieren).HasColumnName("nSignieren");
            });

            modelBuilder.Entity<TFormularEmailVorlageAnhang>(entity =>
            {
                entity.HasKey(e => e.KFormularEmailVorlageAnhang);

                entity.ToTable("tFormularEMailVorlageAnhang");

                entity.Property(e => e.KFormularEmailVorlageAnhang).HasColumnName("kFormularEMailVorlageAnhang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KFormularAnhangDaten).HasColumnName("kFormularAnhangDaten");

                entity.Property(e => e.KFormularVorlage).HasColumnName("kFormularVorlage");

                entity.Property(e => e.NAusgabetyp).HasColumnName("nAusgabetyp");

                entity.Property(e => e.NFormular).HasColumnName("nFormular");

                entity.Property(e => e.NKindElement).HasColumnName("nKindElement");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TFormularFaxEinstellung>(entity =>
            {
                entity.HasKey(e => e.KFormularFaxEinstellung);

                entity.ToTable("tFormularFaxEinstellung");

                entity.HasIndex(e => new { e.KFormular, e.CRechnername, e.KBenutzer }, "UQ_tFormularFaxEinstellung_cRechnername_kBenutzer_kFormular")
                    .IsUnique();

                entity.Property(e => e.KFormularFaxEinstellung).HasColumnName("kFormularFaxEinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CFaxname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFaxname");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFormular).HasColumnName("kFormular");
            });

            modelBuilder.Entity<TFormularLlvorlageDaten>(entity =>
            {
                entity.HasKey(e => e.KFormularLlvorlageDaten);

                entity.ToTable("tFormularLLVorlageDaten");

                entity.Property(e => e.KFormularLlvorlageDaten).HasColumnName("kFormularLLVorlageDaten");

                entity.Property(e => e.BDaten)
                    .IsRequired()
                    .HasColumnName("bDaten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DAktualisiert)
                    .HasColumnType("datetime")
                    .HasColumnName("dAktualisiert");
            });

            modelBuilder.Entity<TFormularVorlage>(entity =>
            {
                entity.HasKey(e => e.KFormularVorlage);

                entity.ToTable("tFormularVorlage");

                entity.Property(e => e.KFormularVorlage).HasColumnName("kFormularVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CMahnstufenName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMahnstufenName");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFormular).HasColumnName("kFormular");

                entity.Property(e => e.KFormularLlvorlageDaten).HasColumnName("kFormularLLVorlageDaten");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TFulfillerEinstellungen>(entity =>
            {
                entity.HasKey(e => e.KFulfillerEinstellungen);

                entity.ToTable("tFulfillerEinstellungen", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.KLieferant, e.KKunde }, "UQ_FulfillmentNetwork_tFulfillerEinstellungen_kLieferant_kKunde")
                    .IsUnique();

                entity.Property(e => e.KFulfillerEinstellungen).HasColumnName("kFulfillerEinstellungen");

                entity.Property(e => e.CPrefixAbrechnung)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cPrefixAbrechnung");

                entity.Property(e => e.CSuffixAbrechnung)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cSuffixAbrechnung");

                entity.Property(e => e.DAbrechnungEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungEnde");

                entity.Property(e => e.DAbrechnungInitial)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungInitial");

                entity.Property(e => e.DAbrechnungStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungStart");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NAbrechnungsZeitraum).HasColumnName("nAbrechnungsZeitraum");

                entity.Property(e => e.NBestandserfassungModus).HasColumnName("nBestandserfassungModus");
            });

            modelBuilder.Entity<TFulfillerLieferscheinRef>(entity =>
            {
                entity.HasKey(e => e.KFulfillerLieferscheinRef)
                    .HasName("PK_FulfillmentNetwork.tFulfillerLieferscheinRef");

                entity.ToTable("tFulfillerLieferscheinRef", "FulfillmentNetwork");

                entity.Property(e => e.KFulfillerLieferscheinRef).HasColumnName("kFulfillerLieferscheinRef");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.HasOne(d => d.KLieferscheinNavigation)
                    .WithMany(p => p.TFulfillerLieferscheinRef)
                    .HasForeignKey(d => d.KLieferschein)
                    .HasConstraintName("FK_FulfillmentNetwork_tFulfillerLieferscheinRef_kLieferschein");
            });

            modelBuilder.Entity<TFulfillmentAuftrag>(entity =>
            {
                entity.HasKey(e => e.KFulfillmentAuftrag);

                entity.ToTable("tFulfillmentAuftrag");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBestellnummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cBestellnummer");

                entity.Property(e => e.CFehlermeldung)
                    .IsUnicode(false)
                    .HasColumnName("cFehlermeldung");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdressZusatz");

                entity.Property(e => e.CLieferAdresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseAnrede");

                entity.Property(e => e.CLieferAdresseEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseEmail");

                entity.Property(e => e.CLieferAdresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseFax");

                entity.Property(e => e.CLieferAdresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseFirma");

                entity.Property(e => e.CLieferAdresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseKundennummer");

                entity.Property(e => e.CLieferAdresseLand)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseLand");

                entity.Property(e => e.CLieferAdresseName)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseName");

                entity.Property(e => e.CLieferAdresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseOrt");

                entity.Property(e => e.CLieferAdressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdressePLZ");

                entity.Property(e => e.CLieferAdresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseStrasse");

                entity.Property(e => e.CLieferAdresseTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseTel");

                entity.Property(e => e.CLieferAdresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseTitel");

                entity.Property(e => e.CLieferAdresseVorname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cLieferAdresseVorname");

                entity.Property(e => e.CLieferPrioritaet)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferPrioritaet")
                    .HasDefaultValueSql("('Standard')");

                entity.Property(e => e.CLieferZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferZusatz");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferscheinnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinnummer");

                entity.Property(e => e.COutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundId");

                entity.Property(e => e.CStornoCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStornoCode");

                entity.Property(e => e.CStornoGrund)
                    .IsUnicode(false)
                    .HasColumnName("cStornoGrund");

                entity.Property(e => e.DApiVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dApiVersendet");

                entity.Property(e => e.DBestelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestelldatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DGefaxt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGefaxt");

                entity.Property(e => e.DGemailt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGemailt");

                entity.Property(e => e.DInBearbeitung)
                    .HasColumnType("datetime")
                    .HasColumnName("dInBearbeitung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NFulfillmentDienstleister).HasColumnName("nFulfillmentDienstleister");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TFulfillmentAuftragPos>(entity =>
            {
                entity.HasKey(e => e.KFulfillmentAuftragPos);

                entity.ToTable("tFulfillmentAuftragPos");

                entity.HasIndex(e => e.KFulfillmentAuftrag, "IX_tFulfillmentAuftragPos_kFulfillmentAuftrag");

                entity.HasIndex(e => e.KLieferscheinPos, "IX_tFulfillmentAuftragPos_kLieferscheinPos");

                entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAbhilfe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbhilfe");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikelGeschenkText)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelGeschenkText");

                entity.Property(e => e.CArtikelHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelHinweis");

                entity.Property(e => e.CCarrier)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cCarrier");

                entity.Property(e => e.CErrorMessage)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CErrorType)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cErrorType");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.NErrorCode).HasColumnName("nErrorCode");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TFulfillmentLog>(entity =>
            {
                entity.HasKey(e => e.KFulfillmentLog)
                    .HasName("PK_dbo.tFulfillmentLog");

                entity.ToTable("tFulfillmentLog", "FulfillmentNetwork");

                entity.Property(e => e.KFulfillmentLog).HasColumnName("kFulfillmentLog");

                entity.Property(e => e.CMessage)
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.CMessageDetails)
                    .IsUnicode(false)
                    .HasColumnName("cMessageDetails");

                entity.Property(e => e.CRequestId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRequestId");

                entity.Property(e => e.CSessionId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.DTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimestamp");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NLogLevel).HasColumnName("nLogLevel");

                entity.Property(e => e.NMessageSource).HasColumnName("nMessageSource");
            });

            modelBuilder.Entity<TFulfillmentWorker>(entity =>
            {
                entity.HasKey(e => e.KFulfillmentWorker);

                entity.ToTable("tFulfillmentWorker");

                entity.Property(e => e.KFulfillmentWorker)
                    .ValueGeneratedNever()
                    .HasColumnName("kFulfillmentWorker");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CTaskId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTaskId");

                entity.Property(e => e.DUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dUpdated");

                entity.Property(e => e.NTaskId).HasColumnName("nTaskId");
            });

            modelBuilder.Entity<TGebinde>(entity =>
            {
                entity.HasKey(e => e.KGebinde);

                entity.ToTable("tGebinde");

                entity.Property(e => e.KGebinde).HasColumnName("kGebinde");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEAN");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<TGebuehrtyp>(entity =>
            {
                entity.HasKey(e => e.KGebuehrtyp);

                entity.ToTable("tGebuehrtyp");

                entity.Property(e => e.KGebuehrtyp).HasColumnName("kGebuehrtyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameExtern)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cNameExtern");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TGeleseneEmail>(entity =>
            {
                entity.HasKey(e => e.KGeleseneEmail)
                    .HasName("PK_Ticketsystem_tGeleseneEmail");

                entity.ToTable("tGeleseneEmail", "Ticketsystem");

                entity.HasIndex(e => e.KEingangskanalEmail, "IX_Ticketsystem_tGeleseneEmail_kEingangskanalEmail");

                entity.HasIndex(e => e.KEingangskanalEmail, "IX_Ticketsystem_tGeleseneEmail_kEingangskanalEmail_INCL");

                entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tGeleseneEmail_kNachricht");

                entity.Property(e => e.KGeleseneEmail).HasColumnName("kGeleseneEmail");

                entity.Property(e => e.CUniqueId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cUniqueId");

                entity.Property(e => e.KEingangskanalEmail).HasColumnName("kEingangskanalEmail");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KEingangskanalEmailNavigation)
                    .WithMany(p => p.TGeleseneEmail)
                    .HasForeignKey(d => d.KEingangskanalEmail)
                    .HasConstraintName("FK_Ticketsystem_tGeleseneEmail_kEingangskanalEmail");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TGeleseneEmail)
                    .HasForeignKey(d => d.KNachricht)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Ticketsystem_tGeleseneEMail_kNachricht");
            });

            modelBuilder.Entity<TGlobalsQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tGlobalsQueue");

                entity.HasIndex(e => e.CName, "IX_tGlobalsQueue_cName");

                entity.HasIndex(e => e.KShop, "IX_tGlobalsQueue_kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimeStamp");

                entity.Property(e => e.KKey).HasColumnName("kKey");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<TGutschein>(entity =>
            {
                entity.HasKey(e => e.KGutschein);

                entity.ToTable("tGutschein");

                entity.Property(e => e.KGutschein)
                    .ValueGeneratedNever()
                    .HasColumnName("kGutschein");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CGrund)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("cGrund");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TGutschriftPos>(entity =>
            {
                entity.HasKey(e => e.KGutschriftPos);

                entity.ToTable("tGutschriftPos");

                entity.HasIndex(e => e.KBestellPos, "IX_tGutschriftPos_kBestellPos");

                entity.HasIndex(e => e.TArtikelKArtikel, "IX_tGutschriftPos_tArtikel_kArtikel");

                entity.HasIndex(e => e.TGutschriftKGutschrift, "IX_tGutschriftPos_tGutschrift_kGutschrift");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KGutschriftStueckliste).HasColumnName("kGutschriftStueckliste");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnzahl");

                entity.Property(e => e.NLager)
                    .HasColumnName("nLager")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");

                entity.Property(e => e.TGutschriftKGutschrift).HasColumnName("tGutschrift_kGutschrift");
            });

            modelBuilder.Entity<TGutschriftSperre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tGutschriftSperre");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            });

            modelBuilder.Entity<THersteller>(entity =>
            {
                entity.HasKey(e => e.KHersteller);

                entity.ToTable("tHersteller");

                entity.HasIndex(e => e.CName, "UQ_tHersteller_cName")
                    .IsUnique();

                entity.Property(e => e.KHersteller)
                    .ValueGeneratedNever()
                    .HasColumnName("kHersteller");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CHomepage)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHomepage");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CMetaTitle)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaTitle");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<THerstellerBildPlattform>(entity =>
            {
                entity.HasKey(e => e.KHerstellerBildPlattform);

                entity.ToTable("tHerstellerBildPlattform");

                entity.Property(e => e.KHerstellerBildPlattform).HasColumnName("kHerstellerBildPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet).HasColumnName("nInet");
            });

            modelBuilder.Entity<THerstellerSprache>(entity =>
            {
                entity.HasKey(e => new { e.KHersteller, e.KSprache });

                entity.ToTable("tHerstellerSprache");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CMetaTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaTitle");

                entity.Property(e => e.CSeo)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");
            });

            modelBuilder.Entity<THintergrundDienst>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tHintergrundDienst");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NAmazonAuftrag).HasColumnName("nAmazonAuftrag");

                entity.Property(e => e.NEbayAuftrag).HasColumnName("nEbayAuftrag");

                entity.Property(e => e.NEbayBestand).HasColumnName("nEbayBestand");

                entity.Property(e => e.NEbaySmall).HasColumnName("nEbaySmall");

                entity.Property(e => e.NKeinAmazon).HasColumnName("nKeinAmazon");

                entity.Property(e => e.NKeinEbay).HasColumnName("nKeinEbay");

                entity.Property(e => e.NKeinFulfillment).HasColumnName("nKeinFulfillment");

                entity.Property(e => e.NKeinShop).HasColumnName("nKeinShop");

                entity.Property(e => e.NKeinZahlungsabgleich).HasColumnName("nKeinZahlungsabgleich");

                entity.Property(e => e.NKundenupdate).HasColumnName("nKundenupdate");

                entity.Property(e => e.NReDrucken).HasColumnName("nReDrucken");

                entity.Property(e => e.NRepricer).HasColumnName("nRepricer");

                entity.Property(e => e.NRetourenErstellen).HasColumnName("nRetourenErstellen");

                entity.Property(e => e.NSek).HasColumnName("nSek");

                entity.Property(e => e.NUpdateBilderBeschreibung).HasColumnName("nUpdateBilderBeschreibung");

                entity.Property(e => e.NWaehrung).HasColumnName("nWaehrung");

                entity.Property(e => e.NWebshopAuftrag).HasColumnName("nWebshopAuftrag");
            });

            modelBuilder.Entity<THistorie>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tHistorie", "Kunde");

                entity.HasIndex(e => new { e.KKunde, e.KVorgang, e.DErstellt }, "IX_tHistorie_kKunde_kVorgang_dErstellt");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CValue1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue1");

                entity.Property(e => e.CValue2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue2");

                entity.Property(e => e.CValue3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue3");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FValue1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fValue1");

                entity.Property(e => e.FValue2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fValue2");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKey).HasColumnName("kKey");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KVorgang).HasColumnName("kVorgang");
            });

            modelBuilder.Entity<TInboundRef>(entity =>
            {
                entity.HasKey(e => e.KInboundRef)
                    .HasName("PK_FulfillmentNetwork.tInboundRef");

                entity.ToTable("tInboundRef", "FulfillmentNetwork");

                entity.HasIndex(e => e.CInboundId, "IX_FulfillmentNetwork_tInboundRef_cInboundId");

                entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tInboundRef_cOwnerId");

                entity.Property(e => e.KInboundRef).HasColumnName("kInboundRef");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.CInboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInboundId");

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.NChangeState).HasColumnName("nChangeState");

                entity.Property(e => e.NInboundStatus).HasColumnName("nInboundStatus");

                entity.Property(e => e.NRetryAttempts).HasColumnName("nRetryAttempts");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.HasOne(d => d.KLieferantenBestellungNavigation)
                    .WithMany(p => p.TInboundRef)
                    .HasForeignKey(d => d.KLieferantenBestellung)
                    .HasConstraintName("FK_dbo_tInboundRef_kLieferantenBestellung");
            });

            modelBuilder.Entity<TInetAdresseShop>(entity =>
            {
                entity.HasKey(e => new { e.KInetAdresse, e.KShop });

                entity.ToTable("tInetAdresseShop");

                entity.HasIndex(e => e.KAdresse, "IX_tInetAdresseShop_kAdresse");

                entity.Property(e => e.KInetAdresse).HasColumnName("kInetAdresse");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");
            });

            modelBuilder.Entity<TInetBestellungAttribute>(entity =>
            {
                entity.HasKey(e => e.KInetBestellungAttribute)
                    .HasName("PK_tInetBestellungAttribute_kInetBestellungAttribute");

                entity.ToTable("tInetBestellungAttribute");

                entity.Property(e => e.KInetBestellungAttribute).HasColumnName("kInetBestellungAttribute");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TInetKundeShop>(entity =>
            {
                entity.HasKey(e => new { e.KInetKunde, e.KShop });

                entity.ToTable("tInetKundeShop");

                entity.HasIndex(e => e.KKunde, "IX_tInetKundeShop_kKunde");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.CShopKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cShopKundenNr");

                entity.Property(e => e.DKundeSeit)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("dKundeSeit");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KSubShop).HasColumnName("kSubShop");

                entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");
            });

            modelBuilder.Entity<TInetKundenAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInetKundenAttribute");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TInetShopZahlung>(entity =>
            {
                entity.HasKey(e => new { e.KZahlungseingang, e.KShop });

                entity.ToTable("tInetShopZahlung");

                entity.Property(e => e.KZahlungseingang).HasColumnName("kZahlungseingang");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEmpfaenger)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmpfaenger");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CZahler)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahler");

                entity.Property(e => e.CZahlungsanbieter)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsanbieter");

                entity.Property(e => e.DZeit)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dZeit");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.FZahlungsgebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZahlungsgebuehr");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KZahlung).HasColumnName("kZahlung");
            });

            modelBuilder.Entity<TInkassoUser>(entity =>
            {
                entity.HasKey(e => e.KInkassoUser);

                entity.ToTable("tInkassoUser");

                entity.Property(e => e.KInkassoUser)
                    .ValueGeneratedNever()
                    .HasColumnName("kInkassoUser");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CPasswort)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cPasswort");

                entity.Property(e => e.CUsername)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cUsername");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");
            });

            modelBuilder.Entity<TInteropQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInteropQueue");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CData)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cData");

                entity.Property(e => e.CUnique)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUnique");

                entity.Property(e => e.NKey1).HasColumnName("nKey1");

                entity.Property(e => e.NKey2).HasColumnName("nKey2");

                entity.Property(e => e.NOperation).HasColumnName("nOperation");
            });

            modelBuilder.Entity<TIntervallZahlungsInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tIntervallZahlungsInfo");

                entity.HasIndex(e => e.KIntervall, "IX_tIntervallZahlungsInfo_kIntervall");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBankName");

                entity.Property(e => e.CBic)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cBIC");

                entity.Property(e => e.CBlz)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cBLZ");

                entity.Property(e => e.CCvv)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cCVV");

                entity.Property(e => e.CGueltigkeit)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cGueltigkeit");

                entity.Property(e => e.CIban)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cIBAN");

                entity.Property(e => e.CInhaber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInhaber");

                entity.Property(e => e.CKartenNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKartenNr");

                entity.Property(e => e.CKartenTyp)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKartenTyp");

                entity.Property(e => e.CKontoNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKontoNr");

                entity.Property(e => e.KIntervall).HasColumnName("kIntervall");
            });

            modelBuilder.Entity<TInventur>(entity =>
            {
                entity.HasKey(e => e.KInventur);

                entity.ToTable("tInventur");

                entity.Property(e => e.KInventur).HasColumnName("kInventur");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCharge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCharge");

                entity.Property(e => e.CSeriennummer)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSeriennummer");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            });

            modelBuilder.Entity<TKategorieAttribut>(entity =>
            {
                entity.HasKey(e => e.KKategorieAttribut);

                entity.ToTable("tKategorieAttribut");

                entity.HasIndex(e => new { e.KKategorie, e.KAttribut, e.KShop }, "UQ_tKategorieAttribut_kAttribut_kKategorie_kShop")
                    .IsUnique();

                entity.Property(e => e.KKategorieAttribut).HasColumnName("kKategorieAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TKategorieAttributSprache>(entity =>
            {
                entity.HasKey(e => new { e.KKategorieAttribut, e.KSprache });

                entity.ToTable("tKategorieAttributSprache");

                entity.Property(e => e.KKategorieAttribut).HasColumnName("kKategorieAttribut");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");

                entity.Property(e => e.DWertDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dWertDateTime");

                entity.Property(e => e.FWertDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertDecimal");

                entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
            });

            modelBuilder.Entity<TKategorieMapping>(entity =>
            {
                entity.HasKey(e => e.KKategorieMapping);

                entity.ToTable("tKategorieMapping");

                entity.Property(e => e.KKategorieMapping).HasColumnName("kKategorieMapping");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KFremdKategorie).HasColumnName("kFremdKategorie");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<TKategorieRabatt>(entity =>
            {
                entity.HasKey(e => new { e.KKategorie, e.KKundenGruppe, e.KShop });

                entity.ToTable("tKategorieRabatt");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");
            });

            modelBuilder.Entity<TKategorieShop>(entity =>
            {
                entity.HasKey(e => new { e.KKategorie, e.KShop });

                entity.ToTable("tKategorieShop");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            });

            modelBuilder.Entity<TKategorieSichtbarkeit>(entity =>
            {
                entity.HasKey(e => new { e.KKategorie, e.KKundenGruppe, e.KShop });

                entity.ToTable("tKategorieSichtbarkeit");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TKategorieSperre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tKategorieSperre");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            });

            modelBuilder.Entity<TKategorieSprache>(entity =>
            {
                entity.HasKey(e => new { e.KKategorie, e.KSprache, e.KPlattform, e.KShop });

                entity.ToTable("tKategorieSprache");

                entity.HasIndex(e => e.KPlattform, "IX_tKategorieSprache_kPlattform");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(4522)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTitleTag)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cTitleTag");

                entity.Property(e => e.CUrlPfad)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUrlPfad");
            });

            modelBuilder.Entity<TKategoriebildPlattform>(entity =>
            {
                entity.HasKey(e => e.KKategoriebildPlattform);

                entity.ToTable("tKategoriebildPlattform");

                entity.HasIndex(e => new { e.KKategorie, e.KPlattform, e.KShop, e.NNr }, "UQ_tKategoriebildPlattform_kKategorie_kPlattform_kShop_nNr")
                    .IsUnique();

                entity.Property(e => e.KKategoriebildPlattform).HasColumnName("kKategoriebildPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet)
                    .HasColumnName("nInet")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NNr).HasColumnName("nNr");
            });

            modelBuilder.Entity<TKundeEigenesFeld>(entity =>
            {
                entity.HasKey(e => e.KKundeEigenesFeld);

                entity.ToTable("tKundeEigenesFeld", "Kunde");

                entity.HasIndex(e => new { e.KKunde, e.KAttribut }, "UQ_tKundeEigenesFeld_kKunde_kAttribut")
                    .IsUnique();

                entity.Property(e => e.KKundeEigenesFeld).HasColumnName("kKundeEigenesFeld");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");

                entity.Property(e => e.DWertDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dWertDateTime");

                entity.Property(e => e.FWertDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertDecimal");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NWertInt).HasColumnName("nWertInt");

                entity.HasOne(d => d.KAttributNavigation)
                    .WithMany(p => p.TKundeEigenesFeld)
                    .HasForeignKey(d => d.KAttribut)
                    .HasConstraintName("FK_tKundeEigenesFeld_kAttribut");
            });

            modelBuilder.Entity<TKundeLabel>(entity =>
            {
                entity.HasKey(e => new { e.KKunde, e.KLabel });

                entity.ToTable("tKundeLabel");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TKundeSuche>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tKunde_suche");

                entity.HasIndex(e => new { e.CValue, e.NId }, "IX_tkunde_suche_cValue_nId_include_kKunde");

                entity.HasIndex(e => e.KKunde, "IX_tkunde_suche_kKunde");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NId).HasColumnName("nId");
            });

            modelBuilder.Entity<TKundenDrucktext>(entity =>
            {
                entity.HasKey(e => e.KKundenDrucktext);

                entity.ToTable("tKundenDrucktext");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TKundenDrucktextSprache>(entity =>
            {
                entity.HasKey(e => new { e.KKundenDrucktext, e.KSprache });

                entity.ToTable("tKundenDrucktextSprache");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAngebotstext)
                    .IsUnicode(false)
                    .HasColumnName("cAngebotstext");

                entity.Property(e => e.CAuftragstext)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragstext");

                entity.Property(e => e.CGutschrifttext)
                    .IsUnicode(false)
                    .HasColumnName("cGutschrifttext");

                entity.Property(e => e.CLieferscheintext)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheintext");

                entity.Property(e => e.CRechnungstext)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungstext");
            });

            modelBuilder.Entity<TKundenGruppe>(entity =>
            {
                entity.HasKey(e => e.KKundenGruppe);

                entity.ToTable("tKundenGruppe");

                entity.Property(e => e.KKundenGruppe)
                    .ValueGeneratedNever()
                    .HasColumnName("kKundenGruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.NNettoPreise).HasColumnName("nNettoPreise");

                entity.Property(e => e.NShopLogin).HasColumnName("nShopLogin");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TKundenGruppeAttribute>(entity =>
            {
                entity.HasKey(e => e.KKundenGruppeAttribute);

                entity.ToTable("tKundenGruppeAttribute");

                entity.Property(e => e.KKundenGruppeAttribute)
                    .ValueGeneratedNever()
                    .HasColumnName("kKundenGruppeAttribute");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");
            });

            modelBuilder.Entity<TKundenGruppeSprache>(entity =>
            {
                entity.HasKey(e => new { e.KKundenGruppe, e.KSprache });

                entity.ToTable("tKundenGruppeSprache");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TKundenKategorie>(entity =>
            {
                entity.HasKey(e => e.KKundenKategorie);

                entity.ToTable("tKundenKategorie");

                entity.Property(e => e.KKundenKategorie)
                    .ValueGeneratedNever()
                    .HasColumnName("kKundenKategorie");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TKundenRankingGlobal>(entity =>
            {
                entity.HasKey(e => new { e.KKunde, e.NType, e.KShop, e.NPlattform });

                entity.ToTable("tKundenRankingGlobal");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStand)
                    .HasColumnType("datetime")
                    .HasColumnName("dStand");

                entity.Property(e => e.DVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dVon");

                entity.Property(e => e.NAnteilProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnteilProzent");

                entity.Property(e => e.NPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nPauschal");

                entity.Property(e => e.NRang).HasColumnName("nRang");

                entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
            });

            modelBuilder.Entity<TKundenRankingZeitraum>(entity =>
            {
                entity.HasKey(e => new { e.KKunde, e.NZeitraum, e.DVon, e.NType, e.KShop, e.NPlattform });

                entity.ToTable("tKundenRankingZeitraum");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NZeitraum).HasColumnName("nZeitraum");

                entity.Property(e => e.DVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dVon");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStand)
                    .HasColumnType("datetime")
                    .HasColumnName("dStand");

                entity.Property(e => e.NAnteilProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnteilProzent");

                entity.Property(e => e.NPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nPauschal");

                entity.Property(e => e.NRang).HasColumnName("nRang");

                entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
            });

            modelBuilder.Entity<TKundenSperre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tKundenSperre");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<TLabel>(entity =>
            {
                entity.HasKey(e => e.KLabel);

                entity.ToTable("tLabel");

                entity.HasIndex(e => new { e.NTyp, e.NSort }, "UQ_tLabel_nTyp_nSort")
                    .IsUnique();

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CColor)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("cColor");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NVorgangsId).HasColumnName("nVorgangsID");
            });

            modelBuilder.Entity<TLabelBenutzergruppeRechte>(entity =>
            {
                entity.HasKey(e => e.KLabelBenutzergruppeRechte)
                    .HasName("PK_Ticketsystem_tLabelBenutzergruppeRechte");

                entity.ToTable("tLabelBenutzergruppeRechte", "Ticketsystem");

                entity.Property(e => e.KLabelBenutzergruppeRechte).HasColumnName("kLabelBenutzergruppeRechte");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.Property(e => e.NIstSichtbar).HasColumnName("nIstSichtbar");

                entity.HasOne(d => d.KLabelNavigation)
                    .WithMany(p => p.TLabelBenutzergruppeRechte)
                    .HasForeignKey(d => d.KLabel)
                    .HasConstraintName("FK_Ticketsystem_tLabelBenutzergruppeRechte_kLabel");
            });

            modelBuilder.Entity<TLagerArtikel>(entity =>
            {
                entity.HasKey(e => e.KLagerArtikel)
                    .HasName("PK_tlagerartikel");

                entity.ToTable("tLagerArtikel");

                entity.Property(e => e.KLagerArtikel).HasColumnName("kLagerArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung1)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung1");

                entity.Property(e => e.CBeschreibung2)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung2");

                entity.Property(e => e.CSeriennr)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSeriennr");

                entity.Property(e => e.FEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEK");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KLager).HasColumnName("kLager");

                entity.Property(e => e.KLagerOrt).HasColumnName("kLagerOrt");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");

                entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<TLagerbestandBackup>(entity =>
            {
                entity.HasKey(e => e.KArtikel);

                entity.ToTable("tLagerbestandBackup");

                entity.Property(e => e.KArtikel)
                    .ValueGeneratedNever()
                    .HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CVersion)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cVersion");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 15)")
                    .HasColumnName("fLagerbestand");
            });

            modelBuilder.Entity<TLandSteuersatz>(entity =>
            {
                entity.HasKey(e => new { e.CIsoland, e.CKuerzelBundesland });

                entity.ToTable("tLandSteuersatz");

                entity.Property(e => e.CIsoland)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISOLand");

                entity.Property(e => e.CKuerzelBundesland)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cKuerzelBundesland");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FErmaessigterSatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fErmaessigterSatz");

                entity.Property(e => e.FErmaessigterSatzNiedrig)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fErmaessigterSatzNiedrig");

                entity.Property(e => e.FLieferschwelle)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLieferschwelle");

                entity.Property(e => e.FNormalerSatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNormalerSatz");

                entity.Property(e => e.FStarkErmaessigterSatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fStarkErmaessigterSatz");

                entity.Property(e => e.FZwischensatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZwischensatz");
            });

            modelBuilder.Entity<TLaufendeNummern>(entity =>
            {
                entity.HasKey(e => e.KLaufendeNummer);

                entity.ToTable("tLaufendeNummern");

                entity.Property(e => e.KLaufendeNummer).HasColumnName("kLaufendeNummer");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnzeigename)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cAnzeigename");

                entity.Property(e => e.CColumn)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cColumn");

                entity.Property(e => e.CName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPrefix)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cPrefix");

                entity.Property(e => e.CSuffix)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cSuffix");

                entity.Property(e => e.CTable)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTable");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.NNummer).HasColumnName("nNummer");
            });

            modelBuilder.Entity<TLfdnrKunde>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tLfdnrKunde");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NNummer).HasColumnName("nNummer");
            });

            modelBuilder.Entity<TLhm>(entity =>
            {
                entity.HasKey(e => e.KLhm);

                entity.ToTable("tLHM");

                entity.HasIndex(e => e.KLhmstatus, "IX_tLHM_kLHMStatus");

                entity.HasIndex(e => new { e.CLhmid, e.KWarenlager }, "UQ_tLHM_cLHMId_kWarenlager")
                    .IsUnique();

                entity.Property(e => e.KLhm).HasColumnName("kLHM");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CLhmid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLHMId");

                entity.Property(e => e.DBearbeitet)
                    .HasColumnType("datetime")
                    .HasColumnName("dBearbeitet");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLhmstatus).HasColumnName("kLHMStatus");

                entity.Property(e => e.KLhmtyp).HasColumnName("kLHMTyp");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NSperre).HasColumnName("nSperre");
            });

            modelBuilder.Entity<TLhmattribut>(entity =>
            {
                entity.HasKey(e => e.KLhmattribut);

                entity.ToTable("tLHMAttribut");

                entity.Property(e => e.KLhmattribut).HasColumnName("kLHMAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAttribut)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cAttribut");

                entity.Property(e => e.KLhm).HasColumnName("kLHM");
            });

            modelBuilder.Entity<TLhmstatus>(entity =>
            {
                entity.HasKey(e => e.KLhmstatus);

                entity.ToTable("tLHMStatus");

                entity.HasIndex(e => new { e.KBestellung, e.NStatus }, "IX_tLHMStatus_kBestellung_nStatus");

                entity.Property(e => e.KLhmstatus).HasColumnName("kLHMStatus");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLhm).HasColumnName("kLHM");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TLhmtyp>(entity =>
            {
                entity.HasKey(e => e.KLhmtyp);

                entity.ToTable("tLHMTyp");

                entity.Property(e => e.KLhmtyp)
                    .ValueGeneratedNever()
                    .HasColumnName("kLHMTyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TLiefArtikelPreis>(entity =>
            {
                entity.HasKey(e => e.KLiefArtikelPreis);

                entity.ToTable("tLiefArtikelPreis");

                entity.HasIndex(e => e.KLiefArtikel, "IX_tLiefArtikelPreis_kLiefArtikel");

                entity.Property(e => e.KLiefArtikelPreis).HasColumnName("kLiefArtikelPreis");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAb");

                entity.Property(e => e.FPreisNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisNetto");

                entity.Property(e => e.KLiefArtikel).HasColumnName("kLiefArtikel");
            });

            modelBuilder.Entity<TLieferInfoVersand>(entity =>
            {
                entity.HasKey(e => e.KBestellung);

                entity.ToTable("tLieferInfoVersand");

                entity.Property(e => e.KBestellung)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NStatusBestellt).HasColumnName("nStatusBestellt");

                entity.Property(e => e.NStatusBestelltBlockiert).HasColumnName("nStatusBestelltBlockiert");

                entity.Property(e => e.NStatusEigen).HasColumnName("nStatusEigen");

                entity.Property(e => e.NStatusEigenBestellt).HasColumnName("nStatusEigenBestellt");

                entity.Property(e => e.NStatusEigenBstelltBlockiert).HasColumnName("nStatusEigenBstelltBlockiert");
            });

            modelBuilder.Entity<TLieferStatus>(entity =>
            {
                entity.HasKey(e => new { e.KLieferStatus, e.KSprache });

                entity.ToTable("tLieferStatus");

                entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TLieferantErlaubteLieferlaender>(entity =>
            {
                entity.HasKey(e => new { e.KLieferant, e.CIso });

                entity.ToTable("tLieferantErlaubteLieferlaender");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cIso");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TLieferantRabattStaffel>(entity =>
            {
                entity.HasKey(e => e.KLieferantStaffelPreis);

                entity.ToTable("tLieferantRabattStaffel");

                entity.Property(e => e.KLieferantStaffelPreis).HasColumnName("kLieferantStaffelPreis");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAb");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<TLieferantSperre>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tLieferantSperre");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<TLieferantWarenlager>(entity =>
            {
                entity.HasKey(e => e.KLieferantWarenlager)
                    .HasName("PK_FulfillmentNetwork_tLieferantWarenlager");

                entity.ToTable("tLieferantWarenlager", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.KLieferant, e.KWarenlager }, "IX_tLieferantWarenlager")
                    .IsUnique();

                entity.HasIndex(e => new { e.KLieferant, e.KWarenlager }, "UQ_FulfillmentNetwork_tLieferantWarenlager_kLieferant_kWarenlager")
                    .IsUnique();

                entity.Property(e => e.KLieferantWarenlager).HasColumnName("kLieferantWarenlager");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<TLieferantenBestellung>(entity =>
            {
                entity.HasKey(e => e.KLieferantenBestellung);

                entity.ToTable("tLieferantenBestellung");

                entity.HasIndex(e => e.KFirma, "IX_tLieferantenBestellung_kFirma");

                entity.HasIndex(e => e.KKunde, "IX_tLieferantenBestellung_kKunde");

                entity.HasIndex(e => e.KLieferant, "IX_tLieferantenBestellung_kLieferant");

                entity.HasIndex(e => e.KLieferantenBestellungLa, "IX_tLieferantenBestellung_kLieferantenBestellungLA");

                entity.HasIndex(e => e.KLieferantenBestellungLieferant, "IX_tLieferantenBestellung_kLieferantenBestellungLieferant");

                entity.HasIndex(e => e.KLieferantenBestellungRa, "IX_tLieferantenBestellung_kLieferantenBestellungRA");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBezugsAuftragsNummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBezugsAuftragsNummer");

                entity.Property(e => e.CDruckAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cDruckAnmerkung");

                entity.Property(e => e.CEigeneBestellnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneBestellnummer");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CInternerKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DAngemahnt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAngemahnt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DExportiert)
                    .HasColumnType("datetime")
                    .HasColumnName("dExportiert");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DGefaxt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGefaxt");

                entity.Property(e => e.DGemailt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGemailt");

                entity.Property(e => e.DInBearbeitung)
                    .HasColumnType("datetime")
                    .HasColumnName("dInBearbeitung");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLager).HasColumnName("kLager");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantenBestellungLa).HasColumnName("kLieferantenBestellungLA");

                entity.Property(e => e.KLieferantenBestellungLieferant).HasColumnName("kLieferantenBestellungLieferant");

                entity.Property(e => e.KLieferantenBestellungRa).HasColumnName("kLieferantenBestellungRA");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NAngelegtDurchWms).HasColumnName("nAngelegtDurchWMS");

                entity.Property(e => e.NBestaetigt).HasColumnName("nBestaetigt");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NDropShipping).HasColumnName("nDropShipping");

                entity.Property(e => e.NManuellAbgeschlossen).HasColumnName("nManuellAbgeschlossen");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TLieferantenBestellungErinnerung>(entity =>
            {
                entity.HasKey(e => e.KLieferantenBestellungErinnerung);

                entity.ToTable("tLieferantenBestellungErinnerung");

                entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferantenBestellungErinnerung_kLieferantenBestellung");

                entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");
            });

            modelBuilder.Entity<TLieferantenBestellungErinnerungPos>(entity =>
            {
                entity.HasKey(e => new { e.KLieferantenBestellungErinnerung, e.KLieferantenBestellung, e.KLieferantenBestellungPos });

                entity.ToTable("tLieferantenBestellungErinnerungPos");

                entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferantenBestellungErinnerungPos_kLieferantenBestellung");

                entity.HasIndex(e => e.KLieferantenBestellungPos, "IX_tLieferantenBestellungErinnerungPos_kLieferantenBestellungPos");

                entity.Property(e => e.KLieferantenBestellungErinnerung).HasColumnName("kLieferantenBestellungErinnerung");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");
            });

            modelBuilder.Entity<TLieferantenBestellungLa>(entity =>
            {
                entity.HasKey(e => e.KLieferantenBestellungLa);

                entity.ToTable("tLieferantenBestellungLA");

                entity.Property(e => e.KLieferantenBestellungLa).HasColumnName("kLieferantenBestellungLA");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CFirmenZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenZusatz");

                entity.Property(e => e.CKundennummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundennummer");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");
            });

            modelBuilder.Entity<TLieferantenBestellungLieferant>(entity =>
            {
                entity.HasKey(e => e.KLieferantenBestellungLieferant);

                entity.ToTable("tLieferantenBestellungLieferant");

                entity.Property(e => e.KLieferantenBestellungLieferant).HasColumnName("kLieferantenBestellungLieferant");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CAnsprechpartnerAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerAnrede");

                entity.Property(e => e.CAnsprechpartnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerName");

                entity.Property(e => e.CAnsprechpartnerVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerVorname");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CFirmenZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenZusatz");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<TLieferantenBestellungLock>(entity =>
            {
                entity.HasKey(e => new { e.KLieferantenBestellung, e.KBenutzer, e.NSperreDurch })
                    .HasName("PK_tLieferantenBestellungLock_kLieferantenBestellung_kUser_nSperreDurch");

                entity.ToTable("tLieferantenBestellungLock");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NSperreDurch).HasColumnName("nSperreDurch");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");
            });

            modelBuilder.Entity<TLieferantenBestellungPos>(entity =>
            {
                entity.HasKey(e => e.KLieferantenBestellungPos);

                entity.ToTable("tLieferantenBestellungPos");

                entity.HasIndex(e => e.KArtikel, "IX_tLieferantenBestellungPos_kArtikel");

                entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferantenBestellungPos_kLieferantenBestellung");

                entity.HasIndex(e => e.NPosTyp, "IX_tLieferantenBestellungPos_nPosTyp");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferantenArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenArtNr");

                entity.Property(e => e.CLieferantenBezeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantenBezeichnung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameLieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameLieferant");

                entity.Property(e => e.CVpeeinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVPEEinheit");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.FMengeGeliefert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMengeGeliefert");

                entity.Property(e => e.FUst)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUST");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.NLiefertage).HasColumnName("nLiefertage");

                entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpemenge).HasColumnName("nVPEMenge");
            });

            modelBuilder.Entity<TLieferantenBestellungRa>(entity =>
            {
                entity.HasKey(e => e.KLieferantenBestellungRa);

                entity.ToTable("tLieferantenBestellungRA");

                entity.Property(e => e.KLieferantenBestellungRa).HasColumnName("kLieferantenBestellungRA");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CFirmenZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenZusatz");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");
            });

            modelBuilder.Entity<TLieferantenRankingGlobal>(entity =>
            {
                entity.HasKey(e => new { e.KLieferant, e.NType });

                entity.ToTable("tLieferantenRankingGlobal");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStand)
                    .HasColumnType("datetime")
                    .HasColumnName("dStand");

                entity.Property(e => e.DVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dVon");

                entity.Property(e => e.NAnteilProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnteilProzent");

                entity.Property(e => e.NPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nPauschal");

                entity.Property(e => e.NRang).HasColumnName("nRang");

                entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
            });

            modelBuilder.Entity<TLieferantenRankingZeitraum>(entity =>
            {
                entity.HasKey(e => new { e.KLieferant, e.NZeitraum, e.DVon, e.NType });

                entity.ToTable("tLieferantenRankingZeitraum");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NZeitraum).HasColumnName("nZeitraum");

                entity.Property(e => e.DVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dVon");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStand)
                    .HasColumnType("datetime")
                    .HasColumnName("dStand");

                entity.Property(e => e.NAnteilProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnteilProzent");

                entity.Property(e => e.NPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nPauschal");

                entity.Property(e => e.NRang).HasColumnName("nRang");

                entity.Property(e => e.NRangMax).HasColumnName("nRangMax");
            });

            modelBuilder.Entity<TLieferschein>(entity =>
            {
                entity.HasKey(e => e.KLieferschein);

                entity.ToTable("tLieferschein");

                entity.HasIndex(e => e.KBestellung, "IX_tLieferschein_kBestellung");

                entity.HasIndex(e => e.KLieferantenBestellung, "IX_tLieferschein_kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DMailVersand)
                    .HasColumnType("datetime")
                    .HasColumnName("dMailVersand");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");
            });

            modelBuilder.Entity<TLieferscheinPos>(entity =>
            {
                entity.HasKey(e => e.KLieferscheinPos);

                entity.ToTable("tLieferscheinPos");

                entity.HasIndex(e => e.KBestellPos, "IX_tLieferscheinPos_kBestellPos");

                entity.HasIndex(e => e.KLieferschein, "IX_tLieferscheinPos_kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            });

            modelBuilder.Entity<TListViewExColor>(entity =>
            {
                entity.HasKey(e => e.KListViewExColor);

                entity.ToTable("tListViewExColor");

                entity.Property(e => e.KListViewExColor).HasColumnName("kListViewExColor");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CRgb)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRGB");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");

                entity.Property(e => e.NColorId).HasColumnName("nColorID");

                entity.Property(e => e.NListViewId).HasColumnName("nListViewID");

                entity.Property(e => e.NSubColorId).HasColumnName("nSubColorID");
            });

            modelBuilder.Entity<TListViewExDateTimeFilter>(entity =>
            {
                entity.HasKey(e => e.NListViewId);

                entity.ToTable("tListViewExDateTimeFilter");

                entity.Property(e => e.NListViewId)
                    .ValueGeneratedNever()
                    .HasColumnName("nListViewID");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DValue)
                    .HasColumnType("datetime")
                    .HasColumnName("dValue");

                entity.Property(e => e.NSelectedIndex).HasColumnName("nSelectedIndex");
            });

            modelBuilder.Entity<TListViewExHeader>(entity =>
            {
                entity.HasKey(e => e.KListViewExHeader);

                entity.ToTable("tListViewExHeader");

                entity.Property(e => e.KListViewExHeader).HasColumnName("kListViewExHeader");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCustomName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustomName");

                entity.Property(e => e.COriginalName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOriginalName");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");

                entity.Property(e => e.NHeaderId).HasColumnName("nHeaderID");

                entity.Property(e => e.NListViewId).HasColumnName("nListViewID");

                entity.Property(e => e.NOrderBy).HasColumnName("nOrderBy");

                entity.Property(e => e.NRoundStellen).HasColumnName("nRoundStellen");

                entity.Property(e => e.NSize).HasColumnName("nSize");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TListViewExSummary>(entity =>
            {
                entity.HasKey(e => e.KListViewExSummary);

                entity.ToTable("tListViewExSummary");

                entity.Property(e => e.KListViewExSummary).HasColumnName("kListViewExSummary");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBenutzerAdmin).HasColumnName("kBenutzerAdmin");

                entity.Property(e => e.NListViewId).HasColumnName("nListViewID");

                entity.Property(e => e.NSummaryId).HasColumnName("nSummaryID");
            });

            modelBuilder.Entity<TListViewSpalten>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tListViewSpalten");

                entity.HasIndex(e => e.KListView, "IX_tListViewSpalten_kListView");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KListView).HasColumnName("kListView");

                entity.Property(e => e.NPos).HasColumnName("nPos");
            });

            modelBuilder.Entity<TLizenz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tLizenz");

                entity.Property(e => e.BLizenzen).HasColumnName("bLizenzen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BSignatur)
                    .HasMaxLength(1024)
                    .HasColumnName("bSignatur");

                entity.Property(e => e.CAuthId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cAuthId");

                entity.Property(e => e.CAuthToken)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cAuthToken");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");
            });

            modelBuilder.Entity<TLizenzInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tLizenzInfo");

                entity.Property(e => e.CShopType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cShopType");

                entity.Property(e => e.DLastUsed)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastUsed");

                entity.Property(e => e.KApplication).HasColumnName("kApplication");

                entity.Property(e => e.KLicense).HasColumnName("kLicense");
            });

            modelBuilder.Entity<TLizenzlog>(entity =>
            {
                entity.HasKey(e => e.KLizenzlog);

                entity.ToTable("tLizenzlog");

                entity.Property(e => e.KLizenzlog).HasColumnName("kLizenzlog");

                entity.Property(e => e.CAufruf)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAufruf");

                entity.Property(e => e.CLog)
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TLlvorlage>(entity =>
            {
                entity.HasKey(e => e.KLlvorlage);

                entity.ToTable("tLLVorlage");

                entity.Property(e => e.KLlvorlage).HasColumnName("kLLVorlage");

                entity.Property(e => e.BData)
                    .HasColumnType("image")
                    .HasColumnName("bData");

                entity.Property(e => e.BPreview)
                    .HasColumnType("image")
                    .HasColumnName("bPreview");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DDatum)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dDatum");

                entity.Property(e => e.NDatasize).HasColumnName("nDatasize");

                entity.Property(e => e.NPreviewsize).HasColumnName("nPreviewsize");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tLog");

                entity.HasIndex(e => e.DDatum, "IX_tLog_dDatum");

                entity.Property(e => e.CLog)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
            });

            modelBuilder.Entity<TLogin>(entity =>
            {
                entity.HasKey(e => e.KLogin)
                    .HasName("PK_FulfillmentNetwork_tLogin");

                entity.ToTable("tLogin", "FulfillmentNetwork");

                entity.Property(e => e.KLogin)
                    .ValueGeneratedNever()
                    .HasColumnName("kLogin");

                entity.Property(e => e.BFulfiller).HasColumnName("bFulfiller");

                entity.Property(e => e.BMerchant).HasColumnName("bMerchant");

                entity.Property(e => e.CUserId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cUserId");
            });

            modelBuilder.Entity<TLogistik>(entity =>
            {
                entity.HasKey(e => e.KLogistik);

                entity.ToTable("tLogistik");

                entity.Property(e => e.KLogistik)
                    .ValueGeneratedNever()
                    .HasColumnName("kLogistik");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAmazonCc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonCC");

                entity.Property(e => e.CEbayCc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCC");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cURL");

                entity.Property(e => e.FMaxGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMaxGewicht");

                entity.Property(e => e.KVersanddatenExportVorlage).HasColumnName("kVersanddatenExportVorlage");

                entity.Property(e => e.KVersanddatenImportVorlage).HasColumnName("kVersanddatenImportVorlage");

                entity.Property(e => e.NPaketeAutomatischErzeugen).HasColumnName("nPaketeAutomatischErzeugen");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TMahnstufe>(entity =>
            {
                entity.HasKey(e => e.KMahnstufe);

                entity.ToTable("tMahnstufe");

                entity.HasIndex(e => new { e.KFirma, e.KKundengruppe, e.NStufe }, "UQ_tMahnstufe_kFirma_kKundengruppe_nStufe")
                    .IsUnique();

                entity.Property(e => e.KMahnstufe).HasColumnName("kMahnstufe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.FGebuehrPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGebuehrPauschal");

                entity.Property(e => e.FGebuehrZinssatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGebuehrZinssatz");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.NKarenzzeit).HasColumnName("nKarenzzeit");

                entity.Property(e => e.NStufe).HasColumnName("nStufe");

                entity.Property(e => e.NZahlungsfristInTagen).HasColumnName("nZahlungsfristInTagen");
            });

            modelBuilder.Entity<TMailVorlage>(entity =>
            {
                entity.HasKey(e => new { e.KMailVorlage, e.KSprache, e.KPlattform });

                entity.ToTable("tMailVorlage");

                entity.Property(e => e.KMailVorlage).HasColumnName("kMailVorlage");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHtml)
                    .IsUnicode(false)
                    .HasColumnName("cHTML");

                entity.Property(e => e.CSubject)
                    .HasMaxLength(511)
                    .IsUnicode(false)
                    .HasColumnName("cSubject");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CVorlagenname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorlagenname");

                entity.Property(e => e.NHtml).HasColumnName("nHTML");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<TMandant>(entity =>
            {
                entity.HasKey(e => e.KMandant);

                entity.ToTable("tMandant");

                entity.Property(e => e.KMandant)
                    .ValueGeneratedNever()
                    .HasColumnName("kMandant");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDb)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cDB");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TMargensteigerung>(entity =>
            {
                entity.HasKey(e => e.KMargensteigerung)
                    .HasName("PK_Repricer_tMargensteigerung");

                entity.ToTable("tMargensteigerung", "Repricer");

                entity.Property(e => e.KMargensteigerung).HasColumnName("kMargensteigerung");

                entity.Property(e => e.FAenderungMaxPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAenderungMaxPreis");

                entity.Property(e => e.FAenderungMinPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAenderungMinPreis");

                entity.Property(e => e.NAenderungMaxPreisTyp).HasColumnName("nAenderungMaxPreisTyp");

                entity.Property(e => e.NAenderungMinPreisTyp).HasColumnName("nAenderungMinPreisTyp");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NBestandAb).HasColumnName("nBestandAb");
            });

            modelBuilder.Entity<TMarktplatz>(entity =>
            {
                entity.HasKey(e => e.KMarktplatz)
                    .HasName("PK_Repricer_tMarktplatz");

                entity.ToTable("tMarktplatz", "Repricer");

                entity.HasIndex(e => new { e.KUser, e.NPlattform }, "IX_Repricer_tMarktplatz_kUser_nPlattform");

                entity.HasIndex(e => new { e.KUser, e.NPlattform }, "UQ_Repricer_tMarktplatz_kUser_nPlattform")
                    .IsUnique();

                entity.Property(e => e.KMarktplatz).HasColumnName("kMarktplatz");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.HasOne(d => d.KUserNavigation)
                    .WithMany(p => p.TMarktplatz)
                    .HasForeignKey(d => d.KUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Repricer_tMarktplatz_kUser");
            });

            modelBuilder.Entity<TMassEinheit>(entity =>
            {
                entity.HasKey(e => e.KMassEinheit);

                entity.ToTable("tMassEinheit");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cCode");

                entity.Property(e => e.CDisplayCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayCode");

                entity.Property(e => e.FBezugsMassEinheitFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBezugsMassEinheitFaktor");

                entity.Property(e => e.KBezugsMassEinheit).HasColumnName("kBezugsMassEinheit");
            });

            modelBuilder.Entity<TMassEinheitSprache>(entity =>
            {
                entity.HasKey(e => new { e.KMassEinheit, e.KSprache });

                entity.ToTable("tMassEinheitSprache");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TMdelog>(entity =>
            {
                entity.HasKey(e => e.KMdelog);

                entity.ToTable("tMDELog");

                entity.Property(e => e.KMdelog).HasColumnName("kMDELog");

                entity.Property(e => e.CLog)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.CServer)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cServer");

                entity.Property(e => e.CSessionId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.CView)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cView");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NLogId).HasColumnName("nLogID");

                entity.Property(e => e.NLogLevel).HasColumnName("nLogLevel");

                entity.Property(e => e.NTime).HasColumnName("nTime");
            });

            modelBuilder.Entity<TMedienDatei>(entity =>
            {
                entity.HasKey(e => e.KMedienDatei);

                entity.ToTable("tMedienDatei");

                entity.HasIndex(e => e.KArtikel, "IX_tMedienDatei_kArtikel");

                entity.Property(e => e.KMedienDatei)
                    .ValueGeneratedNever()
                    .HasColumnName("kMedienDatei");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.CPfad)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cPfad");

                entity.Property(e => e.CTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.CUrl)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cURL");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TMedienDateiAttribut>(entity =>
            {
                entity.HasKey(e => e.KMediendateiAttribut);

                entity.ToTable("tMedienDateiAttribut");

                entity.HasIndex(e => new { e.KMedienDatei, e.KSprache }, "IX_tMedienDateiAttribut_kMedienDatei_kSprache");

                entity.Property(e => e.KMediendateiAttribut)
                    .ValueGeneratedNever()
                    .HasColumnName("kMediendateiAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .IsRequired()
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");
            });

            modelBuilder.Entity<TMedienDateiShop>(entity =>
            {
                entity.HasKey(e => new { e.KMedienDatei, e.KShop });

                entity.ToTable("tMedienDateiShop");

                entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<TMedienDateiSprache>(entity =>
            {
                entity.HasKey(e => new { e.KMedienDatei, e.KSprache });

                entity.ToTable("tMedienDateiSprache");

                entity.Property(e => e.KMedienDatei).HasColumnName("kMedienDatei");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TMedienDir>(entity =>
            {
                entity.HasKey(e => e.KMedienDir);

                entity.ToTable("tMedienDir");

                entity.Property(e => e.KMedienDir)
                    .ValueGeneratedNever()
                    .HasColumnName("kMedienDir");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KParentDir).HasColumnName("kParentDir");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NDel).HasColumnName("nDel");
            });

            modelBuilder.Entity<TMedienFile>(entity =>
            {
                entity.HasKey(e => e.KMedienFile);

                entity.ToTable("tMedienFile");

                entity.Property(e => e.KMedienFile)
                    .ValueGeneratedNever()
                    .HasColumnName("kMedienFile");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dTime");

                entity.Property(e => e.KMedienDir).HasColumnName("kMedienDir");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NDel).HasColumnName("nDel");

                entity.Property(e => e.NSize).HasColumnName("nSize");
            });

            modelBuilder.Entity<TMerchantInboundShippingNotificationRef>(entity =>
            {
                entity.HasKey(e => e.KMerchantInboundShippingNotificationRef)
                    .HasName("PK_FulfillmentNetwork.tMerchantInboundShippingNotificationRef");

                entity.ToTable("tMerchantInboundShippingNotificationRef", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.CInboundShippingNotificationId, e.KLieferschein }, "IX_FulfillmentNetwork_tMerchantVersandRef_cInboundShippingNotificationId_kLieferschein")
                    .IsUnique();

                entity.Property(e => e.KMerchantInboundShippingNotificationRef).HasColumnName("kMerchantInboundShippingNotificationRef");

                entity.Property(e => e.CInboundShippingNotificationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInboundShippingNotificationId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.HasOne(d => d.KLieferscheinNavigation)
                    .WithMany(p => p.TMerchantInboundShippingNotificationRef)
                    .HasForeignKey(d => d.KLieferschein)
                    .HasConstraintName("FK_FulfillmentNetwork_tMerchantInboundShippingNotificationRef_kLieferschein");
            });

            modelBuilder.Entity<TMerchantStockChange>(entity =>
            {
                entity.HasKey(e => e.KMerchantStockChange)
                    .HasName("PK_FulfillmentNetwork.tMerchantStockChange");

                entity.ToTable("tMerchantStockChange", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.NProcessingState, e.DTimestamp }, "IX_FulfillmentNetwork_nProcessingState_dTimestamp");

                entity.HasIndex(e => new { e.CWarehouseId, e.CJfsku, e.NStockVersion }, "IX_FulfillmentNetwork_tMerchantStockChange_cWarehouseId_cJfsku_nStockVersion");

                entity.Property(e => e.KMerchantStockChange).HasColumnName("kMerchantStockChange");

                entity.Property(e => e.CBatch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBatch");

                entity.Property(e => e.CInboundItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInboundItemId");

                entity.Property(e => e.CInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInboundNumber");

                entity.Property(e => e.CJfsku)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CNote)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.COutboundItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundItemId");

                entity.Property(e => e.COutboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundNumber");

                entity.Property(e => e.COutboundShippingNotificationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundShippingNotificationId");

                entity.Property(e => e.COutboundShippingNotificationItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundShippingNotificationItemId");

                entity.Property(e => e.CWarehouseId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarehouseId");

                entity.Property(e => e.DBestBefore).HasColumnName("dBestBefore");

                entity.Property(e => e.DProcessedAt).HasColumnName("dProcessedAt");

                entity.Property(e => e.DTimestamp).HasColumnName("dTimestamp");

                entity.Property(e => e.FLevelAnnounced)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLevelAnnounced");

                entity.Property(e => e.FLevelBlocked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLevelBlocked");

                entity.Property(e => e.FLevelReserved)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLevelReserved");

                entity.Property(e => e.FLevelShippable)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLevelShippable");

                entity.Property(e => e.FQuantityAnnounced)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityAnnounced");

                entity.Property(e => e.FQuantityAnnouncedBooked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityAnnouncedBooked");

                entity.Property(e => e.FQuantityBlocked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityBlocked");

                entity.Property(e => e.FQuantityBlockedBooked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityBlockedBooked");

                entity.Property(e => e.FQuantityReserved)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityReserved");

                entity.Property(e => e.FQuantityReservedBooked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityReservedBooked");

                entity.Property(e => e.FQuantityShippable)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityShippable");

                entity.Property(e => e.FQuantityShippableBooked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantityShippableBooked");

                entity.Property(e => e.NChangeType).HasColumnName("nChangeType");

                entity.Property(e => e.NProcessingState).HasColumnName("nProcessingState");

                entity.Property(e => e.NStockVersion).HasColumnName("nStockVersion");
            });

            modelBuilder.Entity<TMerchantStockChangeRef>(entity =>
            {
                entity.HasKey(e => e.KMerchantStockChangeRef)
                    .HasName("PK_FulfillmentNetwork.tMerchantStockChangeRef");

                entity.ToTable("tMerchantStockChangeRef", "FulfillmentNetwork");

                entity.HasIndex(e => e.KWarenlagerAusgang, "IX_FulfillmentNetwork_tMerchantStockChangeRef_kWarenlagerAusgang");

                entity.Property(e => e.KMerchantStockChangeRef).HasColumnName("kMerchantStockChangeRef");

                entity.Property(e => e.KMerchantStockChange).HasColumnName("kMerchantStockChange");

                entity.Property(e => e.KWarenlagerAusgang).HasColumnName("kWarenlagerAusgang");

                entity.Property(e => e.KWarenlagerEingang).HasColumnName("kWarenlagerEingang");
            });

            modelBuilder.Entity<TMerchantVersandRef>(entity =>
            {
                entity.HasKey(e => e.KMerchantVersandRef)
                    .HasName("PK_FulfillmentNetwork.tMerchantVersandRef");

                entity.ToTable("tMerchantVersandRef", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.COutboundShippingNotificationId, e.KVersand }, "IX_FulfillmentNetwork_tMerchantVersandRef_cOutboundShippingNotificationId_kVersand")
                    .IsUnique();

                entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tMerchantVersandRef_cOwnerId");

                entity.HasIndex(e => new { e.COutboundShippingNotificationId, e.KVersand }, "UQ_FulfillmentNetwork_tMerchantVersandRef_cOutboundShippingNotificationId_kVersand")
                    .IsUnique();

                entity.Property(e => e.KMerchantVersandRef).HasColumnName("kMerchantVersandRef");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.COutboundShippingNotificationId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundShippingNotificationId");

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.HasOne(d => d.KLieferscheinNavigation)
                    .WithMany(p => p.TMerchantVersandRef)
                    .HasForeignKey(d => d.KLieferschein)
                    .HasConstraintName("FK_FulfillmentNetwork_tMerchantVersandRef_kLieferschein");

                entity.HasOne(d => d.KVersandNavigation)
                    .WithMany(p => p.TMerchantVersandRef)
                    .HasForeignKey(d => d.KVersand)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_dbo_tMerchantVersandRef_kVersand");
            });

            modelBuilder.Entity<TMerkmal>(entity =>
            {
                entity.HasKey(e => e.KMerkmal);

                entity.ToTable("tMerkmal");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.NGlobal).HasColumnName("nGlobal");

                entity.Property(e => e.NMehrfachauswahl)
                    .HasColumnName("nMehrfachauswahl")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVerwendungszweck).HasColumnName("nVerwendungszweck");
            });

            modelBuilder.Entity<TMerkmalBildPlattform>(entity =>
            {
                entity.HasKey(e => e.KMerkmalBildPlattform);

                entity.ToTable("tMerkmalBildPlattform");

                entity.Property(e => e.KMerkmalBildPlattform).HasColumnName("kMerkmalBildPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet).HasColumnName("nInet");
            });

            modelBuilder.Entity<TMerkmalGruppe>(entity =>
            {
                entity.HasKey(e => e.KMerkmalGruppe);

                entity.ToTable("tMerkmalGruppe");

                entity.Property(e => e.KMerkmalGruppe)
                    .ValueGeneratedNever()
                    .HasColumnName("kMerkmalGruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TMerkmalGruppeMerkmal>(entity =>
            {
                entity.HasKey(e => new { e.KMerkmalGruppe, e.KMerkmal });

                entity.ToTable("tMerkmalGruppeMerkmal");

                entity.Property(e => e.KMerkmalGruppe).HasColumnName("kMerkmalGruppe");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TMerkmalSprache>(entity =>
            {
                entity.HasKey(e => new { e.KMerkmal, e.KSprache });

                entity.ToTable("tMerkmalSprache");

                entity.HasIndex(e => e.CName, "IX_tMerkmalSprache_cName");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TMerkmalWert>(entity =>
            {
                entity.HasKey(e => e.KMerkmalWert);

                entity.ToTable("tMerkmalWert");

                entity.HasIndex(e => e.KMerkmal, "IX_tMerkmalWert_kMerkmal");

                entity.Property(e => e.KMerkmalWert)
                    .ValueGeneratedNever()
                    .HasColumnName("kMerkmalWert");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TMerkmalWertSprache>(entity =>
            {
                entity.HasKey(e => new { e.KMerkmalWert, e.KSprache });

                entity.ToTable("tMerkmalWertSprache");

                entity.HasIndex(e => e.CWert, "IX_tMerkmalWertSprache_cWert");

                entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CMetaTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaTitle");

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");
            });

            modelBuilder.Entity<TMerkmalwertBildPlattform>(entity =>
            {
                entity.HasKey(e => e.KMerkmalwertBildPlattform);

                entity.ToTable("tMerkmalwertBildPlattform");

                entity.Property(e => e.KMerkmalwertBildPlattform).HasColumnName("kMerkmalwertBildPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KMerkmalwert).HasColumnName("kMerkmalwert");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NInet).HasColumnName("nInet");
            });

            modelBuilder.Entity<TMessage>(entity =>
            {
                entity.HasKey(e => e.KMessage);

                entity.ToTable("tMessage", "Shipping");

                entity.Property(e => e.KMessage).HasColumnName("kMessage");

                entity.Property(e => e.CCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cCode");

                entity.Property(e => e.CContent)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cContent");

                entity.Property(e => e.CContentShort)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cContentShort");

                entity.Property(e => e.DTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimestamp");

                entity.Property(e => e.KMessageServer).HasColumnName("kMessageServer");

                entity.Property(e => e.KPackage).HasColumnName("kPackage");

                entity.Property(e => e.NSource).HasColumnName("nSource");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.HasOne(d => d.KPackageNavigation)
                    .WithMany(p => p.TMessage)
                    .HasForeignKey(d => d.KPackage)
                    .HasConstraintName("FK_Shipping_tMessage_kPackage");
            });

            modelBuilder.Entity<TMessages>(entity =>
            {
                entity.HasKey(e => e.KMessages);

                entity.ToTable("tMessages");

                entity.HasIndex(e => e.KKunde, "IX_tMessages_kKunde");

                entity.HasIndex(e => e.KLieferant, "IX_tMessages_kLieferant");

                entity.Property(e => e.KMessages)
                    .ValueGeneratedNever()
                    .HasColumnName("kMessages");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.SAttachment)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("sAttachment");

                entity.Property(e => e.SBereff)
                    .HasMaxLength(511)
                    .IsUnicode(false)
                    .HasColumnName("sBereff");

                entity.Property(e => e.SHtmltext)
                    .IsUnicode(false)
                    .HasColumnName("sHTMLText");

                entity.Property(e => e.SSentFaxDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sSentFaxDate");

                entity.Property(e => e.SSentMailDate)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("sSentMailDate");

                entity.Property(e => e.SText)
                    .IsUnicode(false)
                    .HasColumnName("sText");
            });

            modelBuilder.Entity<TNachricht>(entity =>
            {
                entity.HasKey(e => e.KNachricht)
                    .HasName("PK_Ticketsystem_tNachricht");

                entity.ToTable("tNachricht", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzerErsteller, "IX_Ticketsystem_tNachricht_kBenutzerErsteller");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNachricht_kTicket");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(998)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CEmpfaenger)
                    .HasMaxLength(1)
                    .HasColumnName("cEmpfaenger");

                entity.Property(e => e.CInhalt)
                    .IsUnicode(false)
                    .HasColumnName("cInhalt");

                entity.Property(e => e.DEmpfangen)
                    .HasColumnType("datetime")
                    .HasColumnName("dEmpfangen");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DGesendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dGesendet");

                entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");

                entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.Property(e => e.NRichtung).HasColumnName("nRichtung");

                entity.Property(e => e.NVorgangserkennungGelaufen).HasColumnName("nVorgangserkennungGelaufen");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TNachricht)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tNachricht_kFile_HtmlInhalt");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TNachricht)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tNachricht_kTicket");
            });

            modelBuilder.Entity<TNachrichtAngebot>(entity =>
            {
                entity.HasKey(e => e.KNachrichtAngebot)
                    .HasName("PK_Ticketsystem_tNachrichtAngebot");

                entity.ToTable("tNachrichtAngebot", "Ticketsystem");

                entity.HasIndex(e => e.KAuftrag, "IX_Ticketsystem_tNachrichtAngebot_kAuftrag");

                entity.Property(e => e.KNachrichtAngebot).HasColumnName("kNachrichtAngebot");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtAngebot)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtAngebot_tNachricht");
            });

            modelBuilder.Entity<TNachrichtArtikel>(entity =>
            {
                entity.HasKey(e => e.KNachrichtArtikel)
                    .HasName("PK_Ticketsystem_tNachrichtArtikel");

                entity.ToTable("tNachrichtArtikel", "Ticketsystem");

                entity.HasIndex(e => e.KArtikel, "IX_Ticketsystem_tNachrichtArtikel_kArtikel");

                entity.Property(e => e.KNachrichtArtikel).HasColumnName("kNachrichtArtikel");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KArtikelNavigation)
                    .WithMany(p => p.TNachrichtArtikel)
                    .HasForeignKey(d => d.KArtikel)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtArtikel_tArtikel");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtArtikel)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtArtikel_tNachricht");
            });

            modelBuilder.Entity<TNachrichtAuftrag>(entity =>
            {
                entity.HasKey(e => e.KNachrichtAuftrag)
                    .HasName("PK_Ticketsystem_tNachrichtAuftrag");

                entity.ToTable("tNachrichtAuftrag", "Ticketsystem");

                entity.HasIndex(e => e.KAuftrag, "IX_Ticketsystem_tNachrichtAuftrag_kAuftrag");

                entity.Property(e => e.KNachrichtAuftrag).HasColumnName("kNachrichtAuftrag");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtAuftrag)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtAuftrag_tNachricht");
            });

            modelBuilder.Entity<TNachrichtBenutzerOptionen>(entity =>
            {
                entity.HasKey(e => e.KNachrichtBenutzerOptionen)
                    .HasName("PK_Ticketsystem_tNachrichtBenutzerOptionen");

                entity.ToTable("tNachrichtBenutzerOptionen", "Ticketsystem");

                entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtBenutzerOptionen_kNachricht");

                entity.Property(e => e.KNachrichtBenutzerOptionen).HasColumnName("kNachrichtBenutzerOptionen");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.NEingebetteteBilderAnzeigen).HasColumnName("nEingebetteteBilderAnzeigen");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtBenutzerOptionen)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtBenutzerOptionen_kNachricht");
            });

            modelBuilder.Entity<TNachrichtEingangsrechnung>(entity =>
            {
                entity.HasKey(e => e.KNachrichtEingangsrechnung)
                    .HasName("PK_Ticketsystem_tNachrichtEingangsrechnung");

                entity.ToTable("tNachrichtEingangsrechnung", "Ticketsystem");

                entity.HasIndex(e => e.KEingangsrechnung, "IX_Ticketsystem_tNachrichtEingangsrechnung_kEingangsrechnung");

                entity.Property(e => e.KNachrichtEingangsrechnung).HasColumnName("kNachrichtEingangsrechnung");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtEingangsrechnung)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEingangsrechnung_tNachricht");
            });

            modelBuilder.Entity<TNachrichtEntwurf>(entity =>
            {
                entity.HasKey(e => e.KNachrichtEntwurf)
                    .HasName("PK_Ticketsystem_tNachrichtEntwurf");

                entity.ToTable("tNachrichtEntwurf", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tNachrichtEntwurf_kBenutzer");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNachrichtEntwurf_kTicket");

                entity.HasIndex(e => new { e.KTicket, e.KBenutzer }, "UQ_Ticketsystem_tNachrichtentwurf_kTicket_kBenutzer")
                    .IsUnique();

                entity.Property(e => e.KNachrichtEntwurf).HasColumnName("kNachrichtEntwurf");

                entity.Property(e => e.CBetreff)
                    .HasMaxLength(998)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KAusgangskanalEmail).HasColumnName("kAusgangskanalEmail");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KAusgangskanalEmailNavigation)
                    .WithMany(p => p.TNachrichtEntwurf)
                    .HasForeignKey(d => d.KAusgangskanalEmail)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurf_kAusgangskanalEmail");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TNachrichtEntwurf)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurf_kFile_HtmlInhalt");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TNachrichtEntwurf)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurf_kTicket");
            });

            modelBuilder.Entity<TNachrichtEntwurfAnhang>(entity =>
            {
                entity.HasKey(e => e.KNachrichtEntwurfAnhang)
                    .HasName("PK_Ticketsystem_tNachrichtEntwurfAnhang");

                entity.ToTable("tNachrichtEntwurfAnhang", "Ticketsystem");

                entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNachrichtEntwurfAnhang_kAnhang");

                entity.HasIndex(e => e.KNachrichtEntwurf, "IX_Ticketsystem_tNachrichtEntwurfAnhang_kNachrichtEntwurf");

                entity.Property(e => e.KNachrichtEntwurfAnhang).HasColumnName("kNachrichtEntwurfAnhang");

                entity.Property(e => e.KAnhang).HasColumnName("kAnhang");

                entity.Property(e => e.KNachrichtEntwurf).HasColumnName("kNachrichtEntwurf");

                entity.HasOne(d => d.KAnhangNavigation)
                    .WithMany(p => p.TNachrichtEntwurfAnhang)
                    .HasForeignKey(d => d.KAnhang)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfAnhang_kAnhang");

                entity.HasOne(d => d.KNachrichtEntwurfNavigation)
                    .WithMany(p => p.TNachrichtEntwurfAnhang)
                    .HasForeignKey(d => d.KNachrichtEntwurf)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfAnhang_kNachrichtEntwurf");
            });

            modelBuilder.Entity<TNachrichtEntwurfTyp>(entity =>
            {
                entity.HasKey(e => e.KNachrichtEntwurfTyp)
                    .HasName("PK_Ticketsystem_tNachrichtEntwurfTyp");

                entity.ToTable("tNachrichtEntwurfTyp", "Ticketsystem");

                entity.HasIndex(e => e.KAntwortkanal, "IX_Ticketsystem_tNachrichtEntwurfTyp_kAntwortkanal");

                entity.HasIndex(e => e.KNachrichtEntwurf, "IX_Ticketsystem_tNachrichtEntwurfTyp_kNachrichtEntwurf");

                entity.Property(e => e.KNachrichtEntwurfTyp).HasColumnName("kNachrichtEntwurfTyp");

                entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");

                entity.Property(e => e.KNachrichtEntwurf).HasColumnName("kNachrichtEntwurf");

                entity.Property(e => e.NAntwortTyp).HasColumnName("nAntwortTyp");

                entity.HasOne(d => d.KAntwortkanalNavigation)
                    .WithMany(p => p.TNachrichtEntwurfTyp)
                    .HasForeignKey(d => d.KAntwortkanal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfTyp_kAntwortkanal");

                entity.HasOne(d => d.KNachrichtEntwurfNavigation)
                    .WithMany(p => p.TNachrichtEntwurfTyp)
                    .HasForeignKey(d => d.KNachrichtEntwurf)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtEntwurfTyp_kNachrichtEntwurf");
            });

            modelBuilder.Entity<TNachrichtLieferantenbestellung>(entity =>
            {
                entity.HasKey(e => e.KNachrichtLieferantenbestellung)
                    .HasName("PK_Ticketsystem_tNachrichtLieferantenbestellung");

                entity.ToTable("tNachrichtLieferantenbestellung", "Ticketsystem");

                entity.HasIndex(e => e.KLieferantenbestellung, "IX_Ticketsystem_tNachrichtLieferantenbestellung_kLieferantenbestellung");

                entity.Property(e => e.KNachrichtLieferantenbestellung).HasColumnName("kNachrichtLieferantenbestellung");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtLieferantenbestellung)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtLieferantenbestellung_tNachricht");
            });

            modelBuilder.Entity<TNachrichtPreisanfrage>(entity =>
            {
                entity.HasKey(e => e.KNachrichtPreisanfrage)
                    .HasName("PK_Ticketsystem_tNachrichtPreisanfrage");

                entity.ToTable("tNachrichtPreisanfrage", "Ticketsystem");

                entity.HasIndex(e => e.KLieferantenbestellung, "IX_Ticketsystem_tNachrichtPreisanfrage_kLieferantenbestellung");

                entity.Property(e => e.KNachrichtPreisanfrage).HasColumnName("kNachrichtPreisanfrage");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KLieferantenbestellung).HasColumnName("kLieferantenbestellung");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtPreisanfrage)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtPreisanfrage_tNachricht");
            });

            modelBuilder.Entity<TNachrichtRechnung>(entity =>
            {
                entity.HasKey(e => e.KNachrichtRechnung)
                    .HasName("PK_Ticketsystem_tNachrichtRechnung");

                entity.ToTable("tNachrichtRechnung", "Ticketsystem");

                entity.HasIndex(e => e.KRechnung, "IX_Ticketsystem_tNachrichtRechnung_kRechnung");

                entity.Property(e => e.KNachrichtRechnung).HasColumnName("kNachrichtRechnung");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtRechnung)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtRechnung_tNachricht");
            });

            modelBuilder.Entity<TNachrichtRechnungskorrektur>(entity =>
            {
                entity.HasKey(e => e.KNachrichtRechnungskorrektur)
                    .HasName("PK_Ticketsystem_tNachrichtRechnungskorrektur");

                entity.ToTable("tNachrichtRechnungskorrektur", "Ticketsystem");

                entity.HasIndex(e => e.KGutschrift, "IX_Ticketsystem_tNachrichtRechnungskorrektur_kGutschrift");

                entity.Property(e => e.KNachrichtRechnungskorrektur).HasColumnName("kNachrichtRechnungskorrektur");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtRechnungskorrektur)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtRechnungskorrektur_tNachricht");
            });

            modelBuilder.Entity<TNachrichtRetoure>(entity =>
            {
                entity.HasKey(e => e.KNachrichtRetoure)
                    .HasName("PK_Ticketsystem_tNachrichtRetoure");

                entity.ToTable("tNachrichtRetoure", "Ticketsystem");

                entity.HasIndex(e => e.KRmretoure, "IX_Ticketsystem_tNachrichtRetoure_kRMRetoure");

                entity.Property(e => e.KNachrichtRetoure).HasColumnName("kNachrichtRetoure");

                entity.Property(e => e.CMatchingWord)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMatchingWord");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtRetoure)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtRetoure_tNachricht");
            });

            modelBuilder.Entity<TNachrichtTyp>(entity =>
            {
                entity.HasKey(e => e.KNachrichtTyp)
                    .HasName("PK_Ticketsystem_tNachrichtTyp");

                entity.ToTable("tNachrichtTyp", "Ticketsystem");

                entity.HasIndex(e => e.KAntwortkanal, "IX_Ticketsystem_tNachrichtTyp_kAntwortkanal");

                entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtTyp_kNachricht");

                entity.Property(e => e.KNachrichtTyp).HasColumnName("kNachrichtTyp");

                entity.Property(e => e.KAntwortkanal).HasColumnName("kAntwortkanal");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.NAntwortTyp).HasColumnName("nAntwortTyp");

                entity.HasOne(d => d.KAntwortkanalNavigation)
                    .WithMany(p => p.TNachrichtTyp)
                    .HasForeignKey(d => d.KAntwortkanal)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtTyp_kAntwortkanal");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtTyp)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtTyp_kNachricht");
            });

            modelBuilder.Entity<TNachrichtenanhang>(entity =>
            {
                entity.HasKey(e => e.KNachrichtenanhang)
                    .HasName("PK_Ticketsystem_tNachrichtenanhang");

                entity.ToTable("tNachrichtenanhang", "Ticketsystem");

                entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNachrichtenanhang_kAnhang");

                entity.HasIndex(e => e.KNachricht, "IX_Ticketsystem_tNachrichtenanhang_kNachricht");

                entity.HasIndex(e => new { e.KAnhang, e.KNachricht }, "UQ_Ticketsystem_tNachrichtenanhang_kAnhang_kNachricht")
                    .IsUnique();

                entity.Property(e => e.KNachrichtenanhang).HasColumnName("kNachrichtenanhang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAnhang).HasColumnName("kAnhang");

                entity.Property(e => e.KBenutzerFreigabeStatus).HasColumnName("kBenutzer_FreigabeStatus");

                entity.Property(e => e.KNachricht).HasColumnName("kNachricht");

                entity.Property(e => e.NFreigabeStatus).HasColumnName("nFreigabeStatus");

                entity.HasOne(d => d.KAnhangNavigation)
                    .WithMany(p => p.TNachrichtenanhang)
                    .HasForeignKey(d => d.KAnhang)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtenanhang_kAnhang");

                entity.HasOne(d => d.KNachrichtNavigation)
                    .WithMany(p => p.TNachrichtenanhang)
                    .HasForeignKey(d => d.KNachricht)
                    .HasConstraintName("FK_Ticketsystem_tNachrichtenanhang_kNachricht");
            });

            modelBuilder.Entity<TNotiz>(entity =>
            {
                entity.HasKey(e => e.KNotiz);

                entity.ToTable("tNotiz", "Kunde");

                entity.Property(e => e.KNotiz).HasColumnName("kNotiz");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CNotiz)
                    .IsUnicode(false)
                    .HasColumnName("cNotiz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TNotiz1>(entity =>
            {
                entity.HasKey(e => e.KNotiz)
                    .HasName("PK_Ticketsystem_tNotiz");

                entity.ToTable("tNotiz", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tNotiz_kBenutzer");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNotiz_kTicket");

                entity.Property(e => e.KNotiz).HasColumnName("kNotiz");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(998)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TNotiz1)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tNotiz_kFile_HtmlInhalt");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TNotiz1)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tNotiz_kTicket");
            });

            modelBuilder.Entity<TNotizAnhang>(entity =>
            {
                entity.HasKey(e => e.KNotizAnhang)
                    .HasName("PK_Ticketsystem_tNotizAnhang");

                entity.ToTable("tNotizAnhang", "Ticketsystem");

                entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNotizAnhang_kAnhang");

                entity.HasIndex(e => e.KNotiz, "IX_Ticketsystem_tNotizAnhang_kNotiz");

                entity.HasIndex(e => new { e.KAnhang, e.KNotiz }, "UQ_Ticketsystem_tNotizAnhang_kAnhang_kNotiz")
                    .IsUnique();

                entity.Property(e => e.KNotizAnhang).HasColumnName("kNotizAnhang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAnhang).HasColumnName("kAnhang");

                entity.Property(e => e.KNotiz).HasColumnName("kNotiz");

                entity.HasOne(d => d.KAnhangNavigation)
                    .WithMany(p => p.TNotizAnhang)
                    .HasForeignKey(d => d.KAnhang)
                    .HasConstraintName("FK_Ticketsystem_tNotizAnhang_kAnhang");

                entity.HasOne(d => d.KNotizNavigation)
                    .WithMany(p => p.TNotizAnhang)
                    .HasForeignKey(d => d.KNotiz)
                    .HasConstraintName("FK_Ticketsystem_tNotizAnhang_kNotiz");
            });

            modelBuilder.Entity<TNotizEntwurf>(entity =>
            {
                entity.HasKey(e => e.KNotizEntwurf)
                    .HasName("PK_Ticketsystem_tNotizEntwurf");

                entity.ToTable("tNotizEntwurf", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tNotizEntwurf_kBenutzer");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tNotizEntwurf_kTicket");

                entity.HasIndex(e => new { e.KTicket, e.KBenutzer }, "UQ_Ticketsystem_tNotizEntwurf_kTicket_kBenutzer")
                    .IsUnique();

                entity.Property(e => e.KNotizEntwurf).HasColumnName("kNotizEntwurf");

                entity.Property(e => e.CBetreff)
                    .HasMaxLength(998)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TNotizEntwurf)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .HasConstraintName("FK_Ticketsystem_tNotizEntwurf_kFile_HtmlInhalt");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TNotizEntwurf)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tNotizEntwurf_kTicket");
            });

            modelBuilder.Entity<TNotizEntwurfAnhang>(entity =>
            {
                entity.HasKey(e => e.KNotizEntwurfAnhang)
                    .HasName("PK_Ticketsystem_tNotizEntwurfAnhang");

                entity.ToTable("tNotizEntwurfAnhang", "Ticketsystem");

                entity.HasIndex(e => e.KAnhang, "IX_Ticketsystem_tNotizEntwurfAnhang_kAnhang");

                entity.HasIndex(e => e.KNotizEntwurf, "IX_Ticketsystem_tNotizEntwurfAnhang_kNotizEntwurf");

                entity.Property(e => e.KNotizEntwurfAnhang).HasColumnName("kNotizEntwurfAnhang");

                entity.Property(e => e.KAnhang).HasColumnName("kAnhang");

                entity.Property(e => e.KNotizEntwurf).HasColumnName("kNotizEntwurf");

                entity.HasOne(d => d.KAnhangNavigation)
                    .WithMany(p => p.TNotizEntwurfAnhang)
                    .HasForeignKey(d => d.KAnhang)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tNotizEntwurfAnhang_kAnhang");

                entity.HasOne(d => d.KNotizEntwurfNavigation)
                    .WithMany(p => p.TNotizEntwurfAnhang)
                    .HasForeignKey(d => d.KNotizEntwurf)
                    .HasConstraintName("FK_Ticketsystem_tNotizEntwurfAnhang_kNotizEntwurf");
            });

            modelBuilder.Entity<TOauthConfig>(entity =>
            {
                entity.HasKey(e => e.CId);

                entity.ToTable("tOauthConfig");

                entity.Property(e => e.CId)
                    .HasMaxLength(255)
                    .HasColumnName("cId");

                entity.Property(e => e.CAuthorize)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cAuthorize");

                entity.Property(e => e.CClientCallback)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cClientCallback");

                entity.Property(e => e.CClientId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cClientId");

                entity.Property(e => e.CClientSecret)
                    .HasMaxLength(255)
                    .HasColumnName("cClientSecret");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cName");

                entity.Property(e => e.CScopes).HasColumnName("cScopes");

                entity.Property(e => e.CToken)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cToken");

                entity.Property(e => e.NFlow).HasColumnName("nFlow");
            });

            modelBuilder.Entity<TOauthToken>(entity =>
            {
                entity.HasKey(e => e.KOauthToken)
                    .HasName("PK_tOauthTokens");

                entity.ToTable("tOauthToken");

                entity.Property(e => e.KOauthToken).HasColumnName("kOauthToken");

                entity.Property(e => e.CAccessToken)
                    .IsRequired()
                    .HasColumnName("cAccessToken");

                entity.Property(e => e.CConfigId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cConfigId");

                entity.Property(e => e.CRefreshToken).HasColumnName("cRefreshToken");

                entity.Property(e => e.DValidUntil)
                    .HasColumnType("datetime")
                    .HasColumnName("dValidUntil");

                entity.Property(e => e.NInvalid).HasColumnName("nInvalid");

                entity.HasOne(d => d.CConfig)
                    .WithMany(p => p.TOauthToken)
                    .HasForeignKey(d => d.CConfigId)
                    .HasConstraintName("FK_dbo_tOauthConfig_cId");
            });

            modelBuilder.Entity<TOptions>(entity =>
            {
                entity.HasKey(e => e.CKey);

                entity.ToTable("tOptions");

                entity.Property(e => e.CKey)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CValue)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cValue");
            });

            modelBuilder.Entity<TOutboundItemRef>(entity =>
            {
                entity.HasKey(e => e.KOutboundItemRef)
                    .HasName("PK_FulfillmentNetwork.tOutboundItemRef");

                entity.ToTable("tOutboundItemRef", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.KBestellung, e.KBestellPos }, "IX_FulfillmentNetwork_tOutboundItemRef_kBestellung_kBestellPos")
                    .IsUnique();

                entity.Property(e => e.KOutboundItemRef).HasColumnName("kOutboundItemRef");

                entity.Property(e => e.COutboundItemId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundItemId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.FQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantity");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.HasOne(d => d.KBestellPosNavigation)
                    .WithMany(p => p.TOutboundItemRef)
                    .HasForeignKey(d => d.KBestellPos)
                    .HasConstraintName("FK_FulfillmentNetwork_tOutboundItemRef_kBestellPos");
            });

            modelBuilder.Entity<TOutboundRef>(entity =>
            {
                entity.HasKey(e => e.KOutboundRef)
                    .HasName("PK_FulfillmentNetwork.tOutboundRef");

                entity.ToTable("tOutboundRef", "FulfillmentNetwork");

                entity.HasIndex(e => e.COutboundId, "IX_FulfillmentNetwork_tOutboundRef_cOutboundId");

                entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tOutboundRef_cOwnerId");

                entity.Property(e => e.KOutboundRef).HasColumnName("kOutboundRef");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.CNote)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.COutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundId");

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.CWarehouseId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarehouseId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DObjectVersion).HasColumnName("dObjectVersion");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.NChangeState).HasColumnName("nChangeState");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.HasOne(d => d.KBestellungNavigation)
                    .WithMany(p => p.TOutboundRef)
                    .HasForeignKey(d => d.KBestellung)
                    .HasConstraintName("FK_dbo_tOutboundRef_kBestellung");

                entity.HasOne(d => d.KFulfillmentAuftragNavigation)
                    .WithMany(p => p.TOutboundRef)
                    .HasForeignKey(d => d.KFulfillmentAuftrag)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_dbo_tOutboundRef_kFulfillmentAuftrag");
            });

            modelBuilder.Entity<TPackage>(entity =>
            {
                entity.HasKey(e => e.KPackage);

                entity.ToTable("tPackage", "Shipping");

                entity.Property(e => e.KPackage).HasColumnName("kPackage");

                entity.Property(e => e.CReceiverCountryIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cReceiverCountryIso");

                entity.Property(e => e.CReceiverZipCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cReceiverZipCode");

                entity.Property(e => e.CShipperCountryIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cShipperCountryIso");

                entity.Property(e => e.CTrackingId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingId");

                entity.Property(e => e.DNextUpdateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dNextUpdateDate");

                entity.Property(e => e.DRegisteredAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dRegisteredAt");

                entity.Property(e => e.KPackageServer).HasColumnName("kPackageServer");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.NServiceProvider).HasColumnName("nServiceProvider");

                entity.HasOne(d => d.KVersandNavigation)
                    .WithMany(p => p.TPackage)
                    .HasForeignKey(d => d.KVersand)
                    .HasConstraintName("FK_dbo_tVersand_kVersand");
            });

            modelBuilder.Entity<TPicVersand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tPicVersand");

                entity.HasIndex(e => new { e.KArtikelBild, e.KShop }, "IX_tPicVersand_kArtikelBild_kShop");

                entity.HasIndex(e => e.KEigenschaftWertPict, "IX_tPicVersand_kEigenschaftWertPict");

                entity.HasIndex(e => e.KKategoriePict, "IX_tPicVersand_kKategoriePict");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DMod)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dMod");

                entity.Property(e => e.KArtikelBild).HasColumnName("kArtikelBild");

                entity.Property(e => e.KEa).HasColumnName("kEA");

                entity.Property(e => e.KEigenschaftWertPict).HasColumnName("kEigenschaftWertPict");

                entity.Property(e => e.KKategoriePict).HasColumnName("kKategoriePict");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TPickliste>(entity =>
            {
                entity.HasKey(e => e.KPickliste);

                entity.ToTable("tPickliste");

                entity.HasIndex(e => new { e.KWarenLager, e.NStatus }, "IX_tPickliste_kWarenLager_nStatus");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KPicklisteStatus).HasColumnName("kPicklisteStatus");

                entity.Property(e => e.KPicklisteStatusAngelegt).HasColumnName("kPicklisteStatusAngelegt");

                entity.Property(e => e.KPicklistenVorlage).HasColumnName("kPicklistenVorlage");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TPicklistePos>(entity =>
            {
                entity.HasKey(e => e.KPicklistePos);

                entity.ToTable("tPicklistePos");

                entity.HasIndex(e => new { e.KArtikel, e.NStatus, e.KWarenLager }, "IX_tPicklistePos_kArtikel_nStatus_kWarenlager_INCL_fAnzahl_kBestellPos");

                entity.HasIndex(e => new { e.KBestellPos, e.KWarenLager }, "IX_tPicklistePos_kBestellPos_kWarenlager");

                entity.HasIndex(e => new { e.KBestellung, e.NStatus }, "IX_tPicklistePos_kBestellung_nStatus");

                entity.HasIndex(e => e.KPickliste, "IX_tPicklistePos_kPickliste_kBestellPos");

                entity.HasIndex(e => new { e.KPickliste, e.NStatus }, "IX_tPicklistePos_kPickliste_nStatus_kBestellung");

                entity.HasIndex(e => e.KWarenLagerEingang, "IX_tPicklistePos_kWarenLagerEingang");

                entity.HasIndex(e => e.NStatus, "IX_tPicklistePos_nStatus");

                entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KAnsprechpartner).HasColumnName("kAnsprechpartner");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.KPicklistePosStatus).HasColumnName("kPicklistePosStatus");

                entity.Property(e => e.KPicklistePosUrsprung).HasColumnName("kPicklistePos_Ursprung");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");

                entity.Property(e => e.NPickPrio).HasColumnName("nPickPrio");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TPicklistePosStatus>(entity =>
            {
                entity.HasKey(e => e.KPicklistePosStatus);

                entity.ToTable("tPicklistePosStatus");

                entity.HasIndex(e => new { e.KPicklistePos, e.NStatus }, "IX_tPicklistePosStatus_kPicklistePos_nStatus");

                entity.Property(e => e.KPicklistePosStatus).HasColumnName("kPicklistePosStatus");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");

                entity.Property(e => e.Kbenutzer).HasColumnName("kbenutzer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TPicklisteStatus>(entity =>
            {
                entity.HasKey(e => e.KPicklisteStatus);

                entity.ToTable("tPicklisteStatus");

                entity.HasIndex(e => e.KPickliste, "IX_tPicklisteStatus_INCL_kPicklisteStatus_nStatus");

                entity.Property(e => e.KPicklisteStatus).HasColumnName("kPicklisteStatus");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TPicklisteVorlage>(entity =>
            {
                entity.HasKey(e => e.KPicklisteVorlage);

                entity.ToTable("tPicklisteVorlage");

                entity.HasIndex(e => new { e.NIstVorlage, e.KWarenlager }, "IX_tPicklisteVorlage_nIstVorlage_kWarenlager");

                entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAuftragkennzeichnung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragkennzeichnung");

                entity.Property(e => e.CAuftragsPrio)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsPrio");

                entity.Property(e => e.CBenutzer)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer");

                entity.Property(e => e.CFirmen)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cFirmen");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CKundengruppen)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppen");

                entity.Property(e => e.CLagerbereiche)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cLagerbereiche");

                entity.Property(e => e.CLieferlaender)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cLieferlaender");

                entity.Property(e => e.CName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPlattformen)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPlattformen");

                entity.Property(e => e.CShops)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShops");

                entity.Property(e => e.CVersandartNr)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartNr");

                entity.Property(e => e.CVersandklassen)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cVersandklassen");

                entity.Property(e => e.CWarengruppen)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cWarengruppen");

                entity.Property(e => e.CZahlungsarten)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsarten");

                entity.Property(e => e.DAngelegt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAngelegt");

                entity.Property(e => e.DBisDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBisDatum");

                entity.Property(e => e.DVonDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVonDatum");

                entity.Property(e => e.FGewichtBis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtBis");

                entity.Property(e => e.FGewichtVon)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtVon");

                entity.Property(e => e.FPreisAuftragMax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisAuftragMax");

                entity.Property(e => e.FPreisAuftragMin)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisAuftragMin");

                entity.Property(e => e.FTeillieferungenWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fTeillieferungenWert");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellNr).HasColumnName("kBestellNr");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.KPicklistenVorlageUrsprung).HasColumnName("kPicklistenVorlageUrsprung");

                entity.Property(e => e.KRollendeKommissionierungPickwagen).HasColumnName("kRollendeKommissionierungPickwagen");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NAlleOhneVersandart).HasColumnName("nAlleOhneVersandart");

                entity.Property(e => e.NAlleOhneWarengruppe).HasColumnName("nAlleOhneWarengruppe");

                entity.Property(e => e.NAlleOhneZahlungsart).HasColumnName("nAlleOhneZahlungsart");

                entity.Property(e => e.NAngebrocheneBoxenImmerVervollstaendigen).HasColumnName("nAngebrocheneBoxenImmerVervollstaendigen");

                entity.Property(e => e.NAnzahlArtikelAuftragMax).HasColumnName("nAnzahlArtikelAuftragMax");

                entity.Property(e => e.NAnzahlArtikelAuftragMin).HasColumnName("nAnzahlArtikelAuftragMin");

                entity.Property(e => e.NAnzahlBestellungen).HasColumnName("nAnzahlBestellungen");

                entity.Property(e => e.NArtikelBreiteBis).HasColumnName("nArtikelBreiteBis");

                entity.Property(e => e.NArtikelBreiteVon).HasColumnName("nArtikelBreiteVon");

                entity.Property(e => e.NArtikelHoeheBis).HasColumnName("nArtikelHoeheBis");

                entity.Property(e => e.NArtikelHoeheVon).HasColumnName("nArtikelHoeheVon");

                entity.Property(e => e.NArtikelLaengeBis).HasColumnName("nArtikelLaengeBis");

                entity.Property(e => e.NArtikelLaengeVon).HasColumnName("nArtikelLaengeVon");

                entity.Property(e => e.NAuftragsArt).HasColumnName("nAuftragsArt");

                entity.Property(e => e.NAuftragsVolumenBis).HasColumnName("nAuftragsVolumenBis");

                entity.Property(e => e.NAuftragsVolumenVon).HasColumnName("nAuftragsVolumenVon");

                entity.Property(e => e.NBestellungWmsfreigabe)
                    .HasColumnName("nBestellungWMSFreigabe")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NBoxenBis).HasColumnName("nBoxenBis");

                entity.Property(e => e.NBoxenNurGanzeStuecklistenAufPl).HasColumnName("nBoxenNurGanzeStuecklistenAufPL");

                entity.Property(e => e.NBoxenVon).HasColumnName("nBoxenVon");

                entity.Property(e => e.NDirektVerpacken).HasColumnName("nDirektVerpacken");

                entity.Property(e => e.NEinArtikelPickliste).HasColumnName("nEinArtikelPickliste");

                entity.Property(e => e.NEnthaeltArtArtikelZustand).HasColumnName("nEnthaeltArtArtikelZustand");

                entity.Property(e => e.NEnthaeltArtAusEigeneFelder).HasColumnName("nEnthaeltArtAusEigeneFelder");

                entity.Property(e => e.NEnthaeltArtAusWarengruppe).HasColumnName("nEnthaeltArtAusWarengruppe");

                entity.Property(e => e.NIstVorlage).HasColumnName("nIstVorlage");

                entity.Property(e => e.NLadenlokalEinbeziehen).HasColumnName("nLadenlokalEinbeziehen");

                entity.Property(e => e.NMaxAnzahlArtikel)
                    .HasColumnName("nMaxAnzahlArtikel")
                    .HasDefaultValueSql("((999999))");

                entity.Property(e => e.NMhdhandling).HasColumnName("nMHDHandling");

                entity.Property(e => e.NMhdminHaltbarkeit).HasColumnName("nMHDMinHaltbarkeit");

                entity.Property(e => e.NMobileAppPicklistenVorlage).HasColumnName("nMobileAppPicklistenVorlage");

                entity.Property(e => e.NMobilerPacktisch).HasColumnName("nMobilerPacktisch");

                entity.Property(e => e.NNachschubPickenLast).HasColumnName("nNachschubPickenLast");

                entity.Property(e => e.NNichtBezahltAutomatischAufVorkommi)
                    .HasColumnName("nNichtBezahltAutomatischAufVorkommi")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NNichtBezahltVorkommissionieren)
                    .HasColumnName("nNichtBezahltVorkommissionieren")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NNurAusgewaehlteVersandartenAnzeigen).HasColumnName("nNurAusgewaehlteVersandartenAnzeigen");

                entity.Property(e => e.NOhneVolumenAusschliessen).HasColumnName("nOhneVolumenAusschliessen");

                entity.Property(e => e.NPlatzPrioBeruecksichtigen).HasColumnName("nPlatzPrioBeruecksichtigen");

                entity.Property(e => e.NQuickSlot).HasColumnName("nQuickSlot");

                entity.Property(e => e.NRetourenplatzReservieren).HasColumnName("nRetourenplatzReservieren");

                entity.Property(e => e.NSortenrein).HasColumnName("nSortenrein");

                entity.Property(e => e.NSortierung).HasColumnName("nSortierung");

                entity.Property(e => e.NStuecklisteNurWennAlleAufPlatz).HasColumnName("nStuecklisteNurWennAlleAufPlatz");

                entity.Property(e => e.NStuecklisteVonGleichenPlatz).HasColumnName("nStuecklisteVonGleichenPlatz");

                entity.Property(e => e.NTeillieferungen).HasColumnName("nTeillieferungen");

                entity.Property(e => e.NWeplatzReservieren).HasColumnName("nWEPlatzReservieren");
            });

            modelBuilder.Entity<TPicklisteVorlageArtikelZustand>(entity =>
            {
                entity.HasKey(e => new { e.KPicklisteVorlage, e.KZustand });

                entity.ToTable("tPicklisteVorlageArtikelZustand");

                entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TPicklisteVorlageBoxen>(entity =>
            {
                entity.HasKey(e => e.KPicklisteVorlageBoxen);

                entity.ToTable("tPicklisteVorlageBoxen");

                entity.HasIndex(e => new { e.KPicklisteVorlage, e.KLhm }, "IX_tPicklisteVorlageBoxen_kPicklisteVorlage_kLHM");

                entity.Property(e => e.KPicklisteVorlageBoxen).HasColumnName("kPicklisteVorlageBoxen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KLhm).HasColumnName("kLHM");

                entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");
            });

            modelBuilder.Entity<TPicklisteVorlageEigeneFelder>(entity =>
            {
                entity.HasKey(e => new { e.KPicklisteVorlage, e.KAttribut })
                    .HasName("PK_tPicklisteVorlageEigeneFelder_kPicklisteVorlage_kAttribut");

                entity.ToTable("tPicklisteVorlageEigeneFelder");

                entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWert).HasColumnName("cWert");

                entity.Property(e => e.DWertDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dWertDateTime");

                entity.Property(e => e.FWertDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertDecimal");

                entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
            });

            modelBuilder.Entity<TPicklistenVorschauSync>(entity =>
            {
                entity.HasKey(e => e.KPicklisteVorlage);

                entity.ToTable("tPicklistenVorschauSync");

                entity.Property(e => e.KPicklisteVorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kPicklisteVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DLastUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastUpdate");

                entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");
            });

            modelBuilder.Entity<TPlattform>(entity =>
            {
                entity.HasKey(e => e.NPlattform);

                entity.ToTable("tPlattform");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CId)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cID");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NTyp)
                    .HasColumnName("nTyp")
                    .HasDefaultValueSql("((9))");
            });

            modelBuilder.Entity<TPlz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tPLZ");

                entity.HasIndex(e => e.CLand, "IX_tPLZ_cLand");

                entity.HasIndex(e => e.COrt, "IX_tPLZ_cOrt");

                entity.HasIndex(e => e.CPlz, "IX_tPLZ_cPLZ");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CLand)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.COrt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");
            });

            modelBuilder.Entity<TPosLogeintrag>(entity =>
            {
                entity.HasKey(e => e.KPosLogeintrag)
                    .HasName("PK_Sync_tPosLogeintrag");

                entity.ToTable("tPosLogeintrag", "Sync");

                entity.Property(e => e.KPosLogeintrag).HasColumnName("kPosLogeintrag");

                entity.Property(e => e.CJson)
                    .IsUnicode(false)
                    .HasColumnName("cJson");

                entity.Property(e => e.CMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");

                entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");

                entity.Property(e => e.NCallType).HasColumnName("nCallType");

                entity.Property(e => e.NLimit).HasColumnName("nLimit");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.HasOne(d => d.KSyncLogsitzungNavigation)
                    .WithMany(p => p.TPosLogeintrag)
                    .HasForeignKey(d => d.KSyncLogsitzung)
                    .HasConstraintName("FK_Sync_tPosLogeintrag_kSyncLogsitzung");
            });

            modelBuilder.Entity<TPreis>(entity =>
            {
                entity.HasKey(e => e.KPreis);

                entity.ToTable("tPreis");

                entity.HasIndex(e => new { e.KArtikel, e.KShop }, "IX_tPreis_kArtikel_kShop");

                entity.HasIndex(e => e.KShop, "IX_tPreis_kShop_INCL");

                entity.Property(e => e.KPreis).HasColumnName("kPreis");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<TPreisDetail>(entity =>
            {
                entity.HasKey(e => new { e.KPreis, e.NAnzahlAb });

                entity.ToTable("tPreisDetail");

                entity.Property(e => e.KPreis).HasColumnName("kPreis");

                entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FNettoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNettoPreis");

                entity.Property(e => e.FProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fProzent");
            });

            modelBuilder.Entity<TPreisExportVorlage>(entity =>
            {
                entity.HasKey(e => e.KPreisExportVorlage);

                entity.ToTable("tPreisExportVorlage");

                entity.Property(e => e.KPreisExportVorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kPreisExportVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.SMapping)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("sMapping");
            });

            modelBuilder.Entity<TPreisImportVorlage>(entity =>
            {
                entity.HasKey(e => e.KPreisImportVorlage);

                entity.ToTable("tPreisImportVorlage");

                entity.Property(e => e.KPreisImportVorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kPreisImportVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BZeile).HasColumnName("bZeile");

                entity.Property(e => e.CIdent)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdent");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTrennzeichen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTrennzeichen")
                    .IsFixedLength(true);

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.NStdvknetto).HasColumnName("nSTDVKNetto");

                entity.Property(e => e.NVknettoberechnen).HasColumnName("nVKNettoberechnen");

                entity.Property(e => e.SMapping)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("sMapping");
            });

            modelBuilder.Entity<TPreiskalkulation>(entity =>
            {
                entity.HasKey(e => new { e.CName, e.NAb, e.CPlattform });

                entity.ToTable("tPreiskalkulation");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NAb).HasColumnName("nAB");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BSonderpreiLager).HasColumnName("bSonderpreiLager");

                entity.Property(e => e.BSonderpreisAb).HasColumnName("bSonderpreisAb");

                entity.Property(e => e.BSonderpreisBis).HasColumnName("bSonderpreisBis");

                entity.Property(e => e.CSonderpreisKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSonderpreisKundengruppe");

                entity.Property(e => e.CSonderpreisPlattform)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSonderpreisPlattform");

                entity.Property(e => e.DModifiziert)
                    .HasColumnType("datetime")
                    .HasColumnName("dModifiziert");

                entity.Property(e => e.DSonderpreisAb)
                    .HasColumnType("datetime")
                    .HasColumnName("dSonderpreisAb");

                entity.Property(e => e.DSonderpreisBis)
                    .HasColumnType("datetime")
                    .HasColumnName("dSonderpreisBis");

                entity.Property(e => e.NDeaktivate).HasColumnName("nDeaktivate");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NIndexPreisAlt).HasColumnName("nIndexPreisAlt");

                entity.Property(e => e.NIndexPreisAltKundengruppe).HasColumnName("nIndexPreisAltKundengruppe");

                entity.Property(e => e.NIndexPreisAltMarktplatz).HasColumnName("nIndexPreisAltMarktplatz");

                entity.Property(e => e.NIndexPreisNeu).HasColumnName("nIndexPreisNeu");

                entity.Property(e => e.NIndexPreisNeuKundengruppe).HasColumnName("nIndexPreisNeuKundengruppe");

                entity.Property(e => e.NIndexPreisNeuMarktplatz).HasColumnName("nIndexPreisNeuMarktplatz");

                entity.Property(e => e.NOperator).HasColumnName("nOperator");

                entity.Property(e => e.NPreisglaettungBis10).HasColumnName("nPreisglaettungBis10");

                entity.Property(e => e.NPreisglaettungBis100).HasColumnName("nPreisglaettungBis100");

                entity.Property(e => e.NPreisglaettungBis1000).HasColumnName("nPreisglaettungBis1000");

                entity.Property(e => e.NPreisglaettungBis10000).HasColumnName("nPReisglaettungBis10000");

                entity.Property(e => e.NSonderpreisLager).HasColumnName("nSonderpreisLager");

                entity.Property(e => e.NWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nWert");
            });

            modelBuilder.Entity<TPreiskalkulationLogbuch>(entity =>
            {
                entity.HasKey(e => e.KLogbuch);

                entity.ToTable("tPreiskalkulationLogbuch");

                entity.Property(e => e.KLogbuch).HasColumnName("kLogbuch");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CArtikel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikel");

                entity.Property(e => e.CBetreff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.CLog)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.DZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeit");

                entity.Property(e => e.KUser).HasColumnName("kUSer");
            });

            modelBuilder.Entity<TPreiskalkulationLogbuchDetails>(entity =>
            {
                entity.HasKey(e => e.KLogbuchDetails);

                entity.ToTable("tPreiskalkulationLogbuchDetails");

                entity.Property(e => e.KLogbuchDetails).HasColumnName("kLogbuchDetails");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CDifferenz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDifferenz");

                entity.Property(e => e.CEinstellungen)
                    .IsUnicode(false)
                    .HasColumnName("cEinstellungen");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPreisAlt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPreisAlt");

                entity.Property(e => e.CPreisNeu)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPreisNeu");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.FPreisAlt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisAlt");

                entity.Property(e => e.FPreisNeu)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreisNeu");

                entity.Property(e => e.KLogbuch).HasColumnName("kLogbuch");
            });

            modelBuilder.Entity<TPreiskalkulationSetting>(entity =>
            {
                entity.HasKey(e => new { e.KPreiskalkulationSetting, e.CNameSetting });

                entity.ToTable("tPreiskalkulationSetting");

                entity.Property(e => e.KPreiskalkulationSetting)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kPreiskalkulationSetting");

                entity.Property(e => e.CNameSetting)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameSetting");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKundenGruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundenGruppe");

                entity.Property(e => e.CModifikator)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModifikator");

                entity.Property(e => e.CModus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModus");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPlattform)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPlattform");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FApamax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAMax");

                entity.Property(e => e.FApamin)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAPAMin");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPreisBis10).HasColumnName("nPreisBis10");

                entity.Property(e => e.NPreisBis100).HasColumnName("nPreisBis100");

                entity.Property(e => e.NPreisBis1000).HasColumnName("nPreisBis1000");

                entity.Property(e => e.NPreisBis10000).HasColumnName("nPreisBis10000");
            });

            modelBuilder.Entity<TPrintDocumentType>(entity =>
            {
                entity.HasKey(e => e.KPrintDocumentType);

                entity.ToTable("tPrintDocumentType", "Shipping");

                entity.Property(e => e.KPrintDocumentType).HasColumnName("kPrintDocumentType");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDokumentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDokumentName");
            });

            modelBuilder.Entity<TProductPictureRef>(entity =>
            {
                entity.HasKey(e => e.KProductPictureRef)
                    .HasName("PK_FulfillmentNetwork.tProductPictureRef");

                entity.ToTable("tProductPictureRef", "FulfillmentNetwork");

                entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tProductPictureRef_cOwnerId");

                entity.Property(e => e.KProductPictureRef).HasColumnName("kProductPictureRef");

                entity.Property(e => e.BBildRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bBildRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.CFfnHash)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFfnHash");

                entity.Property(e => e.CFfnPublicUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFfnPublicUrl");

                entity.Property(e => e.COwnerId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.NFfnNumber).HasColumnName("nFfnNumber");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.HasOne(d => d.KArtikelbildPlattformNavigation)
                    .WithMany(p => p.TProductPictureRef)
                    .HasForeignKey(d => d.KArtikelbildPlattform)
                    .HasConstraintName("FK_dbo_tArtikelbildPlattform_kArtikelbildPlattform");
            });

            modelBuilder.Entity<TProductRef>(entity =>
            {
                entity.HasKey(e => e.KProductRef)
                    .HasName("PK_FulfillmentNetwork.tProductRef");

                entity.ToTable("tProductRef", "FulfillmentNetwork");

                entity.HasIndex(e => e.CJfsku, "IX_FulfillmentNetwork_tProductRef_cJfsku")
                    .IsUnique();

                entity.HasIndex(e => e.COwnerId, "IX_FulfillmentNetwork_tProductRef_cOwnerId");

                entity.Property(e => e.KProductRef).HasColumnName("kProductRef");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("bRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.HasOne(d => d.KArtikelNavigation)
                    .WithMany(p => p.TProductRef)
                    .HasForeignKey(d => d.KArtikel)
                    .HasConstraintName("FK_dbo_tArtikel_kArtikel");
            });

            modelBuilder.Entity<TQueue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tQueue");

                entity.HasIndex(e => e.CName, "IX_tQueue_cName");

                entity.HasIndex(e => e.KShop, "IX_tQueue_kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KOption1).HasColumnName("kOption1");

                entity.Property(e => e.KOption2).HasColumnName("kOption2");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KWert).HasColumnName("kWert");

                entity.Property(e => e.NAction).HasColumnName("nAction");

                entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            });

            modelBuilder.Entity<TQueue1>(entity =>
            {
                entity.HasKey(e => e.KQueue)
                    .HasName("PK_FulfillmentNetwork.tQueue");

                entity.ToTable("tQueue", "FulfillmentNetwork");

                entity.Property(e => e.KQueue).HasColumnName("kQueue");

                entity.Property(e => e.CData)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cData");

                entity.Property(e => e.CErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CRequestId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRequestId");

                entity.Property(e => e.CSessionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSessionId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DModificationDate).HasColumnName("dModificationDate");

                entity.Property(e => e.DProcessedAt).HasColumnName("dProcessedAt");

                entity.Property(e => e.NEvent).HasColumnName("nEvent");

                entity.Property(e => e.NPriority).HasColumnName("nPriority");

                entity.Property(e => e.NRole).HasColumnName("nRole");

                entity.Property(e => e.NState).HasColumnName("nState");

                entity.Property(e => e.NTarget).HasColumnName("nTarget");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<TQueue2>(entity =>
            {
                entity.HasKey(e => e.KQueue)
                    .HasName("PK_Pos_tQueue");

                entity.ToTable("tQueue", "Pos");

                entity.Property(e => e.KQueue).HasColumnName("kQueue");

                entity.Property(e => e.CFehler).HasColumnName("cFehler");

                entity.Property(e => e.CJson)
                    .IsRequired()
                    .HasColumnName("cJson");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KShopSubShop).HasColumnName("kShopSubShop");

                entity.Property(e => e.NCount).HasColumnName("nCount");

                entity.Property(e => e.NFailedStep).HasColumnName("nFailedStep");

                entity.Property(e => e.NInBearbeitung).HasColumnName("nInBearbeitung");
            });

            modelBuilder.Entity<TRechnungBackup>(entity =>
            {
                entity.HasKey(e => e.KRechnung)
                    .HasName("PK_trechnungBackup");

                entity.ToTable("tRechnungBackup");

                entity.Property(e => e.KRechnung)
                    .ValueGeneratedNever()
                    .HasColumnName("kRechnung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBezahlt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBezahlt")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DEmailversandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dEmailversandt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.NInkassoStatus).HasColumnName("nInkassoStatus");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");

                entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");

                entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");

                entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
            });

            modelBuilder.Entity<TRechnungLabel>(entity =>
            {
                entity.HasKey(e => new { e.KRechnung, e.KLabel });

                entity.ToTable("tRechnungLabel");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.HasOne(d => d.KRechnungNavigation)
                    .WithMany(p => p.TRechnungLabel)
                    .HasForeignKey(d => d.KRechnung)
                    .HasConstraintName("FK_tRechnungLabel_kRechnung");
            });

            modelBuilder.Entity<TRecht>(entity =>
            {
                entity.HasKey(e => e.KRecht);

                entity.ToTable("tRecht");

                entity.Property(e => e.KRecht)
                    .ValueGeneratedNever()
                    .HasColumnName("kRecht");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnzeigeName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAnzeigeName");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.KRechtVater).HasColumnName("kRechtVater");

                entity.Property(e => e.NIstLabel).HasColumnName("nIstLabel");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TRechtBenutzerGruppe>(entity =>
            {
                entity.HasKey(e => e.KRechtBenutzerGruppe);

                entity.ToTable("tRechtBenutzerGruppe");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NIsAdmin).HasColumnName("nIsAdmin");
            });

            modelBuilder.Entity<TRechtBenutzerGruppenZuordnung>(entity =>
            {
                entity.HasKey(e => new { e.KRechtBenutzerGruppe, e.KBenutzer });

                entity.ToTable("tRechtBenutzerGruppenZuordnung");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TRechte>(entity =>
            {
                entity.HasKey(e => e.KRechte);

                entity.ToTable("tRechte");

                entity.Property(e => e.KRechte).HasColumnName("kRechte");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KRecht).HasColumnName("kRecht");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            });

            modelBuilder.Entity<TReports>(entity =>
            {
                entity.HasKey(e => e.KReports);

                entity.ToTable("tReports");

                entity.Property(e => e.KReports)
                    .ValueGeneratedNever()
                    .HasColumnName("kReports");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CData)
                    .IsUnicode(false)
                    .HasColumnName("cData");

                entity.Property(e => e.CDataSet)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cDataSet");

                entity.Property(e => e.CName)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTyp)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");
            });

            modelBuilder.Entity<TReportsDataSet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tReportsDataSet");

                entity.HasIndex(e => e.KReports, "IX_tReportsDataSet_kReports");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDataSet)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cDataSet");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KReports).HasColumnName("kReports");
            });

            modelBuilder.Entity<TRepricerProcess>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tRepricerProcess");

                entity.HasIndex(e => e.CMandant, "IX_tRepricerProcess_cMandant");

                entity.HasIndex(e => e.NId, "IX_tRepricerProcess_nId");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CMandant)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMandant");

                entity.Property(e => e.DUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dUpdated");

                entity.Property(e => e.NId).HasColumnName("nId");
            });

            modelBuilder.Entity<TReserviert>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KKey, e.KPlattform });

                entity.ToTable("tReserviert");

                entity.HasIndex(e => new { e.KArtikel, e.FAnzahl }, "IX_tReserviert_kArtikel_fAnzahl");

                entity.HasIndex(e => e.KBestellung, "IX_tReserviert_kBestellung_INCL_fAnzahl");

                entity.HasIndex(e => new { e.KKey, e.KPlattform }, "IX_tReserviert_kKey_kPlattform");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKey).HasColumnName("kKey");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FBestandReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestandReserviert");

                entity.Property(e => e.FBestandReserviertEigen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestandReserviertEigen");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<TRetourPosGutschriftMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tRetourPosGutschriftMapping", "Amazon");

                entity.HasIndex(e => new { e.KAmazonRetourPos, e.KGutschrift }, "UQ_Amazon_tRetourPosGutschriftMapping_kAmazonRetourPos_kGutschrift")
                    .IsUnique();

                entity.Property(e => e.KAmazonRetourPos).HasColumnName("kAmazonRetourPos");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");
            });

            modelBuilder.Entity<TRmgrund>(entity =>
            {
                entity.HasKey(e => e.KRmgrund);

                entity.ToTable("tRMGrund");

                entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CColor)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cColor");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NEinschraenkung).HasColumnName("nEinschraenkung");

                entity.Property(e => e.NFfncode).HasColumnName("nFFNCode");

                entity.Property(e => e.NSort)
                    .HasColumnName("nSort")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NWmsVisible)
                    .HasColumnName("nWmsVisible")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TRmgrundKategorie>(entity =>
            {
                entity.HasKey(e => e.KRmgrundKategorie);

                entity.ToTable("tRMGrundKategorie");

                entity.Property(e => e.KRmgrundKategorie).HasColumnName("kRMGrundKategorie");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");

                entity.Property(e => e.NIstMarkiert).HasColumnName("nIstMarkiert");
            });

            modelBuilder.Entity<TRmgrundSprache>(entity =>
            {
                entity.HasKey(e => new { e.KRmgrund, e.KSprache });

                entity.ToTable("tRMGrundSprache");

                entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TRmgrundWarengruppe>(entity =>
            {
                entity.HasKey(e => e.KRmgrundWarengruppe);

                entity.ToTable("tRMGrundWarengruppe");

                entity.Property(e => e.KRmgrundWarengruppe).HasColumnName("kRMGrundWarengruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            });

            modelBuilder.Entity<TRmretoure>(entity =>
            {
                entity.HasKey(e => e.KRmretoure);

                entity.ToTable("tRMRetoure");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnsprechpartner)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartner");

                entity.Property(e => e.CExternalNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExternalNumber");

                entity.Property(e => e.CFfnReturnId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFfnReturnId");

                entity.Property(e => e.CKommentarExtern)
                    .IsUnicode(false)
                    .HasColumnName("cKommentarExtern");

                entity.Property(e => e.CKommentarIntern)
                    .IsUnicode(false)
                    .HasColumnName("cKommentarIntern");

                entity.Property(e => e.CKorrekturBetragKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cKorrekturBetragKommentar");

                entity.Property(e => e.CRetoureNr)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRetoureNr");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FKorrekturBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKorrekturBetrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KBestellungUmtausch).HasColumnName("kBestellungUmtausch");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NHerkunft).HasColumnName("nHerkunft");

                entity.Property(e => e.NVersandkostenErstatten).HasColumnName("nVersandkostenErstatten");
            });

            modelBuilder.Entity<TRmretoureAbholAdresse>(entity =>
            {
                entity.HasKey(e => e.KRmretoureAbholAdresse);

                entity.ToTable("tRMRetoureAbholAdresse");

                entity.Property(e => e.KRmretoureAbholAdresse).HasColumnName("kRMRetoureAbholAdresse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<TRmretoureAustauschArtikel>(entity =>
            {
                entity.HasKey(e => e.KRmretoureAustauschArtikel);

                entity.ToTable("tRMRetoureAustauschArtikel");

                entity.Property(e => e.KRmretoureAustauschArtikel).HasColumnName("kRMRetoureAustauschArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHinweis)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVkNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVkNetto");

                entity.Property(e => e.FVkPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVkPreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            });

            modelBuilder.Entity<TRmretourePos>(entity =>
            {
                entity.HasKey(e => e.KRmretourePos);

                entity.ToTable("tRMRetourePos");

                entity.HasIndex(e => e.KRmretoure, "IX_dbo_tRMRetourePos_kRmRetoure");

                entity.HasIndex(e => e.KLieferscheinPos, "IX_tRMRetourePos_kLieferscheinPos");

                entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CFfnReturnPosId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFfnReturnPosId");

                entity.Property(e => e.CGrundKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cGrundKommentar");

                entity.Property(e => e.CZustandKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cZustandKommentar");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KRmgrund).HasColumnName("kRMGrund");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.KRmstatusVerlauf).HasColumnName("kRMStatusVerlauf");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NGutschreiben).HasColumnName("nGutschreiben");
            });

            modelBuilder.Entity<TRmretourenEtikett>(entity =>
            {
                entity.HasKey(e => e.KRmretourenEtikett);

                entity.ToTable("tRMRetourenEtikett");

                entity.Property(e => e.KRmretourenEtikett).HasColumnName("kRMRetourenEtikett");

                entity.Property(e => e.BLabel)
                    .HasColumnType("image")
                    .HasColumnName("bLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHash)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHash");

                entity.Property(e => e.CIdentCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CVersandArtManuell)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandArtManuell");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            });

            modelBuilder.Entity<TRmstatus>(entity =>
            {
                entity.HasKey(e => e.KRmstatus);

                entity.ToTable("tRMStatus");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KRmstatusParent).HasColumnName("kRMStatusParent");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NPos).HasColumnName("nPos");

                entity.Property(e => e.NStatusTyp).HasColumnName("nStatusTyp");

                entity.Property(e => e.NVisibleMode).HasColumnName("nVisibleMode");
            });

            modelBuilder.Entity<TRmstatusBerechtigung>(entity =>
            {
                entity.HasKey(e => new { e.KRmstatus, e.KRechtBenutzerGruppe });

                entity.ToTable("tRMStatusBerechtigung");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.KRechtBenutzerGruppe).HasColumnName("kRechtBenutzerGruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NStatusSetzen).HasColumnName("nStatusSetzen");

                entity.Property(e => e.NStatusVerlassen).HasColumnName("nStatusVerlassen");
            });

            modelBuilder.Entity<TRmstatusSprache>(entity =>
            {
                entity.HasKey(e => new { e.KRmstatus, e.KSprache });

                entity.ToTable("tRMStatusSprache");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TRmstatusVerlauf>(entity =>
            {
                entity.HasKey(e => e.KRmstatusVerlauf);

                entity.ToTable("tRMStatusVerlauf");

                entity.Property(e => e.KRmstatusVerlauf).HasColumnName("kRMStatusVerlauf");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");
            });

            modelBuilder.Entity<TRmstatusWorkflow>(entity =>
            {
                entity.HasKey(e => e.KRmstatusWorkflow);

                entity.ToTable("tRMStatusWorkflow");

                entity.Property(e => e.KRmstatusWorkflow).HasColumnName("kRMStatusWorkflow");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");

                entity.Property(e => e.NEvent).HasColumnName("nEvent");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TRueckhalteGrund>(entity =>
            {
                entity.HasKey(e => e.KRueckhalteGrund);

                entity.ToTable("tRueckhalteGrund");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NEinkaufslisteGesperrt).HasColumnName("nEinkaufslisteGesperrt");

                entity.Property(e => e.NZusammenfassbar).HasColumnName("nZusammenfassbar");
            });

            modelBuilder.Entity<TScopeType>(entity =>
            {
                entity.HasKey(e => e.KScopeType)
                    .HasName("PK_FulfillmentNetwork.tScopeType");

                entity.ToTable("tScopeType", "FulfillmentNetwork");

                entity.Property(e => e.KScopeType)
                    .ValueGeneratedNever()
                    .HasColumnName("kScopeType");

                entity.Property(e => e.CId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cId");
            });

            modelBuilder.Entity<TServerConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tServerConfig", "Pos");

                entity.Property(e => e.CCertificateFingerprint)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCertificateFingerprint")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CCertificateSerialNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCertificateSerialNumber")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CIpAddress)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cIpAddress");

                entity.Property(e => e.NPort).HasColumnName("nPort");
            });

            modelBuilder.Entity<TServerStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tServerStatus", "Pos");

                entity.Property(e => e.CCertificateInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCertificateInfo");

                entity.Property(e => e.CComputername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cComputername");

                entity.Property(e => e.CIpAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cIpAddress");

                entity.Property(e => e.CLastSyncInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLastSyncInfo");

                entity.Property(e => e.CPublicIpStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPublicIpStatus");

                entity.Property(e => e.DLastUpdated)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastUpdated");

                entity.Property(e => e.DRequestedAction)
                    .HasColumnType("datetime")
                    .HasColumnName("dRequestedAction");

                entity.Property(e => e.KServerStatus).HasColumnName("kServerStatus");

                entity.Property(e => e.NRequestedAction).HasColumnName("nRequestedAction");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TSessionId>(entity =>
            {
                entity.HasKey(e => e.KSessionId);

                entity.ToTable("tSessionId");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.DLastAction)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastAction");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            });

            modelBuilder.Entity<TSetting>(entity =>
            {
                entity.HasKey(e => e.KSetting)
                    .HasName("PK_Ticketsystem_tSetting");

                entity.ToTable("tSetting", "Ticketsystem");

                entity.HasIndex(e => new { e.CKey, e.CValue }, "UQ_Ticketsystem_tSetting_cKey_cValue")
                    .IsUnique();

                entity.Property(e => e.KSetting).HasColumnName("kSetting");

                entity.Property(e => e.CKey)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.CValue)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cValue");
            });

            modelBuilder.Entity<TSettings>(entity =>
            {
                entity.HasKey(e => e.CKey)
                    .HasName("PK_FulfillmentNetwork.cKey");

                entity.ToTable("tSettings", "FulfillmentNetwork");

                entity.Property(e => e.CKey)
                    .HasMaxLength(64)
                    .HasColumnName("cKey");

                entity.Property(e => e.CStringValue).HasColumnName("cStringValue");

                entity.Property(e => e.DDateValue).HasColumnName("dDateValue");

                entity.Property(e => e.FDoubleValue)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDoubleValue");

                entity.Property(e => e.NIntValue).HasColumnName("nIntValue");
            });

            modelBuilder.Entity<TShipperAccount>(entity =>
            {
                entity.HasKey(e => e.KShipperAccount)
                    .HasName("PK_tShipperAccount_kShipperAccount");

                entity.ToTable("tShipperAccount");

                entity.Property(e => e.KShipperAccount).HasColumnName("kShipperAccount");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAccessLicenceNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cAccessLicenceNumber");

                entity.Property(e => e.CAddressadd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAddressadd");

                entity.Property(e => e.CBankAccountOwner)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBankAccountOwner");

                entity.Property(e => e.CBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBankName");

                entity.Property(e => e.CBic)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBic");

                entity.Property(e => e.CCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCity");

                entity.Property(e => e.CCompany)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cCompany");

                entity.Property(e => e.CCompanyAdd)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCompanyAdd");

                entity.Property(e => e.CConsignerId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cConsignerId");

                entity.Property(e => e.CCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCountry");

                entity.Property(e => e.CCountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cCountryIso");

                entity.Property(e => e.CDisplayName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDisplayName");

                entity.Property(e => e.CEkp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cEkp");

                entity.Property(e => e.CFirstname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirstname");

                entity.Property(e => e.CGlsContactId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cGlsContactId");

                entity.Property(e => e.CGlsCustomerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cGlsCustomerId");

                entity.Property(e => e.CIban)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cIban");

                entity.Property(e => e.CInternationalEkp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cInternationalEkp");

                entity.Property(e => e.CLastname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLastname");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMandatorId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cMandatorId");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.COrgUnitGuid)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cOrgUnitGuid");

                entity.Property(e => e.CPassword)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cPassword");

                entity.Property(e => e.CPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPhone");

                entity.Property(e => e.CRetourenEkp)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("cRetourenEkp");

                entity.Property(e => e.CSalutation)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cSalutation");

                entity.Property(e => e.CShipperNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cShipperNumber");

                entity.Property(e => e.CShipperReference)
                    .HasMaxLength(255)
                    .HasColumnName("cShipperReference");

                entity.Property(e => e.CStreetname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreetname");

                entity.Property(e => e.CStreetnumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cStreetnumber");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CUserName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserName");

                entity.Property(e => e.CZipCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cZipCode");

                entity.Property(e => e.FCodFee)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fCodFee");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KOauthToken).HasColumnName("kOAuthToken");

                entity.Property(e => e.KShipperAccountParent).HasColumnName("kShipperAccountParent");

                entity.Property(e => e.KShippingServiceProviderType).HasColumnName("kShippingServiceProviderType");

                entity.Property(e => e.NAccountType).HasColumnName("nAccountType");

                entity.Property(e => e.NAddressSourceType).HasColumnName("nAddressSourceType");

                entity.Property(e => e.NTestAccount).HasColumnName("nTestAccount");
            });

            modelBuilder.Entity<TShippingDocument>(entity =>
            {
                entity.HasKey(e => e.KShippingDocument);

                entity.ToTable("tShippingDocument", "Shipping");

                entity.Property(e => e.KShippingDocument).HasColumnName("kShippingDocument");

                entity.Property(e => e.BData)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bData");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHash)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHash");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dDate");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TShippingMessage>(entity =>
            {
                entity.HasKey(e => e.KShippingMessage);

                entity.ToTable("tShippingMessage", "Shipping");

                entity.Property(e => e.KShippingMessage).HasColumnName("kShippingMessage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCode)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cCode");

                entity.Property(e => e.CMessageContent)
                    .IsUnicode(false)
                    .HasColumnName("cMessageContent");

                entity.Property(e => e.CMessageShort)
                    .HasMaxLength(256)
                    .IsUnicode(false)
                    .HasColumnName("cMessageShort");

                entity.Property(e => e.CRequestId)
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("cRequestId");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.NIsTranslated).HasColumnName("nIsTranslated");

                entity.Property(e => e.NMessageSource).HasColumnName("nMessageSource");

                entity.Property(e => e.NMessageType).HasColumnName("nMessageType");
            });

            modelBuilder.Entity<TShippingMethodMapping>(entity =>
            {
                entity.HasKey(e => e.KShippingMethodMapping)
                    .HasName("PK_FulfillmentNetwork.tShippingMethodMapping");

                entity.ToTable("tShippingMethodMapping", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.CShippingMethodId, e.KVersandart, e.KWarenlager, e.NActive, e.NType }, "UQ_tShippingMethodMapping_cShippingMethodId_kVersandart_kWarenlager_nActive_nType")
                    .IsUnique();

                entity.Property(e => e.KShippingMethodMapping).HasColumnName("kShippingMethodMapping");

                entity.Property(e => e.CShippingMethodId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShippingMethodId");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NActive).HasColumnName("nActive");

                entity.Property(e => e.NDefault).HasColumnName("nDefault");

                entity.Property(e => e.NShippingType).HasColumnName("nShippingType");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.HasOne(d => d.KKundeNavigation)
                    .WithMany(p => p.TShippingMethodMapping)
                    .HasForeignKey(d => d.KKunde)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_dbo_tKunde_kKunde");

                entity.HasOne(d => d.KVersandartNavigation)
                    .WithMany(p => p.TShippingMethodMapping)
                    .HasForeignKey(d => d.KVersandart)
                    .HasConstraintName("FK_dbo_tVersandart_kVersandart");

                entity.HasOne(d => d.KWarenlagerNavigation)
                    .WithMany(p => p.TShippingMethodMapping)
                    .HasForeignKey(d => d.KWarenlager)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_dbo_tWarenlager_kWarenlager");
            });

            modelBuilder.Entity<TShippingPrinterConfiguration>(entity =>
            {
                entity.HasKey(e => e.KShippingDruckDetaileinstellung);

                entity.ToTable("tShippingPrinterConfiguration", "Shipping");

                entity.Property(e => e.KShippingDruckDetaileinstellung).HasColumnName("kShippingDruckDetaileinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDruckerName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckerName");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KPrintDocumentType).HasColumnName("kPrintDocumentType");

                entity.Property(e => e.NExemplare).HasColumnName("nExemplare");

                entity.Property(e => e.NOrientation).HasColumnName("nOrientation");

                entity.Property(e => e.NPageScaling).HasColumnName("nPageScaling");

                entity.Property(e => e.NShippingServiceProviderType).HasColumnName("nShippingServiceProviderType");

                entity.HasOne(d => d.KPrintDocumentTypeNavigation)
                    .WithMany(p => p.TShippingPrinterConfiguration)
                    .HasForeignKey(d => d.KPrintDocumentType)
                    .HasConstraintName("FK_tPrintDocumentType_kPrintDocumentType");

                entity.HasOne(d => d.NShippingServiceProviderTypeNavigation)
                    .WithMany(p => p.TShippingPrinterConfiguration)
                    .HasForeignKey(d => d.NShippingServiceProviderType)
                    .HasConstraintName("FK_tShippingServiceProvider_nShippingServiceProviderType");
            });

            modelBuilder.Entity<TShippingServiceProvider>(entity =>
            {
                entity.HasKey(e => e.KShippingServiceProvider);

                entity.ToTable("tShippingServiceProvider", "Shipping");

                entity.Property(e => e.KShippingServiceProvider).HasColumnName("kShippingServiceProvider");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NBeta).HasColumnName("nBeta");

                entity.Property(e => e.NOrderNo).HasColumnName("nOrderNo");

                entity.Property(e => e.NShippingServiceProviderType).HasColumnName("nShippingServiceProviderType");

                entity.Property(e => e.NTrackingServiceProviderType).HasColumnName("nTrackingServiceProviderType");

                entity.Property(e => e.NVisible).HasColumnName("nVisible");
            });

            modelBuilder.Entity<TShop>(entity =>
            {
                entity.HasKey(e => e.KShop);

                entity.ToTable("tShop");

                entity.Property(e => e.KShop)
                    .ValueGeneratedNever()
                    .HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CApikey)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cAPIKey");

                entity.Property(e => e.CBelegDrucker)
                    .HasMaxLength(128)
                    .HasColumnName("cBelegDrucker");

                entity.Property(e => e.CBenutzerWeb)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerWeb");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPasswortWeb)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPasswortWeb");

                entity.Property(e => e.CServerWeb)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cServerWeb");

                entity.Property(e => e.KAlterShop).HasColumnName("kAlterShop");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");

                entity.Property(e => e.KWarenlagerRetoure).HasColumnName("kWarenlagerRetoure");

                entity.Property(e => e.KWarenlagerRetourePlatz).HasColumnName("kWarenlagerRetourePlatz");

                entity.Property(e => e.NAngebot).HasColumnName("nAngebot");

                entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");

                entity.Property(e => e.NHttpPut).HasColumnName("nHttpPut");

                entity.Property(e => e.NShopAuftragsNr).HasColumnName("nShopAuftragsNr");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NWarenlagerPlatztyp).HasColumnName("nWarenlagerPlatztyp");

                entity.Property(e => e.NWarenlagerRetourePlatztyp).HasColumnName("nWarenlagerRetourePlatztyp");
            });

            modelBuilder.Entity<TShopConnectorFunktion>(entity =>
            {
                entity.HasKey(e => e.KShop);

                entity.ToTable("tShopConnectorFunktion");

                entity.Property(e => e.KShop)
                    .ValueGeneratedNever()
                    .HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TShopConnectorSynchronisierung>(entity =>
            {
                entity.HasKey(e => new { e.KShop, e.NEntity });

                entity.ToTable("tShopConnectorSynchronisierung");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NEntity).HasColumnName("nEntity");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NPull).HasColumnName("nPull");

                entity.Property(e => e.NPush).HasColumnName("nPush");
            });

            modelBuilder.Entity<TShopKonfiguration>(entity =>
            {
                entity.HasKey(e => e.KShop);

                entity.ToTable("tShopKonfiguration");

                entity.Property(e => e.KShop)
                    .ValueGeneratedNever()
                    .HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CVersandlandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO");

                entity.Property(e => e.NArtikelMergen).HasColumnName("nArtikelMergen");

                entity.Property(e => e.NBilderBeiImportLoeschen).HasColumnName("nBilderBeiImportLoeschen");

                entity.Property(e => e.NHerstellerGefiltertSenden).HasColumnName("nHerstellerGefiltertSenden");

                entity.Property(e => e.NImport).HasColumnName("nImport");

                entity.Property(e => e.NImportArtikelKategorien).HasColumnName("nImportArtikelKategorien");

                entity.Property(e => e.NImportBestellungenKunden).HasColumnName("nImportBestellungenKunden");

                entity.Property(e => e.NImportBilder).HasColumnName("nImportBilder");

                entity.Property(e => e.NKundendatenAktualisieren).HasColumnName("nKundendatenAktualisieren");

                entity.Property(e => e.NMaxBilder)
                    .HasColumnName("nMaxBilder")
                    .HasDefaultValueSql("((10))");

                entity.Property(e => e.NMaxEntities)
                    .HasColumnName("nMaxEntities")
                    .HasDefaultValueSql("((10))");

                entity.Property(e => e.NMaxMb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMaxMB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NMaxPull)
                    .HasColumnName("nMaxPull")
                    .HasDefaultValueSql("((50))");

                entity.Property(e => e.NMaxQuickSync)
                    .HasColumnName("nMaxQuickSync")
                    .HasDefaultValueSql("((50))");

                entity.Property(e => e.NSteuerDurchWawiBerechnen).HasColumnName("nSteuerDurchWawiBerechnen");

                entity.Property(e => e.NUpload).HasColumnName("nUpload");

                entity.Property(e => e.NUploadArtikelBestand).HasColumnName("nUploadArtikelBestand");

                entity.Property(e => e.NUploadArtikelKomplett).HasColumnName("nUploadArtikelKomplett");

                entity.Property(e => e.NUploadArtikelPreise).HasColumnName("nUploadArtikelPreise");

                entity.Property(e => e.NUploadBilder).HasColumnName("nUploadBilder");

                entity.Property(e => e.NUploadKundendaten).HasColumnName("nUploadKundendaten");

                entity.Property(e => e.NVersandSteuernDurchWawiBerechnen).HasColumnName("nVersandSteuernDurchWawiBerechnen");
            });

            modelBuilder.Entity<TShopKundenGruppe>(entity =>
            {
                entity.HasKey(e => new { e.KWebShop, e.KKundenGruppe });

                entity.ToTable("tShopKundenGruppe");

                entity.Property(e => e.KWebShop).HasColumnName("kWebShop");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TShopMappingKundengruppe>(entity =>
            {
                entity.HasKey(e => new { e.KKundengruppe, e.KShop });

                entity.ToTable("tShopMappingKundengruppe");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CNameShop)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameShop");

                entity.Property(e => e.CPkshop)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cPKShop");
            });

            modelBuilder.Entity<TShopSprache>(entity =>
            {
                entity.HasKey(e => new { e.KWebShop, e.KSprache });

                entity.ToTable("tShopSprache");

                entity.Property(e => e.KWebShop).HasColumnName("kWebShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TShopSubshop>(entity =>
            {
                entity.HasKey(e => e.KShopSubshop);

                entity.ToTable("tShopSubshop");

                entity.Property(e => e.KShopSubshop).HasColumnName("kShopSubshop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAuthToken)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAuthToken");

                entity.Property(e => e.CIdentifier)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cIdentifier");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");

                entity.Property(e => e.NMaxLastChanged).HasColumnName("nMaxLastChanged");
            });

            modelBuilder.Entity<TShopWaehrung>(entity =>
            {
                entity.HasKey(e => new { e.KWebShop, e.KWaehrung });

                entity.ToTable("tShopWaehrung");

                entity.Property(e => e.KWebShop).HasColumnName("kWebShop");

                entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TSonderpreise>(entity =>
            {
                entity.HasKey(e => new { e.KArtikelSonderpreis, e.KKundenGruppe, e.KShop });

                entity.ToTable("tSonderpreise");

                entity.Property(e => e.KArtikelSonderpreis).HasColumnName("kArtikelSonderpreis");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FNettoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNettoPreis");
            });

            modelBuilder.Entity<TSpracheUsed>(entity =>
            {
                entity.HasKey(e => e.KSprache);

                entity.ToTable("tSpracheUsed");

                entity.HasIndex(e => new { e.NStandard, e.KSprache }, "IX_tSpracheUsed_kSprache_nStandard");

                entity.Property(e => e.KSprache)
                    .ValueGeneratedNever()
                    .HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CIso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CIso2)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("cISO2")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CKultur)
                    .HasMaxLength(20)
                    .HasColumnName("cKultur")
                    .IsFixedLength(true);

                entity.Property(e => e.CNameDeu)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameDeu");

                entity.Property(e => e.CNameEng)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameEng");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<TSprachen>(entity =>
            {
                entity.HasKey(e => e.KSprache);

                entity.ToTable("tSprachen");

                entity.HasIndex(e => e.CIso, "UQ_tSprachen_cISO")
                    .IsUnique();

                entity.HasIndex(e => e.CIso2, "UQ_tSprachen_cISO2")
                    .IsUnique();

                entity.Property(e => e.KSprache)
                    .ValueGeneratedNever()
                    .HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CIso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CIso2)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("cISO2")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.CKultur)
                    .HasMaxLength(20)
                    .HasColumnName("cKultur")
                    .IsFixedLength(true);

                entity.Property(e => e.CNameDeu)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameDeu");

                entity.Property(e => e.CNameEng)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameEng");
            });

            modelBuilder.Entity<TSqlError>(entity =>
            {
                entity.HasKey(e => e.KSqlError);

                entity.ToTable("tSqlError");

                entity.Property(e => e.KSqlError).HasColumnName("kSqlError");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CErrorData)
                    .HasColumnType("xml")
                    .HasColumnName("cErrorData");

                entity.Property(e => e.KErrorMessage).HasColumnName("kErrorMessage");

                entity.HasOne(d => d.KErrorMessageNavigation)
                    .WithMany(p => p.TSqlError)
                    .HasForeignKey(d => d.KErrorMessage)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tSqlError_kErrorMessage");
            });

            modelBuilder.Entity<TSqlErrorMessages>(entity =>
            {
                entity.HasKey(e => e.KErrorMessage);

                entity.ToTable("tSqlErrorMessages");

                entity.Property(e => e.KErrorMessage).HasColumnName("kErrorMessage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CErrorMessage)
                    .IsUnicode(false)
                    .HasColumnName("cErrorMessage");

                entity.Property(e => e.CExceptionName)
                    .IsRequired()
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cExceptionName");

                entity.Property(e => e.CSpName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSpName");
            });

            modelBuilder.Entity<TStampit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tStampit");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");
            });

            modelBuilder.Entity<TState>(entity =>
            {
                entity.HasKey(e => e.KState);

                entity.ToTable("tState", "Shipping");

                entity.Property(e => e.KState).HasColumnName("kState");

                entity.Property(e => e.CCountry)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cCountry");

                entity.Property(e => e.CLocation)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cLocation");

                entity.Property(e => e.CProviderState)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cProviderState");

                entity.Property(e => e.CText)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dDate");

                entity.Property(e => e.KPackage).HasColumnName("kPackage");

                entity.Property(e => e.KStateServer).HasColumnName("kStateServer");

                entity.Property(e => e.NStateType).HasColumnName("nStateType");

                entity.HasOne(d => d.KPackageNavigation)
                    .WithMany(p => p.TState)
                    .HasForeignKey(d => d.KPackage)
                    .HasConstraintName("FK_Shipping_tState_kPackage");
            });

            modelBuilder.Entity<TStatistikAuswertungstyp>(entity =>
            {
                entity.HasKey(e => e.KStatistikAuswertungstyp);

                entity.ToTable("tStatistikAuswertungstyp");

                entity.Property(e => e.KStatistikAuswertungstyp)
                    .ValueGeneratedNever()
                    .HasColumnName("kStatistikAuswertungstyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TStatistikBenutzerordner>(entity =>
            {
                entity.HasKey(e => e.KStatistikBenutzerordner);

                entity.ToTable("tStatistikBenutzerordner");

                entity.Property(e => e.KStatistikBenutzerordner).HasColumnName("kStatistikBenutzerordner");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KStatistikBenutzerordnerVater).HasColumnName("kStatistikBenutzerordnerVater");
            });

            modelBuilder.Entity<TStatistikEazyShipping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tStatistikEazyShipping", "WMS");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DEndZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dEndZeit");

                entity.Property(e => e.DMilliSec).HasColumnName("dMilliSec");

                entity.Property(e => e.DSekunden).HasColumnName("dSekunden");

                entity.Property(e => e.DStartZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartZeit");

                entity.Property(e => e.DTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimeStamp");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NAnzahlWarenlagerAusgaenge).HasColumnName("nAnzahlWarenlagerAusgaenge");

                entity.Property(e => e.NAnzahlWmspackItem).HasColumnName("nAnzahlWMSPackItem");

                entity.Property(e => e.NAnzahlWmspackItemData).HasColumnName("nAnzahlWMSPackItemData");
            });

            modelBuilder.Entity<TStatistikPicklisten>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tStatistikPicklisten", "WMS");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DEndZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dEndZeit");

                entity.Property(e => e.DMilliSec).HasColumnName("dMilliSec");

                entity.Property(e => e.DSekunden).HasColumnName("dSekunden");

                entity.Property(e => e.DStartZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartZeit");

                entity.Property(e => e.DTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimeStamp");

                entity.Property(e => e.KPicklisteVorlage).HasColumnName("kPicklisteVorlage");

                entity.Property(e => e.NAnzahlAuftraege).HasColumnName("nAnzahlAuftraege");
            });

            modelBuilder.Entity<TStatistikSteuerelement>(entity =>
            {
                entity.HasKey(e => new { e.KStatistikVorlage, e.CName });

                entity.ToTable("tStatistikSteuerelement");

                entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CValue)
                    .IsUnicode(false)
                    .HasColumnName("cValue");
            });

            modelBuilder.Entity<TStatistikVorlage>(entity =>
            {
                entity.HasKey(e => e.KStatistikVorlage);

                entity.ToTable("tStatistikVorlage");

                entity.HasIndex(e => e.KStatistikAuswertungstyp, "IX_tStatistikVorlage_kStatistikAuswertungstyp");

                entity.HasIndex(e => e.KStatistikVorlageOrdner, "IX_tStatistikVorlage_kStatistikVorlageOrdner");

                entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSpaltennameSeries)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSpaltennameSeries");

                entity.Property(e => e.CSpaltennameX)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSpaltennameX");

                entity.Property(e => e.CSql)
                    .IsUnicode(false)
                    .HasColumnName("cSQL");

                entity.Property(e => e.CZeitraum)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cZeitraum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KStatistikAuswertungstyp).HasColumnName("kStatistikAuswertungstyp");

                entity.Property(e => e.KStatistikVorlageOrdner).HasColumnName("kStatistikVorlageOrdner");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TStatistikVorlageChartEinstellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tStatistikVorlageChartEinstellung");

                entity.HasIndex(e => e.KStatistikVorlage, "IX_tStatistikVorlageChartEinstellung_kStatistikVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KStatistikVorlage).HasColumnName("kStatistikVorlage");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<TStatistikVorlageOrdner>(entity =>
            {
                entity.HasKey(e => e.KStatistikVorlageOrdner);

                entity.ToTable("tStatistikVorlageOrdner");

                entity.HasIndex(e => e.KStatistikVorlageOrdnerParent, "IX_tStatistikVorlageOrdner_kStatistikVorlageOrdnerParent");

                entity.Property(e => e.KStatistikVorlageOrdner).HasColumnName("kStatistikVorlageOrdner");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KStatistikVorlageOrdnerParent).HasColumnName("kStatistikVorlageOrdnerParent");

                entity.Property(e => e.NIntern).HasColumnName("nIntern");
            });

            modelBuilder.Entity<TStatistikvorlagenOrdnerzuordnung>(entity =>
            {
                entity.HasKey(e => new { e.KStatistikBenutzerordner, e.KStatistikvorlagenserialisierung });

                entity.ToTable("tStatistikvorlagenOrdnerzuordnung");

                entity.Property(e => e.KStatistikBenutzerordner).HasColumnName("kStatistikBenutzerordner");

                entity.Property(e => e.KStatistikvorlagenserialisierung).HasColumnName("kStatistikvorlagenserialisierung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TStatistikvorlagenserialisierung>(entity =>
            {
                entity.HasKey(e => e.KStatistikvorlagenserialisierung);

                entity.ToTable("tStatistikvorlagenserialisierung");

                entity.Property(e => e.KStatistikvorlagenserialisierung).HasColumnName("kStatistikvorlagenserialisierung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAuswertungsvorlage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cAuswertungsvorlage");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDarstellungsvorlage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cDarstellungsvorlage");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            });

            modelBuilder.Entity<TStatus>(entity =>
            {
                entity.HasKey(e => e.KStatus)
                    .HasName("PK_Ticketsystem_tStatus");

                entity.ToTable("tStatus", "Ticketsystem");

                entity.HasIndex(e => e.CName, "UQ_Ticketsystem_tStatus_cName")
                    .IsUnique();

                entity.Property(e => e.KStatus).HasColumnName("kStatus");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cName");

                entity.Property(e => e.NIsDefault).HasColumnName("nIsDefault");
            });

            modelBuilder.Entity<TSteuerSammelkonten>(entity =>
            {
                entity.HasKey(e => e.KSteuerSammelkonten);

                entity.ToTable("tSteuerSammelkonten");

                entity.Property(e => e.KSteuerSammelkonten).HasColumnName("kSteuerSammelkonten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSammelkonto)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cSammelkonto");
            });

            modelBuilder.Entity<TSteuercache>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tSteuercache");

                entity.HasIndex(e => new { e.KFirma, e.KSteuerklasse }, "IX_tSteuerCache_kSteuerklasse_kFirma_INCL");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FSteuersatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSteuersatz");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");
            });

            modelBuilder.Entity<TSteuerklasse>(entity =>
            {
                entity.HasKey(e => e.KSteuerklasse);

                entity.ToTable("tSteuerklasse");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TSteuersatz>(entity =>
            {
                entity.HasKey(e => e.KSteuersatz);

                entity.ToTable("tSteuersatz");

                entity.HasIndex(e => new { e.KSteuerzone, e.KSteuerklasse }, "UQ_tSteuersatz_kSteuerklasse_kSteuerzone")
                    .IsUnique();

                entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FSteuersatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSteuersatz");

                entity.Property(e => e.KStSchl).HasColumnName("kStSchl");

                entity.Property(e => e.KStSchlIgl).HasColumnName("kStSchlIGL");

                entity.Property(e => e.KStSchlUstIgl).HasColumnName("kStSchlUStIGL");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");

                entity.Property(e => e.NPrio).HasColumnName("nPrio");
            });

            modelBuilder.Entity<TSteuersatzschluessel>(entity =>
            {
                entity.HasKey(e => new { e.KSteuersatz, e.KWarengruppe, e.KVersandart, e.NPositionstyp });

                entity.ToTable("tSteuersatzschluessel");

                entity.Property(e => e.KSteuersatz).HasColumnName("kSteuersatz");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.NPositionstyp).HasColumnName("nPositionstyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KStSchlIgl).HasColumnName("kStSchlIGL");

                entity.Property(e => e.KStSchlUstIgl).HasColumnName("kStSchlUStIGL");

                entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");
            });

            modelBuilder.Entity<TSteuerschluessel>(entity =>
            {
                entity.HasKey(e => e.KSteuerschluessel);

                entity.ToTable("tSteuerschluessel");

                entity.HasIndex(e => e.NSchluesselnummer, "UQ_tSteuerschluessel_nSchluesselnummer")
                    .IsUnique();

                entity.Property(e => e.KSteuerschluessel).HasColumnName("kSteuerschluessel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnzahlungskonto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cAnzahlungskonto");

                entity.Property(e => e.CAusbuchungskonto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cAusbuchungskonto");

                entity.Property(e => e.CBonuskonto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cBonuskonto");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSkontokonto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cSkontokonto");

                entity.Property(e => e.CSteuerkonto)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cSteuerkonto");

                entity.Property(e => e.NAnzahlung).HasColumnName("nAnzahlung");

                entity.Property(e => e.NAutomatik).HasColumnName("nAutomatik");

                entity.Property(e => e.NSchluesselnummer).HasColumnName("nSchluesselnummer");
            });

            modelBuilder.Entity<TSteuerzone>(entity =>
            {
                entity.HasKey(e => e.KSteuerzone);

                entity.ToTable("tSteuerzone");

                entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");
            });

            modelBuilder.Entity<TSteuerzoneLand>(entity =>
            {
                entity.HasKey(e => new { e.KSteuerzone, e.CIso, e.CKuerzelBundesland })
                    .HasName("PK_tsteuerzoneland");

                entity.ToTable("tSteuerzoneLand");

                entity.Property(e => e.KSteuerzone).HasColumnName("kSteuerzone");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKuerzelBundesland)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cKuerzelBundesland");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TStockRef>(entity =>
            {
                entity.HasKey(e => e.KStockRef)
                    .HasName("PK_FulfillmentNetwork.tStockRef");

                entity.ToTable("tStockRef", "FulfillmentNetwork");

                entity.Property(e => e.KStockRef).HasColumnName("kStockRef");

                entity.Property(e => e.BRowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowVersion");

                entity.Property(e => e.CCharge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCharge");

                entity.Property(e => e.CFulfillerStockChangeId).HasColumnName("cFulfillerStockChangeId");

                entity.Property(e => e.CJfsku)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DCreatedAt).HasColumnName("dCreatedAt");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.NChangeState).HasColumnName("nChangeState");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.HasOne(d => d.KArtikelNavigation)
                    .WithMany(p => p.TStockRef)
                    .HasForeignKey(d => d.KArtikel);
            });

            modelBuilder.Entity<TStueckliste>(entity =>
            {
                entity.HasKey(e => new { e.KStueckliste, e.KArtikel });

                entity.ToTable("tStueckliste");

                entity.HasIndex(e => e.KArtikel, "IX_tStueckliste_kArtikel");

                entity.HasIndex(e => e.KStueckliste, "IX_tStueckliste_kStueckliste");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");
            });

            modelBuilder.Entity<TSubStatistikZustand>(entity =>
            {
                entity.HasKey(e => new { e.KBenutzer, e.KSubStatistik });

                entity.ToTable("tSubStatistikZustand");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KSubStatistik).HasColumnName("kSubStatistik");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWert)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cWert");
            });

            modelBuilder.Entity<TSubscriptionInformation>(entity =>
            {
                entity.HasKey(e => e.NShippingProduct)
                    .HasName("PK_Shipping_tSubscriptionInformation");

                entity.ToTable("tSubscriptionInformation", "Shipping");

                entity.Property(e => e.NShippingProduct)
                    .ValueGeneratedNever()
                    .HasColumnName("nShippingProduct");

                entity.Property(e => e.CSubscription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cSubscription");

                entity.Property(e => e.DNextUpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("dNextUpdate");

                entity.Property(e => e.NValid).HasColumnName("nValid");
            });

            modelBuilder.Entity<TSyncLogsitzung>(entity =>
            {
                entity.HasKey(e => e.KSyncLogsitzung)
                    .HasName("PK_Sync_tSyncLogsitzung");

                entity.ToTable("tSyncLogsitzung", "Sync");

                entity.Property(e => e.KSyncLogsitzung).HasColumnName("kSyncLogsitzung");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusMeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TSyncType>(entity =>
            {
                entity.HasKey(e => e.KSyncType);

                entity.ToTable("tSyncType", "Sync");

                entity.Property(e => e.KSyncType)
                    .ValueGeneratedNever()
                    .HasColumnName("kSyncType");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TTelefonat>(entity =>
            {
                entity.HasKey(e => e.KTelefonat)
                    .HasName("PK_Ticketsystem_tTelefonat");

                entity.ToTable("tTelefonat", "Ticketsystem");

                entity.Property(e => e.KTelefonat).HasColumnName("kTelefonat");

                entity.Property(e => e.CTelefonnummer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTelefonnummer");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.Property(e => e.NRichtung).HasColumnName("nRichtung");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TTelefonat)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tTelefonat_kFile_HtmlInhalt");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TTelefonat)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tTelefonat_kTicket");
            });

            modelBuilder.Entity<TTelefonatAnhang>(entity =>
            {
                entity.HasKey(e => e.KTelefonatAnhang)
                    .HasName("PK_Ticketsystem_tTelefonatAnhang");

                entity.ToTable("tTelefonatAnhang", "Ticketsystem");

                entity.HasIndex(e => new { e.KTelefonat, e.KAnhang }, "UQ_Ticketsystem_tTelefonatAnhang_kAnhang_kTelefonat")
                    .IsUnique();

                entity.Property(e => e.KTelefonatAnhang).HasColumnName("kTelefonatAnhang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAnhang).HasColumnName("kAnhang");

                entity.Property(e => e.KTelefonat).HasColumnName("kTelefonat");

                entity.HasOne(d => d.KAnhangNavigation)
                    .WithMany(p => p.TTelefonatAnhang)
                    .HasForeignKey(d => d.KAnhang)
                    .HasConstraintName("FK_Ticketsystem_tTelefonatAnhang_kAnhang");

                entity.HasOne(d => d.KTelefonatNavigation)
                    .WithMany(p => p.TTelefonatAnhang)
                    .HasForeignKey(d => d.KTelefonat)
                    .HasConstraintName("FK_Ticketsystem_tTelefonatAnhang_kTelefonat");
            });

            modelBuilder.Entity<TTelefonatEntwurf>(entity =>
            {
                entity.HasKey(e => e.KTelefonatEntwurf)
                    .HasName("PK_Ticketsystem_tTelefonatEntwurf");

                entity.ToTable("tTelefonatEntwurf", "Ticketsystem");

                entity.HasIndex(e => new { e.KTicket, e.KBenutzer }, "UQ_Ticketsystem_tTelefonatEntwurf_kTicket_kBenutzer")
                    .IsUnique();

                entity.Property(e => e.KTelefonatEntwurf).HasColumnName("kTelefonatEntwurf");

                entity.Property(e => e.CTelefonnummer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTelefonnummer");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.Property(e => e.NRichtung).HasColumnName("nRichtung");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TTelefonatEntwurf)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurf_kFile_HtmlInhalt");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TTelefonatEntwurf)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurf_kTicket");
            });

            modelBuilder.Entity<TTelefonatEntwurfAnhang>(entity =>
            {
                entity.HasKey(e => e.KTelefonatEntwurfAnhang)
                    .HasName("PK_Ticketsystem_tTelefonatEntwurfAnhang");

                entity.ToTable("tTelefonatEntwurfAnhang", "Ticketsystem");

                entity.Property(e => e.KTelefonatEntwurfAnhang).HasColumnName("kTelefonatEntwurfAnhang");

                entity.Property(e => e.KAnhang).HasColumnName("kAnhang");

                entity.Property(e => e.KTelefonatEntwurf).HasColumnName("kTelefonatEntwurf");

                entity.HasOne(d => d.KAnhangNavigation)
                    .WithMany(p => p.TTelefonatEntwurfAnhang)
                    .HasForeignKey(d => d.KAnhang)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurfAnhang_kAnhang");

                entity.HasOne(d => d.KTelefonatEntwurfNavigation)
                    .WithMany(p => p.TTelefonatEntwurfAnhang)
                    .HasForeignKey(d => d.KTelefonatEntwurf)
                    .HasConstraintName("FK_Ticketsystem_tTelefonatEntwurfAnhang_kTelefonatEntwurf");
            });

            modelBuilder.Entity<TText>(entity =>
            {
                entity.HasKey(e => e.KText);

                entity.ToTable("tText");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CFontName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFontName");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cType")
                    .IsFixedLength(true);

                entity.Property(e => e.NFontSize).HasColumnName("nFontSize");
            });

            modelBuilder.Entity<TTextFiltersSplitStreetExceptions>(entity =>
            {
                entity.HasKey(e => new { e.CIso, e.CException });

                entity.ToTable("tTextFiltersSplitStreetExceptions");

                entity.Property(e => e.CIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("cIso");

                entity.Property(e => e.CException)
                    .HasMaxLength(800)
                    .IsUnicode(false)
                    .HasColumnName("cException");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TTextFiltersSplitStreetExpressions>(entity =>
            {
                entity.HasKey(e => e.CIso);

                entity.ToTable("tTextFiltersSplitStreetExpressions");

                entity.Property(e => e.CIso)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("cIso");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRegEx)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cRegEx");
            });

            modelBuilder.Entity<TTexteMitValues>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tTexteMitValues", "WMS");

                entity.HasIndex(e => e.KSessionId, "IX_tTexteMitValues_kSessionID")
                    .IsClustered();

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CValue1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue1");

                entity.Property(e => e.CValue2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue2");

                entity.Property(e => e.CValue3)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue3");

                entity.Property(e => e.CValue4)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue4");

                entity.Property(e => e.CValue5)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue5");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionID");

                entity.Property(e => e.NTextId).HasColumnName("nTextID");

                entity.Property(e => e.NValue1).HasColumnName("nValue1");

                entity.Property(e => e.NValue2).HasColumnName("nValue2");
            });

            modelBuilder.Entity<TTicket>(entity =>
            {
                entity.HasKey(e => e.KTicket)
                    .HasName("PK_Ticketsystem_tTicket");

                entity.ToTable("tTicket", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzerBearbeiter, "IX_Ticketsystem_tTicket_kBenutzerBearbeiter");

                entity.HasIndex(e => e.KBenutzerErsteller, "IX_Ticketsystem_tTicket_kBenutzerErsteller");

                entity.HasIndex(e => e.KKunde, "IX_Ticketsystem_tTicket_kKunde");

                entity.HasIndex(e => e.NIstInPapierkorb, "IX_Ticketsystem_tTicket_nIstInPapierkorb");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEindeutigeId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEindeutigeId");

                entity.Property(e => e.DAenderung)
                    .HasColumnType("datetime")
                    .HasColumnName("dAenderung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DErstellung)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellung")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DFaelligAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dFaelligAm");

                entity.Property(e => e.DLoesung)
                    .HasColumnType("datetime")
                    .HasColumnName("dLoesung");

                entity.Property(e => e.DWiedervorlage)
                    .HasColumnType("datetime")
                    .HasColumnName("dWiedervorlage");

                entity.Property(e => e.KBenutzerBearbeiter).HasColumnName("kBenutzer_Bearbeiter");

                entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NBenutzererstellt).HasColumnName("nBenutzererstellt");

                entity.Property(e => e.NIstInPapierkorb).HasColumnName("nIstInPapierkorb");

                entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.HasOne(d => d.KKundeNavigation)
                    .WithMany(p => p.TTicket)
                    .HasForeignKey(d => d.KKunde)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Ticketsystem_tTicket_kKunde");

                entity.HasOne(d => d.KLieferantNavigation)
                    .WithMany(p => p.TTicket)
                    .HasForeignKey(d => d.KLieferant)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Ticketsystem_tTicket_kLieferant");

                entity.HasOne(d => d.NStatusNavigation)
                    .WithMany(p => p.TTicket)
                    .HasForeignKey(d => d.NStatus)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tTicket_nStatus");
            });

            modelBuilder.Entity<TTicketBeobachter>(entity =>
            {
                entity.HasKey(e => e.KTicketBeobachter)
                    .HasName("PK_Ticketsystem_tTicketBeobachter");

                entity.ToTable("tTicketBeobachter", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tTicketBeobachter_kBenutzer");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tTicketBeobachter_kTicket");

                entity.HasIndex(e => new { e.KBenutzer, e.KTicket }, "UQ_Ticketsystem_tTicketBeobachter_kBenutzer_kTicket")
                    .IsUnique();

                entity.Property(e => e.KTicketBeobachter).HasColumnName("kTicketBeobachter");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TTicketBeobachter)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tTicketBeobachter_kTicket");
            });

            modelBuilder.Entity<TTicketEckdaten>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tTicketEckdaten", "Ticketsystem");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tTicketEckdaten_kTicket")
                    .IsClustered();

                entity.Property(e => e.CAbsenderErsteNachricht)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbsenderErsteNachricht");

                entity.Property(e => e.CInhaltErsteNachricht)
                    .IsRequired()
                    .HasColumnName("cInhaltErsteNachricht");

                entity.Property(e => e.CTitelErsteNachricht)
                    .HasMaxLength(998)
                    .IsUnicode(false)
                    .HasColumnName("cTitelErsteNachricht");

                entity.Property(e => e.DEmpfangLetzteNachricht)
                    .HasColumnType("datetime")
                    .HasColumnName("dEmpfangLetzteNachricht");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.Property(e => e.NAnzahlAnhaenge).HasColumnName("nAnzahlAnhaenge");

                entity.Property(e => e.NAnzahlNachrichten).HasColumnName("nAnzahlNachrichten");

                entity.Property(e => e.NRichtungLetzteNachricht).HasColumnName("nRichtungLetzteNachricht");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tTicketEckdaten_kTicket");
            });

            modelBuilder.Entity<TTicketLabel>(entity =>
            {
                entity.HasKey(e => e.KTicketLabel)
                    .HasName("PK_Ticketsystem_tTicketLabel");

                entity.ToTable("tTicketLabel", "Ticketsystem");

                entity.HasIndex(e => e.KLabel, "IX_Ticketsystem_tTicketLabel_kLabel");

                entity.HasIndex(e => e.KTicket, "IX_Ticketsystem_tTicketLabel_kTicket");

                entity.HasIndex(e => new { e.KLabel, e.KTicket }, "UQ_Ticketsystem_tTicketLabel_kLabel_kTicket")
                    .IsUnique();

                entity.Property(e => e.KTicketLabel).HasColumnName("kTicketLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.KTicket).HasColumnName("kTicket");

                entity.HasOne(d => d.KLabelNavigation)
                    .WithMany(p => p.TTicketLabel)
                    .HasForeignKey(d => d.KLabel)
                    .HasConstraintName("FK_Ticketsystem_tTicketLabel_kLabel");

                entity.HasOne(d => d.KTicketNavigation)
                    .WithMany(p => p.TTicketLabel)
                    .HasForeignKey(d => d.KTicket)
                    .HasConstraintName("FK_Ticketsystem_tTicketLabel_kTicket");
            });

            modelBuilder.Entity<TTicketRelation>(entity =>
            {
                entity.HasKey(e => e.KTicketRelation)
                    .HasName("PK_Ticketsystem_tTicketRelation");

                entity.ToTable("tTicketRelation", "Ticketsystem");

                entity.HasIndex(e => e.KBasisticket, "IX_Ticketsystem_tTicketRelation_kBasisticket");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tTicketRelation_kBenutzer");

                entity.HasIndex(e => e.KVerknuepftesTicket, "IX_Ticketsystem_tTicketRelation_kVerknuepftesTicket");

                entity.Property(e => e.KTicketRelation).HasColumnName("kTicketRelation");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBasisticket).HasColumnName("kBasisticket");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KVerknuepftesTicket).HasColumnName("kVerknuepftesTicket");

                entity.HasOne(d => d.KBasisticketNavigation)
                    .WithMany(p => p.TTicketRelationKBasisticketNavigation)
                    .HasForeignKey(d => d.KBasisticket)
                    .HasConstraintName("FK_Ticketsystem_tTicketRelation_kTicketA");

                entity.HasOne(d => d.KVerknuepftesTicketNavigation)
                    .WithMany(p => p.TTicketRelationKVerknuepftesTicketNavigation)
                    .HasForeignKey(d => d.KVerknuepftesTicket)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tTicketRelation_kTicketB");
            });

            modelBuilder.Entity<TTrackAndTraceConfiguration>(entity =>
            {
                entity.HasKey(e => e.KVersandart)
                    .HasName("PK_Shipping_tTrackAndTraceConfiguration");

                entity.ToTable("tTrackAndTraceConfiguration", "Shipping");

                entity.Property(e => e.KVersandart)
                    .ValueGeneratedNever()
                    .HasColumnName("kVersandart");

                entity.Property(e => e.NIsEnabled).HasColumnName("nIsEnabled");

                entity.Property(e => e.NTrackAndTraceProviderType).HasColumnName("nTrackAndTraceProviderType");

                entity.HasOne(d => d.KVersandartNavigation)
                    .WithOne(p => p.TTrackAndTraceConfiguration)
                    .HasForeignKey<TTrackAndTraceConfiguration>(d => d.KVersandart)
                    .HasConstraintName("FK_Shipping_tTrackAndTraceConfiguration_tversandart");
            });

            modelBuilder.Entity<TTrackingLogs>(entity =>
            {
                entity.HasKey(e => e.KTrackingLog);

                entity.ToTable("tTrackingLogs", "Shipping");

                entity.Property(e => e.KTrackingLog).HasColumnName("kTrackingLog");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CMessage)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.CStackTrace)
                    .IsUnicode(false)
                    .HasColumnName("cStackTrace");

                entity.Property(e => e.DDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dDateTime");
            });

            modelBuilder.Entity<TUmlagerung>(entity =>
            {
                entity.HasKey(e => e.KUmlagerung);

                entity.ToTable("tUmlagerung");

                entity.HasIndex(e => new { e.KBestellung, e.KQuellLager }, "IX_tUmlagerung_kBestellung_kQuellLager");

                entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KQuellLager).HasColumnName("kQuellLager");

                entity.Property(e => e.KStreckenLager).HasColumnName("kStreckenLager");

                entity.Property(e => e.KZielLager).HasColumnName("kZielLager");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TUmsatzSteuerPruefung>(entity =>
            {
                entity.HasKey(e => new { e.KKunde, e.CUstid });

                entity.ToTable("tUmsatzSteuerPruefung", "Kunde");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DErfolgreichGerpueft)
                    .HasColumnType("datetime")
                    .HasColumnName("dErfolgreichGerpueft");
            });

            modelBuilder.Entity<TUmsatzzuordnungLog>(entity =>
            {
                entity.HasKey(e => e.KUmsatzzuordnungLog);

                entity.ToTable("tUmsatzzuordnungLog");

                entity.Property(e => e.KUmsatzzuordnungLog).HasColumnName("kUmsatzzuordnungLog");

                entity.Property(e => e.CDaten)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cDaten");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");
            });

            modelBuilder.Entity<TUniqueSession>(entity =>
            {
                entity.HasKey(e => e.KSession)
                    .HasName("PK_tSession");

                entity.ToTable("tUniqueSession");

                entity.Property(e => e.KSession).HasColumnName("kSession");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CContext)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cContext");

                entity.Property(e => e.CInfo)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cInfo");

                entity.Property(e => e.CRechnername)
                    .HasMaxLength(64)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.DLastCallback)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastCallback");
            });

            modelBuilder.Entity<TUpdateInfo>(entity =>
            {
                entity.HasKey(e => e.KUpdateInfo);

                entity.ToTable("tUpdateInfo");

                entity.Property(e => e.KUpdateInfo).HasColumnName("kUpdateInfo");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKey)
                    .IsRequired()
                    .HasColumnName("cKey");

                entity.Property(e => e.CValueNew).HasColumnName("cValueNew");

                entity.Property(e => e.CValueOld).HasColumnName("cValueOld");

                entity.Property(e => e.NVorgang).HasColumnName("nVorgang");
            });

            modelBuilder.Entity<TUpdateLog>(entity =>
            {
                entity.HasKey(e => e.KUpdateLog);

                entity.ToTable("tUpdateLog");

                entity.Property(e => e.KUpdateLog).HasColumnName("kUpdateLog");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.CModul)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cModul");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");
            });

            modelBuilder.Entity<TUserControlSetting>(entity =>
            {
                entity.HasKey(e => new { e.KBenutzer, e.CName, e.CNameTopLevelControl });

                entity.ToTable("tUserControlSetting");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameTopLevelControl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameTopLevelControl");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NSetting).HasColumnName("nSetting");
            });

            modelBuilder.Entity<TUserLayout>(entity =>
            {
                entity.HasKey(e => e.KUserLayout);

                entity.ToTable("tUserLayout");

                entity.Property(e => e.KUserLayout).HasColumnName("kUserLayout");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            });

            modelBuilder.Entity<TUserSetting>(entity =>
            {
                entity.HasKey(e => e.KUserSetting);

                entity.ToTable("tUserSetting");

                entity.HasIndex(e => new { e.KBenutzer, e.CName }, "UQ_tUserSetting_Id");

                entity.Property(e => e.KUserSetting).HasColumnName("kUserSetting");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");
            });

            modelBuilder.Entity<TUserType>(entity =>
            {
                entity.HasKey(e => e.KUserType)
                    .HasName("PK_FulfillmentNetwork.tUserType");

                entity.ToTable("tUserType", "FulfillmentNetwork");

                entity.Property(e => e.KUserType)
                    .ValueGeneratedNever()
                    .HasColumnName("kUserType");

                entity.Property(e => e.CId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cId");
            });

            modelBuilder.Entity<TVaterLabelLabel>(entity =>
            {
                entity.HasKey(e => e.KVaterLabelLabel)
                    .HasName("PK_Ticketsystem_tVaterLabelLabel");

                entity.ToTable("tVaterLabelLabel", "Ticketsystem");

                entity.HasIndex(e => e.KLabel, "IX_Ticketsystem_tVaterLabelLabel_kLabel");

                entity.HasIndex(e => e.KVater, "IX_Ticketsystem_tVaterLabelLabel_kVater");

                entity.HasIndex(e => new { e.KLabel, e.KVater }, "UQ_Ticketsystem_tVaterLabelLabel_kLabel_kVater")
                    .IsUnique();

                entity.Property(e => e.KVaterLabelLabel).HasColumnName("kVaterLabelLabel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KLabel).HasColumnName("kLabel");

                entity.Property(e => e.KVater).HasColumnName("kVater");

                entity.HasOne(d => d.KLabelNavigation)
                    .WithMany(p => p.TVaterLabelLabelKLabelNavigation)
                    .HasForeignKey(d => d.KLabel)
                    .HasConstraintName("FK_Ticketsystem_tVaterLabelLabel_kLabel");

                entity.HasOne(d => d.KVaterNavigation)
                    .WithMany(p => p.TVaterLabelLabelKVaterNavigation)
                    .HasForeignKey(d => d.KVater)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tVaterLabelLabel_kVater");
            });

            modelBuilder.Entity<TVcsSelfInvoice>(entity =>
            {
                entity.HasKey(e => e.KVcsdata)
                    .HasName("PK_VcsSelfInvoice");

                entity.ToTable("tVcsSelfInvoice", "Amazon");

                entity.Property(e => e.KVcsdata).HasColumnName("kVCSData");

                entity.Property(e => e.Asin)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.BillAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BillPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BillState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillingName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillingPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCompanyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerVatNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CWawiRechnungskorrekturnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cWawiRechnungskorrekturnummer");

                entity.Property(e => e.CWawiRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cWawiRechnungsnummer");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FulfilledBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GiftPromotionID");

                entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatusDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsBusinessOrder)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ItemPromotionID");

                entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.LegacyCustomerOrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MarketplaceId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MarketplaceID");

                entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OrderItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderItemID");

                entity.Property(e => e.PriceDesignation)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseOrderNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecommendedInvoiceFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellerVatNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ShipPromotionID");

                entity.Property(e => e.ShipServiceLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingDate).HasColumnType("datetime");

                entity.Property(e => e.ShippingId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ShippingID");

                entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TVcsSelfInvoiceHistory>(entity =>
            {
                entity.HasKey(e => e.KVcsdata)
                    .HasName("PK_VcsSelfInvoiceHistory");

                entity.ToTable("tVcsSelfInvoiceHistory", "Amazon");

                entity.Property(e => e.KVcsdata)
                    .ValueGeneratedNever()
                    .HasColumnName("kVCSData");

                entity.Property(e => e.Asin)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.BillAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.BillPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.BillState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BillingName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillingPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerCompanyName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BuyerVatNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.CWawiRechnungskorrekturnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cWawiRechnungskorrekturnummer");

                entity.Property(e => e.CWawiRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cWawiRechnungsnummer");

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.Currency)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FulfilledBy)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GiftPromoVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromoVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromoVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromoVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("GiftPromotionID");

                entity.Property(e => e.GiftWrapVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftWrapVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftWrapVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.GiftWrapVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.InvoiceStatusDescription)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IsBusinessOrder)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ItemPromoVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromoVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromoVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromoVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ItemPromotionID");

                entity.Property(e => e.ItemVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ItemVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.LegacyCustomerOrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MarketplaceId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("MarketplaceID");

                entity.Property(e => e.NUploadVersuche).HasColumnName("nUploadVersuche");

                entity.Property(e => e.OrderDate).HasColumnType("datetime");

                entity.Property(e => e.OrderId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderID");

                entity.Property(e => e.OrderItemId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OrderItemID");

                entity.Property(e => e.PriceDesignation)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ProductName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PurchaseOrderNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityPurchased).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RecommendedInvoiceFormat)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SellerVatNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipAddress1)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipAddress2)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipAddress3)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ShipCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromCountry)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipFromState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipPhoneNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShipPostalCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ShipPromotionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ShipPromotionID");

                entity.Property(e => e.ShipServiceLevel)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ShipState)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ShippingDate).HasColumnType("datetime");

                entity.Property(e => e.ShippingId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ShippingID");

                entity.Property(e => e.ShippingPromoVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingPromoVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingPromoVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingPromoVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatExclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatInclAmount).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingVatRate).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Sku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("SKU");

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TransactionID");

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<TVcsSelfInvoicePosMapping>(entity =>
            {
                entity.HasKey(e => new { e.KAmazonBestellungPos, e.KBestellPos, e.KVcsdata })
                    .HasName("PK_Amazon_tVcsSelfInvoicePosMapping");

                entity.ToTable("tVcsSelfInvoicePosMapping", "Amazon");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KVcsdata).HasColumnName("kVCSData");

                entity.Property(e => e.NQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nQuantity");
            });

            modelBuilder.Entity<TVcsUploadData>(entity =>
            {
                entity.HasKey(e => e.KVcsUploadData)
                    .HasName("PK_Amazon_tVcsUploadData");

                entity.ToTable("tVcsUploadData", "Amazon");

                entity.Property(e => e.KVcsUploadData).HasColumnName("kVcsUploadData");

                entity.Property(e => e.BData).HasColumnName("bData");

                entity.Property(e => e.CFileHash)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFileHash");

                entity.Property(e => e.CFileName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFileName");

                entity.Property(e => e.DErstellDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellDatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.NFileSizeKb).HasColumnName("nFileSizeKB");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TVcsUploadDataQueue>(entity =>
            {
                entity.HasKey(e => e.KVcsUploadDataQueue);

                entity.ToTable("tVcsUploadDataQueue", "Amazon");

                entity.Property(e => e.KVcsUploadDataQueue).HasColumnName("kVcsUploadDataQueue");

                entity.Property(e => e.CShippingId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShippingID");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionId");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NVersuche).HasColumnName("nVersuche");
            });

            modelBuilder.Entity<TVcsselfInvoiceLogeintrag>(entity =>
            {
                entity.HasKey(e => e.KVcsselfInvoiceLogeintrag);

                entity.ToTable("tVCSSelfInvoiceLogeintrag", "Amazon");

                entity.Property(e => e.KVcsselfInvoiceLogeintrag).HasColumnName("kVCSSelfInvoiceLogeintrag");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KAmazonabgleichLogsitzung).HasColumnName("kAmazonabgleichLogsitzung");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.Property(e => e.NVorgang).HasColumnName("nVorgang");

                entity.HasOne(d => d.KAmazonabgleichLogsitzungNavigation)
                    .WithMany(p => p.TVcsselfInvoiceLogeintrag)
                    .HasForeignKey(d => d.KAmazonabgleichLogsitzung)
                    .HasConstraintName("FK_tVCSSelfInvoiceLogeintrag_kAmazonabgleichLogsitzung");
            });

            modelBuilder.Entity<TVerfuegbarkeitsAnfrage>(entity =>
            {
                entity.HasKey(e => e.KVerfuegbarkeitsanfrage);

                entity.ToTable("tVerfuegbarkeitsAnfrage");

                entity.HasIndex(e => e.KArtikel, "IX_tVerfuegbarkeitsAnfrage_kArtikel");

                entity.Property(e => e.KVerfuegbarkeitsanfrage).HasColumnName("kVerfuegbarkeitsanfrage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.DBenachrichtigtAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dBenachrichtigtAm");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KInetVerfuegbarkeit).HasColumnName("kInetVerfuegbarkeit");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TVersand>(entity =>
            {
                entity.HasKey(e => e.KVersand);

                entity.ToTable("tVersand");

                entity.HasIndex(e => e.CIdentCode, "IX_Versand_cIdentCode");

                entity.HasIndex(e => e.DVersendet, "IX_tVersand_dVersendet");

                entity.HasIndex(e => e.KLieferschein, "IX_tVersand_kLieferschein");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEnclosedReturnIdentCode)
                    .HasMaxLength(255)
                    .HasColumnName("cEnclosedReturnIdentCode");

                entity.Property(e => e.CFulfillmentCenter)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenter");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CIdentCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CLogistiker)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLogistiker");

                entity.Property(e => e.CReference)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cReference");

                entity.Property(e => e.CShipmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShipmentId");

                entity.Property(e => e.CShipmentOrderId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cShipmentOrderId");

                entity.Property(e => e.DAnkunftszeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnkunftszeit");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DVersendet)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersendet");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLogistik).HasColumnName("kLogistik");

                entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NVerpackZeitSek).HasColumnName("nVerpackZeitSek");

                entity.Property(e => e.NViaAmazonMws).HasColumnName("nViaAmazonMWS");
            });

            modelBuilder.Entity<TVersandInfo>(entity =>
            {
                entity.HasKey(e => e.KBestellung)
                    .HasName("PK_dbo_tVersandInfo");

                entity.ToTable("tVersandInfo");

                entity.Property(e => e.KBestellung)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DVersanddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersanddatum");

                entity.Property(e => e.NAnzahlPakete).HasColumnName("nAnzahlPakete");

                entity.Property(e => e.NAnzahlVersendetePakete).HasColumnName("nAnzahlVersendetePakete");
            });

            modelBuilder.Entity<TVersandKonfiguration>(entity =>
            {
                entity.HasKey(e => e.KVersandKonfiguration);

                entity.ToTable("tVersandKonfiguration");

                entity.Property(e => e.KVersandKonfiguration).HasColumnName("kVersandKonfiguration");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBenutzer)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzer");

                entity.Property(e => e.CFirmen)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cFirmen");

                entity.Property(e => e.CKundengruppen)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppen");

                entity.Property(e => e.CLaenderListeIso)
                    .IsUnicode(false)
                    .HasColumnName("cLaenderListeISO");

                entity.Property(e => e.CName)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPlattformen)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cPlattformen");

                entity.Property(e => e.CShops)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cShops");

                entity.Property(e => e.CText)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CVersandartListe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartListe");

                entity.Property(e => e.CVersandklassen)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cVersandklassen");

                entity.Property(e => e.CWarengruppen)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cWarengruppen");

                entity.Property(e => e.CZahlungsarten)
                    .HasMaxLength(3000)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsarten");

                entity.Property(e => e.FGewichtMax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtMax");

                entity.Property(e => e.FGewichtMin)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtMin");

                entity.Property(e => e.FWertBis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertBis");

                entity.Property(e => e.FWertVon)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertVon");

                entity.Property(e => e.KFormular).HasColumnName("kFormular");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NAlleOhneVersandart).HasColumnName("nAlleOhneVersandart");

                entity.Property(e => e.NAlleOhneWarengruppe).HasColumnName("nAlleOhneWarengruppe");

                entity.Property(e => e.NAlleOhneZahlungsart).HasColumnName("nAlleOhneZahlungsart");

                entity.Property(e => e.NAnzahl).HasColumnName("nAnzahl");

                entity.Property(e => e.NAnzahlProPaket).HasColumnName("nAnzahlProPaket");

                entity.Property(e => e.NArt).HasColumnName("nArt");

                entity.Property(e => e.NArtikelBreiteBis).HasColumnName("nArtikelBreiteBis");

                entity.Property(e => e.NArtikelBreiteVon).HasColumnName("nArtikelBreiteVon");

                entity.Property(e => e.NArtikelHoeheBis).HasColumnName("nArtikelHoeheBis");

                entity.Property(e => e.NArtikelHoeheVon).HasColumnName("nArtikelHoeheVon");

                entity.Property(e => e.NArtikelLaengeBis).HasColumnName("nArtikelLaengeBis");

                entity.Property(e => e.NArtikelLaengeVon).HasColumnName("nArtikelLaengeVon");

                entity.Property(e => e.NArtikelZustandFilter).HasColumnName("nArtikelZustandFilter");

                entity.Property(e => e.NAuftragsArt).HasColumnName("nAuftragsArt");

                entity.Property(e => e.NAusfuehrungBei).HasColumnName("nAusfuehrungBei");

                entity.Property(e => e.NDiffAdressRechnungLieferschein).HasColumnName("nDiffAdressRechnungLieferschein");

                entity.Property(e => e.NEigeneFelderFilter).HasColumnName("nEigeneFelderFilter");

                entity.Property(e => e.NEnthaeltArtAusWarengruppe).HasColumnName("nEnthaeltArtAusWarengruppe");

                entity.Property(e => e.NLandTyp).HasColumnName("nLandTyp");

                entity.Property(e => e.NVorgang)
                    .HasColumnName("nVorgang")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TVersandKonfigurationArtikelZustand>(entity =>
            {
                entity.HasKey(e => new { e.KVersandKonfiguration, e.KZustand });

                entity.ToTable("tVersandKonfigurationArtikelZustand");

                entity.Property(e => e.KVersandKonfiguration).HasColumnName("kVersandKonfiguration");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<TVersandKonfigurationEigeneFelder>(entity =>
            {
                entity.HasKey(e => new { e.KVersandKonfiguration, e.KAttribut })
                    .HasName("PK_tVersandKonfigurationEigeneFelder_kVersandKonfiguration_kAttribut");

                entity.ToTable("tVersandKonfigurationEigeneFelder");

                entity.Property(e => e.KVersandKonfiguration).HasColumnName("kVersandKonfiguration");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWert).HasColumnName("cWert");

                entity.Property(e => e.DWertDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dWertDateTime");

                entity.Property(e => e.FWertDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertDecimal");

                entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
            });

            modelBuilder.Entity<TVersandPos>(entity =>
            {
                entity.HasKey(e => new { e.KVersand, e.KLieferscheinPos });

                entity.ToTable("tVersandPos");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");
            });

            modelBuilder.Entity<TVersandVorlage>(entity =>
            {
                entity.HasKey(e => e.KVersandVorlage);

                entity.ToTable("tVersandVorlage");

                entity.Property(e => e.KVersandVorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kVersandVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDateFormat)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDateFormat");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTrennzeichen)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cTrennzeichen");

                entity.Property(e => e.DErstellt)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KLogistik).HasColumnName("kLogistik");

                entity.Property(e => e.NAbZeile).HasColumnName("nAbZeile");

                entity.Property(e => e.NIdentcode).HasColumnName("nIdentcode");

                entity.Property(e => e.NIntKey).HasColumnName("nIntKey");

                entity.Property(e => e.NLieferscheinNr).HasColumnName("nLieferscheinNr");

                entity.Property(e => e.NReserved).HasColumnName("nReserved");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NVersandInfo).HasColumnName("nVersandInfo");

                entity.Property(e => e.NVersandt).HasColumnName("nVersandt");
            });

            modelBuilder.Entity<TVersandartSprache>(entity =>
            {
                entity.HasKey(e => new { e.KVersandart, e.KSprache });

                entity.ToTable("tVersandartSprache");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAuftragsText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsText");

                entity.Property(e => e.CDruckText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckText");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TVersanddatenExportVorlage>(entity =>
            {
                entity.HasKey(e => e.KVersanddatenExportVorlage);

                entity.ToTable("tVersanddatenExportVorlage");

                entity.Property(e => e.KVersanddatenExportVorlage).HasColumnName("kVersanddatenExportVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CContentXml)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cContentXml");

                entity.Property(e => e.CFilenameTemplate)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFilenameTemplate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPathTemplate)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPathTemplate")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.KAdressExportVorlage).HasColumnName("kAdressExportVorlage");

                entity.Property(e => e.NExistingFileAction).HasColumnName("nExistingFileAction");

                entity.Property(e => e.NExpertenmodus).HasColumnName("nExpertenmodus");
            });

            modelBuilder.Entity<TVersanddatenImportVorlage>(entity =>
            {
                entity.HasKey(e => e.KVersanddatenImportVorlage);

                entity.ToTable("tVersanddatenImportVorlage");

                entity.Property(e => e.KVersanddatenImportVorlage).HasColumnName("kVersanddatenImportVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDatumsFormat)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDatumsFormat");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTrennzeichen)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTrennzeichen")
                    .IsFixedLength(true);

                entity.Property(e => e.NKopfzeilen).HasColumnName("nKopfzeilen");

                entity.Property(e => e.NSpalteId).HasColumnName("nSpalteId");

                entity.Property(e => e.NSpalteTrackingNummer).HasColumnName("nSpalteTrackingNummer");

                entity.Property(e => e.NSpalteVersandDatum).HasColumnName("nSpalteVersandDatum");

                entity.Property(e => e.NSpalteVersandInfo).HasColumnName("nSpalteVersandInfo");
            });

            modelBuilder.Entity<TVersandklasse>(entity =>
            {
                entity.HasKey(e => e.KVersandklasse);

                entity.ToTable("tVersandklasse");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName")
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<TVersandlager>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tVersandlager", "Versand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TVersandschnittstellenKonfiguration>(entity =>
            {
                entity.HasKey(e => new { e.KVersandArt, e.CKey });

                entity.ToTable("tVersandschnittstellenKonfiguration");

                entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");

                entity.Property(e => e.CKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CValue)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cValue");
            });

            modelBuilder.Entity<TVersandtoolDruckEinstellung>(entity =>
            {
                entity.HasKey(e => e.KVersandtoolDruckEinstellung);

                entity.ToTable("tVersandtoolDruckEinstellung");

                entity.Property(e => e.KVersandtoolDruckEinstellung).HasColumnName("kVersandtoolDruckEinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDruckername)
                    .IsRequired()
                    .HasColumnName("cDruckername");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NOrientation).HasColumnName("nOrientation");

                entity.Property(e => e.NPageScaling).HasColumnName("nPageScaling");

                entity.Property(e => e.NVersandSchnittstelle).HasColumnName("nVersandSchnittstelle");
            });

            modelBuilder.Entity<TVertrauenswuerdigerAbsender>(entity =>
            {
                entity.HasKey(e => e.KVertrauenswuerdigerAbsender)
                    .HasName("PK_Ticketsystem_tVertrauenswuerdigerAbsender");

                entity.ToTable("tVertrauenswuerdigerAbsender", "Ticketsystem");

                entity.Property(e => e.KVertrauenswuerdigerAbsender).HasColumnName("kVertrauenswuerdigerAbsender");

                entity.Property(e => e.CAbsender)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbsender");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.KBenutzerErsteller).HasColumnName("kBenutzer_Ersteller");

                entity.Property(e => e.NAbsenderTyp).HasColumnName("nAbsenderTyp");
            });

            modelBuilder.Entity<TVordefinierteAntwort>(entity =>
            {
                entity.HasKey(e => e.KVordefinierteAntwort)
                    .HasName("PK_Ticketsystem_tVordefinierteAntwort");

                entity.ToTable("tVordefinierteAntwort", "Ticketsystem");

                entity.HasIndex(e => e.KBenutzer, "IX_Ticketsystem_tVordefinierteAntwort_kBenutzer");

                entity.Property(e => e.KVordefinierteAntwort).HasColumnName("kVordefinierteAntwort");

                entity.Property(e => e.CBeschreibung).HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("cName");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFileHtmlInhalt).HasColumnName("kFile_HtmlInhalt");

                entity.Property(e => e.NIndex).HasColumnName("nIndex");

                entity.HasOne(d => d.KFileHtmlInhaltNavigation)
                    .WithMany(p => p.TVordefinierteAntwort)
                    .HasForeignKey(d => d.KFileHtmlInhalt)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Ticketsystem_tVordefinierteAntwort_kFile_HtmlInhalt");
            });

            modelBuilder.Entity<TVorgang>(entity =>
            {
                entity.HasKey(e => e.KVorgang)
                    .HasName("PK_FulfillmentNetwork.tVorgang");

                entity.ToTable("tVorgang", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.KWawiKey, e.CFfnKey, e.KVorgangType }, "IX_FulfillmentNetwork_tVorgang_kWawiKey_cFfnKey_kVorgangType")
                    .IsUnique();

                entity.Property(e => e.KVorgang).HasColumnName("kVorgang");

                entity.Property(e => e.CComment)
                    .IsUnicode(false)
                    .HasColumnName("cComment");

                entity.Property(e => e.CFfnKey)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cFfnKey");

                entity.Property(e => e.CWawiNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cWawiNumber");

                entity.Property(e => e.DErrorSince).HasColumnName("dErrorSince");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KVorgangType).HasColumnName("kVorgangType");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWawiKey).HasColumnName("kWawiKey");

                entity.Property(e => e.NErrorCount).HasColumnName("nErrorCount");

                entity.HasOne(d => d.KVorgangTypeNavigation)
                    .WithMany(p => p.TVorgang)
                    .HasForeignKey(d => d.KVorgangType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgang_kVorgangType");
            });

            modelBuilder.Entity<TVorgangFulfillmentLog>(entity =>
            {
                entity.HasKey(e => e.KVorgangFulfillmentLog)
                    .HasName("PK_FulfillmentNetwork.tVorgang_FulfillmentLog");

                entity.ToTable("tVorgang_FulfillmentLog", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.KVorgang, e.KFulfillmentLog }, "IX_FulfillmentNetwork_tVorgang_FulfillmentLog_kVorgang_kFulfillmentLog")
                    .IsUnique();

                entity.Property(e => e.KVorgangFulfillmentLog).HasColumnName("kVorgang_FulfillmentLog");

                entity.Property(e => e.KFulfillmentLog).HasColumnName("kFulfillmentLog");

                entity.Property(e => e.KVorgang).HasColumnName("kVorgang");

                entity.HasOne(d => d.KFulfillmentLogNavigation)
                    .WithMany(p => p.TVorgangFulfillmentLog)
                    .HasForeignKey(d => d.KFulfillmentLog)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgang_FulfillmentLog_kFulfillmentLog");

                entity.HasOne(d => d.KVorgangNavigation)
                    .WithMany(p => p.TVorgangFulfillmentLog)
                    .HasForeignKey(d => d.KVorgang)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgang_FulfillmentLog_kVorgang");
            });

            modelBuilder.Entity<TVorgangQueue>(entity =>
            {
                entity.HasKey(e => e.KVorgangQueue)
                    .HasName("PK_FulfillmentNetwork.tVorgang_Queue");

                entity.ToTable("tVorgang_Queue", "FulfillmentNetwork");

                entity.HasIndex(e => new { e.KVorgang, e.KQueue }, "IX_FulfillmentNetwork_tVorgang_Queue_kVorgang_kQueue")
                    .IsUnique();

                entity.Property(e => e.KVorgangQueue).HasColumnName("kVorgang_queue");

                entity.Property(e => e.KQueue).HasColumnName("kQueue");

                entity.Property(e => e.KVorgang).HasColumnName("kVorgang");

                entity.HasOne(d => d.KQueueNavigation)
                    .WithMany(p => p.TVorgangQueue)
                    .HasForeignKey(d => d.KQueue)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgang_Queue_kQueue");

                entity.HasOne(d => d.KVorgangNavigation)
                    .WithMany(p => p.TVorgangQueue)
                    .HasForeignKey(d => d.KVorgang)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgang_Queue_kVorgang");
            });

            modelBuilder.Entity<TVorgangType>(entity =>
            {
                entity.HasKey(e => e.KVorgangType)
                    .HasName("PK_FulfillmentNetwork.tVorgangType");

                entity.ToTable("tVorgangType", "FulfillmentNetwork");

                entity.Property(e => e.KVorgangType)
                    .ValueGeneratedNever()
                    .HasColumnName("kVorgangType");

                entity.Property(e => e.CFfnKeyType)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cFfnKeyType");

                entity.Property(e => e.CId)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cId");

                entity.Property(e => e.CWawiKeyType)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cWawiKeyType");

                entity.Property(e => e.KScopeType).HasColumnName("kScopeType");

                entity.Property(e => e.KUserType).HasColumnName("kUserType");

                entity.HasOne(d => d.KScopeTypeNavigation)
                    .WithMany(p => p.TVorgangType)
                    .HasForeignKey(d => d.KScopeType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgangType_kScopeType");

                entity.HasOne(d => d.KUserTypeNavigation)
                    .WithMany(p => p.TVorgangType)
                    .HasForeignKey(d => d.KUserType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FulfillmentNetwork_tVorgangType_kUserType");
            });

            modelBuilder.Entity<TVorgangsfarbe>(entity =>
            {
                entity.HasKey(e => e.KVorgangsfarbe);

                entity.ToTable("tVorgangsfarbe", "Einstellung");

                entity.Property(e => e.KVorgangsfarbe).HasColumnName("kVorgangsfarbe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBedeutung)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBedeutung");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NAlphawert).HasColumnName("nAlphawert");

                entity.Property(e => e.NAngebot).HasColumnName("nAngebot");

                entity.Property(e => e.NAuftrag).HasColumnName("nAuftrag");

                entity.Property(e => e.NBlauwert).HasColumnName("nBlauwert");

                entity.Property(e => e.NGruenwert).HasColumnName("nGruenwert");

                entity.Property(e => e.NRechnung).HasColumnName("nRechnung");

                entity.Property(e => e.NRechnungskorrektur).HasColumnName("nRechnungskorrektur");

                entity.Property(e => e.NRotwert).HasColumnName("nRotwert");
            });

            modelBuilder.Entity<TVorgangsstatus>(entity =>
            {
                entity.HasKey(e => e.KVorgangsstatus);

                entity.ToTable("tVorgangsstatus", "Verkauf");

                entity.Property(e => e.KVorgangsstatus).HasColumnName("kVorgangsstatus");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NAngebot).HasColumnName("nAngebot");

                entity.Property(e => e.NAuftrag).HasColumnName("nAuftrag");

                entity.Property(e => e.NRechnung).HasColumnName("nRechnung");
            });

            modelBuilder.Entity<TVorlage>(entity =>
            {
                entity.HasKey(e => e.KVorlage);

                entity.ToTable("tVorlage", "Report");

                entity.HasIndex(e => e.BItemId, "UQ_tVorlage_bItemId")
                    .IsUnique();

                entity.Property(e => e.KVorlage).HasColumnName("kVorlage");

                entity.Property(e => e.BDaten)
                    .IsRequired()
                    .HasColumnName("bDaten");

                entity.Property(e => e.BItemId).HasColumnName("bItemId");

                entity.Property(e => e.BOriginItemId).HasColumnName("bOriginItemId");

                entity.Property(e => e.BParentItemId).HasColumnName("bParentItemId");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDescriptor)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cDescriptor");

                entity.Property(e => e.CMahnstufe)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cMahnstufe");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COriginDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cOriginDescription");

                entity.Property(e => e.COriginVersion)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cOriginVersion");

                entity.Property(e => e.CTyp)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.DLastModification)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModification");

                entity.Property(e => e.DOriginLastModification)
                    .HasColumnType("datetime")
                    .HasColumnName("dOriginLastModification");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NVorlagensettypId).HasColumnName("nVorlagensettypId");

                entity.Property(e => e.NVorlagentyp).HasColumnName("nVorlagentyp");

                entity.HasOne(d => d.KVorlagensetNavigation)
                    .WithMany(p => p.TVorlage)
                    .HasForeignKey(d => d.KVorlagenset)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_tVorlage_kVorlagenset");
            });

            modelBuilder.Entity<TVorlage1>(entity =>
            {
                entity.HasKey(e => e.KVorlage)
                    .HasName("PK_Repricer_tVorlage");

                entity.ToTable("tVorlage", "Repricer");

                entity.HasIndex(e => e.CName, "UQ_Repricer_tVorlage_cName")
                    .IsUnique();

                entity.Property(e => e.KVorlage).HasColumnName("kVorlage");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cName");

                entity.Property(e => e.KAbverkauf).HasColumnName("kAbverkauf");

                entity.Property(e => e.KAmazonBuyBoxStrategy).HasColumnName("kAmazonBuyBoxStrategy");

                entity.Property(e => e.KAmazonCompetitorAsinStrategy).HasColumnName("kAmazonCompetitorAsinStrategy");

                entity.Property(e => e.KMargensteigerung).HasColumnName("kMargensteigerung");

                entity.HasOne(d => d.KAbverkaufNavigation)
                    .WithMany(p => p.TVorlage1)
                    .HasForeignKey(d => d.KAbverkauf)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repricer_tVorlage_kAbverkauf");

                entity.HasOne(d => d.KAmazonBuyBoxStrategyNavigation)
                    .WithMany(p => p.TVorlage1)
                    .HasForeignKey(d => d.KAmazonBuyBoxStrategy)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repricer_tVorlage_kAmazonBuyBoxStrategy");

                entity.HasOne(d => d.KAmazonCompetitorAsinStrategyNavigation)
                    .WithMany(p => p.TVorlage1)
                    .HasForeignKey(d => d.KAmazonCompetitorAsinStrategy)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repricer_tVorlage_kAmazonCompetitorAsinStrategy");

                entity.HasOne(d => d.KMargensteigerungNavigation)
                    .WithMany(p => p.TVorlage1)
                    .HasForeignKey(d => d.KMargensteigerung)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Repricer_tVorlage_kMargensteigerung");
            });

            modelBuilder.Entity<TVorlagenset>(entity =>
            {
                entity.HasKey(e => e.KVorlagenset);

                entity.ToTable("tVorlagenset", "Report");

                entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NFlags).HasColumnName("nFlags");

                entity.Property(e => e.NIstGlobal).HasColumnName("nIstGlobal");

                entity.Property(e => e.NIstStandard).HasColumnName("nIstStandard");

                entity.Property(e => e.NVorlagensettyp).HasColumnName("nVorlagensettyp");
            });

            modelBuilder.Entity<TVorlagensetEinstellung>(entity =>
            {
                entity.HasKey(e => e.KVorlagensetEinstellung);

                entity.ToTable("tVorlagensetEinstellung", "Report");

                entity.HasIndex(e => new { e.KVorlagenset, e.CRechnername, e.KBenutzer }, "UQ_tVorlagensetEinstellung_cRechnername_kBenutzer_kVorlagenset")
                    .IsUnique();

                entity.Property(e => e.KVorlagensetEinstellung).HasColumnName("kVorlagensetEinstellung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDruckername1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername1");

                entity.Property(e => e.CDruckername2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckername2");

                entity.Property(e => e.CFaxname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFaxname");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KVorlagenset).HasColumnName("kVorlagenset");

                entity.Property(e => e.NKopien1).HasColumnName("nKopien1");

                entity.Property(e => e.NKopien2).HasColumnName("nKopien2");

                entity.HasOne(d => d.KVorlagensetNavigation)
                    .WithMany(p => p.TVorlagensetEinstellung)
                    .HasForeignKey(d => d.KVorlagenset)
                    .HasConstraintName("FK_tVorlagensetEinstellung_kVorlagenset");
            });

            modelBuilder.Entity<TWaehrung>(entity =>
            {
                entity.HasKey(e => e.KWaehrung);

                entity.ToTable("tWaehrung");

                entity.Property(e => e.KWaehrung)
                    .ValueGeneratedNever()
                    .HasColumnName("kWaehrung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEamapping)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cEAMapping");

                entity.Property(e => e.CName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameHtml)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameHTML");

                entity.Property(e => e.CTrennzeichenCent)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTrennzeichenCent")
                    .IsFixedLength(true);

                entity.Property(e => e.CTrennzeichenTausend)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTrennzeichenTausend")
                    .IsFixedLength(true);

                entity.Property(e => e.DAktualisiert)
                    .HasColumnType("datetime")
                    .HasColumnName("dAktualisiert");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NVorBetrag).HasColumnName("nVorBetrag");
            });

            modelBuilder.Entity<TWaehrungAlt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tWaehrungAlt");

                entity.HasIndex(e => e.KWaehrung, "IX_tWaehrungAlt_kWaehrung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DAktualisiert)
                    .HasColumnType("datetime")
                    .HasColumnName("dAktualisiert");

                entity.Property(e => e.FFaktorAlt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktorAlt");

                entity.Property(e => e.FFaktorNeu)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktorNeu");

                entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");
            });

            modelBuilder.Entity<TWaehrungIso>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tWaehrungISO");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CIso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TWarenLager>(entity =>
            {
                entity.HasKey(e => e.KWarenLager);

                entity.ToTable("tWarenLager");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnsprechpartnerAbteilung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerAbteilung");

                entity.Property(e => e.CAnsprechpartnerAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerAnrede");

                entity.Property(e => e.CAnsprechpartnerEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerEMail");

                entity.Property(e => e.CAnsprechpartnerFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerFax");

                entity.Property(e => e.CAnsprechpartnerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerName");

                entity.Property(e => e.CAnsprechpartnerTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerTel");

                entity.Property(e => e.CAnsprechpartnerVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartnerVorname");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CDimension1Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDimension1Name");

                entity.Property(e => e.CDimension1Trennzeichen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDimension1Trennzeichen");

                entity.Property(e => e.CDimension2Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDimension2Name");

                entity.Property(e => e.CDimension2Trennzeichen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDimension2Trennzeichen");

                entity.Property(e => e.CDimension3Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDimension3Name");

                entity.Property(e => e.CDimension3Trennzeichen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDimension3Trennzeichen");

                entity.Property(e => e.CDimension4Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDimension4Name");

                entity.Property(e => e.CDimension4Trennzeichen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDimension4Trennzeichen");

                entity.Property(e => e.CDimension5Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDimension5Name");

                entity.Property(e => e.CDimension5Trennzeichen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDimension5Trennzeichen");

                entity.Property(e => e.CEmpfaengerFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmpfaengerFirma");

                entity.Property(e => e.CFfnWarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFfnWarehouseId");

                entity.Property(e => e.CKuerzel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKuerzel");

                entity.Property(e => e.CLagerTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLagerTyp");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KQuellLager).HasColumnName("kQuellLager");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.KZielLager).HasColumnName("kZielLager");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NAuslieferungsPrio)
                    .HasColumnName("nAuslieferungsPrio")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NDimension1Laenge).HasColumnName("nDimension1Laenge");

                entity.Property(e => e.NDimension1Typ).HasColumnName("nDimension1Typ");

                entity.Property(e => e.NDimension2Laenge).HasColumnName("nDimension2Laenge");

                entity.Property(e => e.NDimension2Typ).HasColumnName("nDimension2Typ");

                entity.Property(e => e.NDimension3Laenge).HasColumnName("nDimension3Laenge");

                entity.Property(e => e.NDimension3Typ).HasColumnName("nDimension3Typ");

                entity.Property(e => e.NDimension4Laenge).HasColumnName("nDimension4Laenge");

                entity.Property(e => e.NDimension4Typ).HasColumnName("nDimension4Typ");

                entity.Property(e => e.NDimension5Laenge).HasColumnName("nDimension5Laenge");

                entity.Property(e => e.NDimension5Typ).HasColumnName("nDimension5Typ");

                entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");

                entity.Property(e => e.NLagerplatzVerwaltung).HasColumnName("nLagerplatzVerwaltung");

                entity.Property(e => e.NPackStationAktiv).HasColumnName("nPackStationAktiv");
            });

            modelBuilder.Entity<TWarenLagerAusgang>(entity =>
            {
                entity.HasKey(e => e.KWarenLagerAusgang);

                entity.ToTable("tWarenLagerAusgang");

                entity.HasIndex(e => new { e.KArtikel, e.DErstellt }, "IX_tWarenLagerAusgang_kArtikel_dErstellt");

                entity.HasIndex(e => e.KLieferscheinPos, "IX_tWarenLagerAusgang_kLieferscheinPos");

                entity.HasIndex(e => e.KWarenLagerEingang, "IX_tWarenLagerAusgang_kWarenLagerEingang");

                entity.Property(e => e.KWarenLagerAusgang).HasColumnName("kWarenLagerAusgang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBuchungsart)
                    .HasColumnName("kBuchungsart")
                    .HasDefaultValueSql("((20))");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            });

            modelBuilder.Entity<TWarenLagerDimensionTyp>(entity =>
            {
                entity.HasKey(e => e.KWarenLagerDimensionTyp);

                entity.ToTable("tWarenLagerDimensionTyp");

                entity.Property(e => e.KWarenLagerDimensionTyp).HasColumnName("kWarenLagerDimensionTyp");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TWarenLagerEingang>(entity =>
            {
                entity.HasKey(e => e.KWarenLagerEingang);

                entity.ToTable("tWarenLagerEingang");

                entity.HasIndex(e => e.FAnzahlAktuell, "IX_tWarenLagerEingang_fAnzahlAktuell_kArtikel_kWarenLagerPlatz");

                entity.HasIndex(e => new { e.KLhm, e.FAnzahlAktuell }, "IX_tWarenLagerEingang_kLhm_fAnzahlAktuell");

                entity.HasIndex(e => e.KLieferantenBestellungPos, "IX_tWarenLagerEingang_kLieferantenBestellungPos");

                entity.HasIndex(e => new { e.KWarenLagerPlatz, e.KArtikel, e.FAnzahlAktuell }, "IX_tWarenLagerEingang_kWarenLagerPlatz_kArtikel_fAnzahlAktuell_cChargenNr_dMHD_fAnzahlReserviertPickpos");

                entity.HasIndex(e => new { e.KArtikel, e.FAnzahlAktuell, e.KWarenLagerPlatz }, "IX_twarenlagereingang_kArtikel_fAnzahlAktuell_kwarenlagerplatz");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGeliefertAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dGeliefertAM");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FAnzahlAktuell)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlAktuell");

                entity.Property(e => e.FAnzahlReserviertPickpos)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlReserviertPickpos");

                entity.Property(e => e.FEkeinzel)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKEinzel");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellPosUmlagerung).HasColumnName("kBestellPosUmlagerung");

                entity.Property(e => e.KBuchungsart)
                    .HasColumnName("kBuchungsart")
                    .HasDefaultValueSql("((10))");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.KLhm).HasColumnName("kLHM");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.KRmretourePos).HasColumnName("kRMRetourePos");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionID");

                entity.Property(e => e.KWarenLagerAusgang).HasColumnName("kWarenLagerAusgang");

                entity.Property(e => e.KWarenLagerEingangUrsprung).HasColumnName("kWarenLagerEingang_Ursprung");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.NGldberechnungMitEingangsrechnung).HasColumnName("nGLDBerechnungMitEingangsrechnung");
            });

            modelBuilder.Entity<TWarenLagerEingangHistorie>(entity =>
            {
                entity.HasKey(e => e.KWarenLagerEingangHistorie);

                entity.ToTable("tWarenLagerEingangHistorie");

                entity.HasIndex(e => e.KBuchungsArt, "IX_tWarenLagerEingangHistorie_kBuchungsArt");

                entity.HasIndex(e => new { e.KWarenLagerPlatzStart, e.KBuchungsArt }, "IX_tWarenLagerEingangHistorie_kWarenLagerPlatzStart_kBuchungsArt");

                entity.Property(e => e.KWarenLagerEingangHistorie).HasColumnName("kWarenLagerEingangHistorie");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBuchungsArt).HasColumnName("kBuchungsArt");

                entity.Property(e => e.KLhmstart).HasColumnName("kLHMStart");

                entity.Property(e => e.KLhmziel).HasColumnName("kLHMZiel");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionID");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.KWarenLagerPlatzStart).HasColumnName("kWarenLagerPlatzStart");

                entity.Property(e => e.KWarenLagerPlatzZiel).HasColumnName("kWarenLagerPlatzZiel");
            });

            modelBuilder.Entity<TWarenLagerFulFillmentDienstleister>(entity =>
            {
                entity.HasKey(e => e.KWarenLager);

                entity.ToTable("tWarenLagerFulFillmentDienstleister");

                entity.Property(e => e.KWarenLager)
                    .ValueGeneratedNever()
                    .HasColumnName("kWarenLager");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KFormularFfnLieferschein).HasColumnName("kFormularFfnLieferschein");

                entity.Property(e => e.KFormularFfnRechnung).HasColumnName("kFormularFfnRechnung");

                entity.Property(e => e.KFormularFulfillmentAuftrag).HasColumnName("kFormularFulfillmentAuftrag");

                entity.Property(e => e.KFormularLieferschein).HasColumnName("kFormularLieferschein");

                entity.Property(e => e.KFulfillmentDienstleister).HasColumnName("kFulfillmentDienstleister");

                entity.Property(e => e.NDruckFf).HasColumnName("nDruckFF");

                entity.Property(e => e.NDruckLieferschein).HasColumnName("nDruckLieferschein");

                entity.Property(e => e.NExportFf).HasColumnName("nExportFF");

                entity.Property(e => e.NFaxFf).HasColumnName("nFaxFF");

                entity.Property(e => e.NFaxLieferschein).HasColumnName("nFaxLieferschein");

                entity.Property(e => e.NMailFf).HasColumnName("nMailFF");

                entity.Property(e => e.NMailLieferschein).HasColumnName("nMailLieferschein");

                entity.Property(e => e.XFfnOptionen)
                    .HasColumnType("xml")
                    .HasColumnName("xFfnOptionen");
            });

            modelBuilder.Entity<TWarenLagerOptionen>(entity =>
            {
                entity.HasKey(e => e.KWarenLagerOptionen);

                entity.ToTable("tWarenLagerOptionen");

                entity.HasIndex(e => e.KWarenLager, "UC_tWarenLagerOptionen_kWarenLager")
                    .IsUnique();

                entity.Property(e => e.KWarenLagerOptionen).HasColumnName("kWarenLagerOptionen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KKategorieNeuerArtikel).HasColumnName("kKategorieNeuerArtikel");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KWarenLagerPlatzEingang).HasColumnName("kWarenLagerPlatzEingang");

                entity.Property(e => e.KWarenLagerPlatzEingangDefaultMobile).HasColumnName("kWarenLagerPlatzEingangDefaultMobile");

                entity.Property(e => e.KWarenLagerPlatzRetoure).HasColumnName("kWarenLagerPlatzRetoure");

                entity.Property(e => e.KWarenlagerPlatzBoxen).HasColumnName("kWarenlagerPlatzBoxen");

                entity.Property(e => e.KWarenlagerPlatzInBearbeitung).HasColumnName("kWarenlagerPlatzInBearbeitung");

                entity.Property(e => e.NAbgelaufenesMhdnichtEinbuchen).HasColumnName("nAbgelaufenesMHDNichtEinbuchen");

                entity.Property(e => e.NAllePackHinweiseAlsPopUp).HasColumnName("nAllePackHinweiseAlsPopUp");

                entity.Property(e => e.NArtikelAnmerkungenPackhinweis).HasColumnName("nArtikelAnmerkungenPackhinweis");

                entity.Property(e => e.NArtikelAttributeBeachten)
                    .HasColumnName("nArtikelAttributeBeachten")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NArtikelBezeichnungAusArtikel).HasColumnName("nArtikelBezeichnungAusArtikel");

                entity.Property(e => e.NAutoAbmelden).HasColumnName("nAutoAbmelden");

                entity.Property(e => e.NBesondereWeplaetze).HasColumnName("nBesondereWEPlaetze");

                entity.Property(e => e.NBoxenDirektTauschen)
                    .HasColumnName("nBoxenDirektTauschen")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NBoxenDruckAusAuftragsVorlage)
                    .HasColumnName("nBoxenDruckAusAuftragsVorlage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NBoxenFuellenBestaetigen)
                    .HasColumnName("nBoxenFuellenBestaetigen")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NBoxenKeinAuftragSplittBeiTeillief).HasColumnName("nBoxenKeinAuftragSplittBeiTeillief");

                entity.Property(e => e.NBoxenKeineRechnungBeiNullEuro).HasColumnName("nBoxenKeineRechnungBeiNullEuro");

                entity.Property(e => e.NBoxenKeinenRechnungOhneDruck).HasColumnName("nBoxenKeinenRechnungOhneDruck");

                entity.Property(e => e.NBoxenSplittAuftrag).HasColumnName("nBoxenSplittAuftrag");

                entity.Property(e => e.NChargen).HasColumnName("nChargen");

                entity.Property(e => e.NEazyShipping).HasColumnName("nEazyShipping");

                entity.Property(e => e.NEazyShippingArtikelButtons).HasColumnName("nEazyShippingArtikelButtons");

                entity.Property(e => e.NEazyShippingArtikelDetails).HasColumnName("nEazyShippingArtikelDetails");

                entity.Property(e => e.NEazyShippingFreiposButtons).HasColumnName("nEazyShippingFreiposButtons");

                entity.Property(e => e.NEazyShippingKeineRechnungBeiNullEuro).HasColumnName("nEazyShippingKeineRechnungBeiNullEuro");

                entity.Property(e => e.NEazyShippingKeinenRechnungOhneDruck).HasColumnName("nEazyShippingKeinenRechnungOhneDruck");

                entity.Property(e => e.NEazyShippingSplittAuftrag).HasColumnName("nEazyShippingSplittAuftrag");

                entity.Property(e => e.NEinlagerwagenVerwenden)
                    .HasColumnName("nEinlagerwagenVerwenden")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NFirstMobileAppPicklistenVorlageVerwenden)
                    .HasColumnName("nFirstMobileAppPicklistenVorlageVerwenden")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NFreierWeEkunbekanntHandling).HasColumnName("nFreierWeEKUnbekanntHandling");

                entity.Property(e => e.NFreierWeLieferantenArtikelAutoZuordnung).HasColumnName("nFreierWeLieferantenArtikelAutoZuordnung");

                entity.Property(e => e.NGanzeBestellungVerpackenInEazyShip).HasColumnName("nGanzeBestellungVerpackenInEazyShip");

                entity.Property(e => e.NGanzeBestellungVerpackenNurPickInEazyShip).HasColumnName("nGanzeBestellungVerpackenNurPickInEazyShip");

                entity.Property(e => e.NKeineLiefNachfrage).HasColumnName("nKeineLiefNachfrage");

                entity.Property(e => e.NKommentarPflichtArtikelZustandAendern).HasColumnName("nKommentarPflichtArtikelZustandAendern");

                entity.Property(e => e.NKommentarPflichtInventur).HasColumnName("nKommentarPflichtInventur");

                entity.Property(e => e.NKommentarPflichtKorrekturbuchung).HasColumnName("nKommentarPflichtKorrekturbuchung");

                entity.Property(e => e.NKundeEigenesFeld).HasColumnName("nKundeEigenesFeld");

                entity.Property(e => e.NLagerKleinerNullImWesetzen).HasColumnName("nLagerKleinerNullImWESetzen");

                entity.Property(e => e.NMengeBestaetigen).HasColumnName("nMengeBestaetigen");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMobilerPacktisch).HasColumnName("nMobilerPacktisch");

                entity.Property(e => e.NMobilerPacktischGebindeScanForArtikel).HasColumnName("nMobilerPacktischGebindeScanForArtikel");

                entity.Property(e => e.NMobilerPacktischKeineRechnungBeiNullEuro).HasColumnName("nMobilerPacktischKeineRechnungBeiNullEuro");

                entity.Property(e => e.NMobilerPacktischKeinenRechnungOhneDruck).HasColumnName("nMobilerPacktischKeinenRechnungOhneDruck");

                entity.Property(e => e.NMobilerPacktischMengeBestaetigen).HasColumnName("nMobilerPacktischMengeBestaetigen");

                entity.Property(e => e.NNachschubNurBezahlteAuftraege).HasColumnName("nNachschubNurBezahlteAuftraege");

                entity.Property(e => e.NNumPad).HasColumnName("nNumPad");

                entity.Property(e => e.NPackHinweisVorVerpacken)
                    .HasColumnName("nPackHinweisVorVerpacken")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NPacktischMhdchargeNichtScannen)
                    .HasColumnName("nPacktischMHDChargeNichtScannen")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NPickenOhneScan).HasColumnName("nPickenOhneScan");

                entity.Property(e => e.NRetoureAufVorgabeplatz)
                    .HasColumnName("nRetoureAufVorgabeplatz")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NRetourenPlatzManuellWaehlen).HasColumnName("nRetourenPlatzManuellWaehlen");

                entity.Property(e => e.NRollendeKommissionierung).HasColumnName("nRollendeKommissionierung");

                entity.Property(e => e.NScanInMehrereArtikel).HasColumnName("nScanInMehrereArtikel");

                entity.Property(e => e.NSelectPlatzByTouch).HasColumnName("nSelectPlatzByTouch");

                entity.Property(e => e.NUeberlieferung).HasColumnName("nUeberlieferung");

                entity.Property(e => e.NUeberlieferungNachfragen).HasColumnName("nUeberlieferungNachfragen");

                entity.Property(e => e.NUseScannerImWe).HasColumnName("nUseScannerImWE");

                entity.Property(e => e.NVerpackenAnmerkung).HasColumnName("nVerpackenAnmerkung");

                entity.Property(e => e.NVerpackenBestellhinweis).HasColumnName("nVerpackenBestellhinweis");

                entity.Property(e => e.NVerpackenMehrMengeErlaubt).HasColumnName("nVerpackenMehrMengeErlaubt");

                entity.Property(e => e.NVersandBoxenButtons)
                    .HasColumnName("nVersandBoxenButtons")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NVersandBoxenFreiPosButtons)
                    .HasColumnName("nVersandBoxenFreiPosButtons")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NVersandBoxenScan)
                    .HasColumnName("nVersandBoxenScan")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NVersandboxenProzess).HasColumnName("nVersandboxenProzess");

                entity.Property(e => e.NVersandboxenProzessmitRoKo).HasColumnName("nVersandboxenProzessmitRoKo");

                entity.Property(e => e.NWadirektAusWe).HasColumnName("nWADirektAusWE");

                entity.Property(e => e.NWadirektAusWe1artikel).HasColumnName("nWADirektAusWE1Artikel");

                entity.Property(e => e.NWadirektAusWeauchLeereBoxenBelegen).HasColumnName("nWADirektAusWEAuchLeereBoxenBelegen");

                entity.Property(e => e.NWadirektAusWeauchLeereBoxenBelegenFreiProzent).HasColumnName("nWADirektAusWEAuchLeereBoxenBelegenFreiProzent");

                entity.Property(e => e.NWadirektAusWeauchLeereBoxenBelegenZulauf).HasColumnName("nWADirektAusWEAuchLeereBoxenBelegenZulauf");

                entity.Property(e => e.NWadirektWe1artikelMengenCheck).HasColumnName("nWADirektWE1ArtikelMengenCheck");

                entity.Property(e => e.NWahintDisappearAfterXseconds).HasColumnName("nWAHintDisappearAfterXSeconds");

                entity.Property(e => e.NWakeinAuftragSplittBeiTeillief)
                    .HasColumnName("nWAKeinAuftragSplittBeiTeillief")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NWaverpackteArtikelNachUnten).HasColumnName("nWAVerpackteArtikelNachUnten");

                entity.Property(e => e.NWaversandartScan).HasColumnName("nWAVersandartScan");

                entity.Property(e => e.NWePlatzSortierung).HasColumnName("nWePlatzSortierung");

                entity.Property(e => e.NWeaufVorgabeplatz).HasColumnName("nWEAufVorgabeplatz");

                entity.Property(e => e.NWedirektBuchenAktiv)
                    .HasColumnName("nWEDirektBuchenAktiv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NWefremdeWarenlagerAnzeigen).HasColumnName("nWEFremdeWarenlagerAnzeigen");

                entity.Property(e => e.NWeinLeereBoxenNurBeiVorkomm).HasColumnName("nWEInLeereBoxenNurBeiVorkomm");

                entity.Property(e => e.NWemengeInArtField)
                    .HasColumnName("nWEMengeInArtField")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NWeneuenArtikelAnlegen).HasColumnName("nWENeuenArtikelAnlegen");

                entity.Property(e => e.NWeoffeneBestellungsmengenZeigen).HasColumnName("nWEOffeneBestellungsmengenZeigen");

                entity.Property(e => e.NWesortArtikelByEinbuchdatum).HasColumnName("nWESortArtikelByEinbuchdatum");
            });

            modelBuilder.Entity<TWarenLagerPlatz>(entity =>
            {
                entity.HasKey(e => e.KWarenLagerPlatz);

                entity.ToTable("tWarenLagerPlatz");

                entity.HasIndex(e => new { e.KWarenLagerPlatzTyp, e.KWarenLager }, "IX_tWarenLagerPlatz_kWarenLagerPlatzTyp_kWarenLager");

                entity.HasIndex(e => new { e.KWarenLager, e.NStatus }, "IX_tWarenLagerPlatz_kWarenLager_nStatus");

                entity.HasIndex(e => new { e.NPrio, e.NSort, e.KWarenLager }, "IX_tWarenLagerPlatz_nPrio_nSort_kWarenlager");

                entity.HasIndex(e => new { e.NStatus, e.KWarenLagerPlatzTyp, e.CName }, "IX_tWarenLagerPlatz_nStatus_kWarenLagerPlatzTyp_cName");

                entity.HasIndex(e => new { e.KWarenLager, e.CName }, "UQ_tWarenLagerPlatz_cName_kWarenLager")
                    .IsUnique();

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DWmsInventurDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dWmsInventurDatum");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FGewichtMax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtMax");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KWarenLagerPlatzTyp).HasColumnName("kWarenLagerPlatzTyp");

                entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");

                entity.Property(e => e.NAuslieferungGesperrt).HasColumnName("nAuslieferungGesperrt");

                entity.Property(e => e.NGesperrt).HasColumnName("nGesperrt");

                entity.Property(e => e.NInvGezaehlt)
                    .HasColumnName("nInvGezaehlt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NPreInvStatus).HasColumnName("nPreInvStatus");

                entity.Property(e => e.NPrio).HasColumnName("nPrio");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TWarenLagerPlatzArtikel>(entity =>
            {
                entity.HasKey(e => new { e.KWarenLagerPlatz, e.KArtikel });

                entity.ToTable("tWarenLagerPlatzArtikel");

                entity.HasIndex(e => e.KArtikel, "IX_tWarenLagerPlatzArtikel_kArtikel");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar_1");

                entity.Property(e => e.CKommentar2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar_2");
            });

            modelBuilder.Entity<TWarenLagerPlatzDefault>(entity =>
            {
                entity.HasKey(e => new { e.KWarenLager, e.KWarenLagerGroesse });

                entity.ToTable("tWarenLagerPlatzDefault");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KWarenLagerGroesse).HasColumnName("kWarenLagerGroesse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FGewichtMax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtMax");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.NAnzahlMax).HasColumnName("nAnzahlMax");
            });

            modelBuilder.Entity<TWarenLagerPrioGlobal>(entity =>
            {
                entity.HasKey(e => new { e.KWarenLager, e.KVertriebsweg });

                entity.ToTable("tWarenLagerPrioGlobal");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KVertriebsweg).HasColumnName("kVertriebsweg");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.NPrio).HasColumnName("nPrio");
            });

            modelBuilder.Entity<TWarengruppe>(entity =>
            {
                entity.HasKey(e => e.KWarengruppe);

                entity.ToTable("tWarengruppe");

                entity.Property(e => e.KWarengruppe)
                    .ValueGeneratedNever()
                    .HasColumnName("kWarengruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TWarenlagerArtikelOptionen>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KWarenlager });

                entity.ToTable("tWarenlagerArtikelOptionen");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FMindestMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMindestMenge");

                entity.Property(e => e.FNachschiebenAb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNachschiebenAb");

                entity.Property(e => e.FVorschlag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVorschlag");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
            });

            modelBuilder.Entity<TWarenlagerOptionenArtikelbild>(entity =>
            {
                entity.HasKey(e => e.KWarenlagerOptionenArtikelbild);

                entity.ToTable("tWarenlagerOptionenArtikelbild");

                entity.Property(e => e.KWarenlagerOptionenArtikelbild).HasColumnName("kWarenlagerOptionenArtikelbild");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCustomName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustomName");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NSprache)
                    .HasColumnName("nSprache")
                    .HasDefaultValueSql("((49))");
            });

            modelBuilder.Entity<TWarenlagerOptionenAuftragDetails>(entity =>
            {
                entity.HasKey(e => e.KWarenlagerOptionenAuftragDetails);

                entity.ToTable("tWarenlagerOptionenAuftragDetails");

                entity.Property(e => e.KWarenlagerOptionenAuftragDetails).HasColumnName("kWarenlagerOptionenAuftragDetails");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CCustomName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCustomName");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NSprache)
                    .HasColumnName("nSprache")
                    .HasDefaultValueSql("((49))");
            });

            modelBuilder.Entity<TWawiAttribut>(entity =>
            {
                entity.HasKey(e => e.KWawiAttribut);

                entity.ToTable("tWawiAttribut");

                entity.HasIndex(e => e.KAttribut, "UQ_tWawiAttribut_kAttribut")
                    .IsUnique();

                entity.Property(e => e.KWawiAttribut).HasColumnName("kWawiAttribut");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");
            });

            modelBuilder.Entity<TWawiAttributSprache>(entity =>
            {
                entity.HasKey(e => new { e.KWawiAttribut, e.KSprache });

                entity.ToTable("tWawiAttributSprache");

                entity.Property(e => e.KWawiAttribut).HasColumnName("kWawiAttribut");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");

                entity.Property(e => e.DWertDateTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dWertDateTime");

                entity.Property(e => e.FWertDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertDecimal");

                entity.Property(e => e.NWertInt).HasColumnName("nWertInt");
            });

            modelBuilder.Entity<TWebshopModule>(entity =>
            {
                entity.HasKey(e => new { e.CApikey, e.CLizenzkey });

                entity.ToTable("tWebshopModule");

                entity.Property(e => e.CApikey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAPIKey");

                entity.Property(e => e.CLizenzkey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLizenzkey");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cID");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TWidget>(entity =>
            {
                entity.HasKey(e => e.KWidget);

                entity.ToTable("tWidget");

                entity.Property(e => e.KWidget).HasColumnName("kWidget");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArbeitsplatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArbeitsplatz");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");

                entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
            });

            modelBuilder.Entity<TWidgetBenutzer>(entity =>
            {
                entity.HasKey(e => e.KWidgetBenutzer);

                entity.ToTable("tWidgetBenutzer");

                entity.Property(e => e.KWidgetBenutzer).HasColumnName("kWidgetBenutzer");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");
            });

            modelBuilder.Entity<TWidgetLayout>(entity =>
            {
                entity.HasKey(e => e.KWidgetLayout);

                entity.ToTable("tWidgetLayout");

                entity.Property(e => e.KWidgetLayout).HasColumnName("kWidgetLayout");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArbeitsplatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArbeitsplatz");

                entity.Property(e => e.CLayout)
                    .IsUnicode(false)
                    .HasColumnName("cLayout");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
            });

            modelBuilder.Entity<TWidgetSettings>(entity =>
            {
                entity.HasKey(e => e.KWidgetSettings);

                entity.ToTable("tWidgetSettings");

                entity.Property(e => e.KWidgetSettings).HasColumnName("kWidgetSettings");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArbeitsplatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArbeitsplatz");

                entity.Property(e => e.CKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.CValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KWidget).HasColumnName("kWidget");

                entity.Property(e => e.NApplikation).HasColumnName("nApplikation");
            });

            modelBuilder.Entity<TWidgetTemplate>(entity =>
            {
                entity.HasKey(e => e.KWidgetTemplate);

                entity.ToTable("tWidgetTemplate");

                entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.CKlasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKlasse");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");
            });

            modelBuilder.Entity<TWidgetTemplateSettings>(entity =>
            {
                entity.HasKey(e => e.KWidgetTemplateSettings);

                entity.ToTable("tWidgetTemplateSettings");

                entity.Property(e => e.KWidgetTemplateSettings).HasColumnName("kWidgetTemplateSettings");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CValue)
                    .IsUnicode(false)
                    .HasColumnName("cValue");

                entity.Property(e => e.KWidgetTemplate).HasColumnName("kWidgetTemplate");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<TWmsInventur>(entity =>
            {
                entity.HasKey(e => e.KWmsInventur);

                entity.ToTable("tWmsInventur");

                entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.DAngelegt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAngelegt");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TWmsInventurlog>(entity =>
            {
                entity.HasKey(e => e.KWmsInventurlog);

                entity.ToTable("tWmsInventurlog");

                entity.HasIndex(e => new { e.KWmsInventur, e.KWarenlagerPlatz }, "IX_tWmsInventurlog_kWmsInventur_kWarenlagerPlatz");

                entity.Property(e => e.KWmsInventurlog).HasColumnName("kWmsInventurlog");

                entity.Property(e => e.CCharge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCharge");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FDifferenz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDifferenz");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");

                entity.Property(e => e.KWmsInventur).HasColumnName("kWmsInventur");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TWmsboxenPackVerpackteSerNos>(entity =>
            {
                entity.HasKey(e => e.KWmsboxenPackVerpackteSerNos)
                    .HasName("PK__tWMSBoxe__62DE8FE5AF26C8EE");

                entity.ToTable("tWMSBoxenPackVerpackteSerNos");

                entity.Property(e => e.KWmsboxenPackVerpackteSerNos).HasColumnName("kWMSBoxenPackVerpackteSerNos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CSerNo)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSerNo");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<TWmsbyLight>(entity =>
            {
                entity.HasKey(e => e.KWmsbyLight);

                entity.ToTable("tWMSByLight");

                entity.Property(e => e.KWmsbyLight).HasColumnName("kWMSByLight");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArbeitsPlatz)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("cArbeitsPlatz");

                entity.Property(e => e.CId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cId");

                entity.Property(e => e.DZeitstempel)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitstempel");

                entity.Property(e => e.FPickAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPickAnzahl");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TWmslagerBereich>(entity =>
            {
                entity.HasKey(e => e.KWmslagerBereich);

                entity.ToTable("tWMSLagerBereich");

                entity.HasIndex(e => new { e.KWarenLager, e.CKuerzel }, "UQ_tWMSLagerBereich_cKuerzel_kWarenLager")
                    .IsUnique();

                entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CKuerzel)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cKuerzel");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NTyp)
                    .HasColumnName("nTyp")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TWmslagerBereichPlatz>(entity =>
            {
                entity.HasKey(e => e.KWmslagerBereichPlatz);

                entity.ToTable("tWMSLagerBereichPlatz");

                entity.HasIndex(e => new { e.KWmslagerBereich, e.KWarenLagerPlatz }, "IX_tWMSLagerBereichPlatz_kWMSLagerBereich_kWarenLagerPlatz");

                entity.Property(e => e.KWmslagerBereichPlatz).HasColumnName("kWMSLagerBereichPlatz");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWmslagerBereich).HasColumnName("kWMSLagerBereich");
            });

            modelBuilder.Entity<TWmsoptionen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tWMSOptionen");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");
            });

            modelBuilder.Entity<TWmspackItem>(entity =>
            {
                entity.HasKey(e => e.KWmspackItem);

                entity.ToTable("tWMSPackItem");

                entity.Property(e => e.KWmspackItem).HasColumnName("kWMSPackItem");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");

                entity.Property(e => e.KBestellpos).HasColumnName("kBestellpos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");
            });

            modelBuilder.Entity<TWmspackItemData>(entity =>
            {
                entity.HasKey(e => e.KWmspackItemData);

                entity.ToTable("tWMSPackItemData");

                entity.Property(e => e.KWmspackItemData).HasColumnName("kWMSPackItemData");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.CSerNo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerNo");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMenge");

                entity.Property(e => e.KWmspackItem).HasColumnName("kWMSPackItem");
            });

            modelBuilder.Entity<TWmsversandLock>(entity =>
            {
                entity.HasKey(e => e.KWmsversandLock);

                entity.ToTable("tWMSVersandLock");

                entity.Property(e => e.KWmsversandLock).HasColumnName("kWMSVersandLock");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KPickliste).HasColumnName("kPickliste");

                entity.Property(e => e.NSort)
                    .HasColumnName("nSort")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TWorkerInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tWorkerInfo");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DAmazonEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dAmazonEnde");

                entity.Property(e => e.DAmazonStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dAmazonStart");

                entity.Property(e => e.DEbayEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEbayEnde");

                entity.Property(e => e.DEbayStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dEbayStart");

                entity.Property(e => e.DShopEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dShopEnde");

                entity.Property(e => e.DShopStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dShopStart");

                entity.Property(e => e.NAmazonOption).HasColumnName("nAmazonOption");

                entity.Property(e => e.NAmazonPid).HasColumnName("nAmazonPID");

                entity.Property(e => e.NEbayOption).HasColumnName("nEbayOption");

                entity.Property(e => e.NEbayPid).HasColumnName("nEbayPID");

                entity.Property(e => e.NShopOption).HasColumnName("nShopOption");

                entity.Property(e => e.NShopPid).HasColumnName("nShopPID");
            });

            modelBuilder.Entity<TWorkflow>(entity =>
            {
                entity.HasKey(e => e.KWorkflow);

                entity.ToTable("tWorkflow");

                entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DtSchedulerTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dtSchedulerTime");

                entity.Property(e => e.NApplikation).HasColumnName("nApplikation");

                entity.Property(e => e.NEvent).HasColumnName("nEvent");

                entity.Property(e => e.NObjekt).HasColumnName("nObjekt");

                entity.Property(e => e.NPos).HasColumnName("nPos");

                entity.Property(e => e.NSchedulerDayValue).HasColumnName("nSchedulerDayValue");

                entity.Property(e => e.NSchedulerHour).HasColumnName("nSchedulerHour");

                entity.Property(e => e.NSchedulerMinute).HasColumnName("nSchedulerMinute");

                entity.Property(e => e.NSchedulerMonthValue).HasColumnName("nSchedulerMonthValue");

                entity.Property(e => e.NSchedulerOptions).HasColumnName("nSchedulerOptions");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NVerknuepfung).HasColumnName("nVerknuepfung");
            });

            modelBuilder.Entity<TWorkflowAktion>(entity =>
            {
                entity.HasKey(e => e.KWorkflowAktion);

                entity.ToTable("tWorkflowAktion");

                entity.Property(e => e.KWorkflowAktion).HasColumnName("kWorkflowAktion");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");

                entity.Property(e => e.NPos).HasColumnName("nPos");

                entity.Property(e => e.XXmlObjekt)
                    .IsRequired()
                    .HasColumnType("xml")
                    .HasColumnName("xXmlObjekt");
            });

            modelBuilder.Entity<TWorkflowBedingung>(entity =>
            {
                entity.HasKey(e => e.KWorkflowBedingung);

                entity.ToTable("tWorkflowBedingung");

                entity.Property(e => e.KWorkflowBedingung).HasColumnName("kWorkflowBedingung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEigenschaft)
                    .HasColumnType("xml")
                    .HasColumnName("cEigenschaft");

                entity.Property(e => e.CVergleichswert)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cVergleichswert");

                entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");

                entity.Property(e => e.KWorkflowEigenschaft).HasColumnName("kWorkflowEigenschaft");

                entity.Property(e => e.NOperator).HasColumnName("nOperator");

                entity.Property(e => e.NPos).HasColumnName("nPos");
            });

            modelBuilder.Entity<TWorkflowEigenschaft>(entity =>
            {
                entity.HasKey(e => e.KWorkflowEigenschaft);

                entity.ToTable("tWorkflowEigenschaft");

                entity.Property(e => e.KWorkflowEigenschaft).HasColumnName("kWorkflowEigenschaft");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDotLiquid)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cDotLiquid");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NDatenTyp).HasColumnName("nDatenTyp");

                entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            });

            modelBuilder.Entity<TWorkflowEvent>(entity =>
            {
                entity.HasKey(e => e.KWorkflowEvent);

                entity.ToTable("tWorkflowEvent");

                entity.Property(e => e.KWorkflowEvent).HasColumnName("kWorkflowEvent");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDisplayName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("cDisplayName");

                entity.Property(e => e.CSortierung)
                    .HasMaxLength(255)
                    .HasColumnName("cSortierung");

                entity.Property(e => e.NEvent).HasColumnName("nEvent");

                entity.Property(e => e.NObjekt).HasColumnName("nObjekt");
            });

            modelBuilder.Entity<TWorkflowLog>(entity =>
            {
                entity.HasKey(e => e.KWorkflowLog);

                entity.ToTable("tWorkflowLog");

                entity.Property(e => e.KWorkflowLog).HasColumnName("kWorkflowLog");

                entity.Property(e => e.CArbeitsplatz)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArbeitsplatz");

                entity.Property(e => e.CLog)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cLog");

                entity.Property(e => e.CObjectId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cObjectId");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");

                entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");

                entity.Property(e => e.KWorkflowAktion).HasColumnName("kWorkflowAktion");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.UniqueId)
                    .HasColumnName("uniqueId")
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<TWorkflowQueue>(entity =>
            {
                entity.HasKey(e => e.KWorkflowQueue);

                entity.ToTable("tWorkflowQueue");

                entity.Property(e => e.KWorkflowQueue).HasColumnName("kWorkflowQueue");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartDate");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KObjektPk).HasColumnName("kObjektPk");

                entity.Property(e => e.KWorkflow).HasColumnName("kWorkflow");

                entity.Property(e => e.NEvent).HasColumnName("nEvent");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<TWorklog>(entity =>
            {
                entity.HasKey(e => e.KWorkerlog);

                entity.ToTable("tWorklog");

                entity.Property(e => e.KWorkerlog).HasColumnName("kWorkerlog");

                entity.Property(e => e.CMessage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cMessage");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dDate");

                entity.Property(e => e.NErrorId).HasColumnName("nErrorID");
            });

            modelBuilder.Entity<TXmlbestellImport>(entity =>
            {
                entity.HasKey(e => e.KXmlbestellImport);

                entity.ToTable("tXMLBestellImport");

                entity.Property(e => e.KXmlbestellImport).HasColumnName("kXMLBestellImport");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NRechnung).HasColumnName("nRechnung");
            });

            modelBuilder.Entity<TXmlgutschriftImport>(entity =>
            {
                entity.HasKey(e => e.KXmlgutschriftImport);

                entity.ToTable("tXMLGutschriftImport");

                entity.Property(e => e.KXmlgutschriftImport).HasColumnName("kXMLGutschriftImport");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");
            });

            modelBuilder.Entity<TXmlimportvorlage>(entity =>
            {
                entity.HasKey(e => e.KXmlImportvorlage)
                    .HasName("PK_tXMLImportVorlage");

                entity.ToTable("tXMLImportvorlage");

                entity.Property(e => e.KXmlImportvorlage).HasColumnName("kXmlImportvorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BVorlage)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("bVorlage");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TXsell>(entity =>
            {
                entity.HasKey(e => e.KXsell);

                entity.ToTable("tXSell");

                entity.Property(e => e.KXsell).HasColumnName("kXSell");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KXsellArtikel).HasColumnName("kXSellArtikel");

                entity.Property(e => e.KXsellGruppe).HasColumnName("kXSellGruppe");

                entity.Property(e => e.NEigenesFeld).HasColumnName("nEigenesFeld");
            });

            modelBuilder.Entity<TXsellGruppe>(entity =>
            {
                entity.HasKey(e => new { e.KXsellGruppe, e.KSprache });

                entity.ToTable("tXSellGruppe");

                entity.Property(e => e.KXsellGruppe).HasColumnName("kXSellGruppe");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TXsellGruppeArtikel>(entity =>
            {
                entity.HasKey(e => e.KXsellGruppeArtikel);

                entity.ToTable("tXSellGruppeArtikel");

                entity.Property(e => e.KXsellGruppeArtikel).HasColumnName("kXSellGruppeArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.TXsellGruppe).HasColumnName("tXSellGruppe");
            });

            modelBuilder.Entity<TZahlen>(entity =>
            {
                entity.HasKey(e => e.KZahl)
                    .HasName("PK_dbo_tZahlen");

                entity.ToTable("tZahlen");

                entity.Property(e => e.KZahl)
                    .ValueGeneratedNever()
                    .HasColumnName("kZahl");
            });

            modelBuilder.Entity<TZahlung>(entity =>
            {
                entity.HasKey(e => e.KZahlung);

                entity.ToTable("tZahlung");

                entity.HasIndex(e => e.KEingangsrechnung, "IX_dbo_tZahlung_kEingangsrechnung");

                entity.HasIndex(e => e.KGutschrift, "IX_dbo_tZahlung_kGutschrift");

                entity.HasIndex(e => e.CName, "IX_tZahlung_cName");

                entity.HasIndex(e => e.DDatum, "IX_tZahlung_dDatum");

                entity.HasIndex(e => e.KBestellung, "IX_tZahlung_kBestellung");

                entity.Property(e => e.KZahlung)
                    .ValueGeneratedNever()
                    .HasColumnName("kZahlung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CExternalTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExternalTransactionId");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSkrmanuell)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSKRManuell");

                entity.Property(e => e.CZuweisungsinfo)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cZuweisungsinfo");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAnzahlung)
                    .HasColumnName("nAnzahlung")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NKeinExport).HasColumnName("nKeinExport");

                entity.Property(e => e.NZahlungstyp).HasColumnName("nZahlungstyp");

                entity.Property(e => e.NZuweisungstyp).HasColumnName("nZuweisungstyp");

                entity.Property(e => e.NZuweisungswertung).HasColumnName("nZuweisungswertung");
            });

            modelBuilder.Entity<TZahlungsArtSprache>(entity =>
            {
                entity.HasKey(e => new { e.KZahlungsart, e.KSprache });

                entity.ToTable("tZahlungsArtSprache");

                entity.HasIndex(e => e.CName, "IX_tZahlungsArtSprache_cName");

                entity.HasIndex(e => e.KZahlungsart, "IX_tZahlungsArtSprache_kZahlungsart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPrtString)
                    .IsUnicode(false)
                    .HasColumnName("cPrtString");

                entity.Property(e => e.CPrtStringVor)
                    .IsUnicode(false)
                    .HasColumnName("cPrtStringVor");
            });

            modelBuilder.Entity<TZahlungsErinnerung>(entity =>
            {
                entity.HasKey(e => e.KZahlungsErinnerung)
                    .HasName("PK_tZahlungserinnerung");

                entity.ToTable("tZahlungsErinnerung");

                entity.HasIndex(e => new { e.KRechnung, e.NMahnstufeAktuell }, "UC_tzahlungserinerung_kRechnung_nMahnstufeAktuell")
                    .IsUnique();

                entity.Property(e => e.KZahlungsErinnerung).HasColumnName("kZahlungsErinnerung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKommentar)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.DErledigt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErledigt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMahndatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMahndatum");

                entity.Property(e => e.DZahlungsfrist)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsfrist");

                entity.Property(e => e.FBruttoBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBruttoBetrag");

                entity.Property(e => e.FGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGebuehr");

                entity.Property(e => e.FGebuehrPauschal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGebuehrPauschal");

                entity.Property(e => e.FGebuehrZinssatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGebuehrZinssatz");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KMahnstufe).HasColumnName("kMahnstufe");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.NKarenzzeit).HasColumnName("nKarenzzeit");

                entity.Property(e => e.NMahnstufeAktuell).HasColumnName("nMahnstufeAktuell");

                entity.Property(e => e.NZahlungsfristInTagen).HasColumnName("nZahlungsfristInTagen");
            });

            modelBuilder.Entity<TZahlungsabgleichAmaPayReportRequests>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichAmaPayReportRequests);

                entity.ToTable("tZahlungsabgleichAmaPayReportRequests");

                entity.Property(e => e.KZahlungsabgleichAmaPayReportRequests).HasColumnName("kZahlungsabgleichAmaPayReportRequests");

                entity.Property(e => e.CRequestId)
                    .HasMaxLength(60)
                    .HasColumnName("cRequestId");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");
            });

            modelBuilder.Entity<TZahlungsabgleichAusgang>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichAusgang);

                entity.ToTable("tZahlungsabgleichAusgang");

                entity.Property(e => e.KZahlungsabgleichAusgang).HasColumnName("kZahlungsabgleichAusgang");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CInternerKommentar)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CKonto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CKontozusatz)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKontozusatz");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTransaktionId)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cTransaktionID")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DAnlagedatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnlagedatum");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");

                entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KZahlungAusgang).HasColumnName("kZahlungAusgang");

                entity.Property(e => e.KZahlungEingang).HasColumnName("kZahlungEingang");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.KZahlungsabgleichUmsatzAusgang).HasColumnName("kZahlungsabgleichUmsatzAusgang");

                entity.Property(e => e.KZahlungsabgleichUmsatzEingang).HasColumnName("kZahlungsabgleichUmsatzEingang");

                entity.Property(e => e.NVollstaendigerReferenzbetrag).HasColumnName("nVollstaendigerReferenzbetrag");
            });

            modelBuilder.Entity<TZahlungsabgleichFilter>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichFilter);

                entity.ToTable("tZahlungsabgleichFilter");

                entity.Property(e => e.KZahlungsabgleichFilter).HasColumnName("kZahlungsabgleichFilter");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CFilterwert)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("cFilterwert");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.NAktion).HasColumnName("nAktion");

                entity.Property(e => e.NFilteroperator).HasColumnName("nFilteroperator");

                entity.Property(e => e.NFilterspalte).HasColumnName("nFilterspalte");

                entity.Property(e => e.NUmsatzart).HasColumnName("nUmsatzart");
            });

            modelBuilder.Entity<TZahlungsabgleichLogeintrag>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichLogeintrag);

                entity.ToTable("tZahlungsabgleichLogeintrag");

                entity.Property(e => e.KZahlungsabgleichLogeintrag).HasColumnName("kZahlungsabgleichLogeintrag");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.HasOne(d => d.KZahlungsabgleichLogsitzungNavigation)
                    .WithMany(p => p.TZahlungsabgleichLogeintrag)
                    .HasForeignKey(d => d.KZahlungsabgleichLogsitzung)
                    .HasConstraintName("FK_tZahlungsabgleichLogeintrag_kZahlungsabgleichLogsitzung");
            });

            modelBuilder.Entity<TZahlungsabgleichLogsitzung>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichLogsitzung);

                entity.ToTable("tZahlungsabgleichLogsitzung");

                entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusMeldung)
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cStatusMeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TZahlungsabgleichModul>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichModul)
                    .HasName("PK_tZahlungsabgleichKonto");

                entity.ToTable("tZahlungsabgleichModul");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEinstellungen)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("cEinstellungen");

                entity.Property(e => e.CModulId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cModulID");
            });

            modelBuilder.Entity<TZahlungsabgleichUmsatz>(entity =>
            {
                entity.HasKey(e => e.KZahlungsabgleichUmsatz);

                entity.ToTable("tZahlungsabgleichUmsatz");

                entity.HasIndex(e => new { e.KZahlungsabgleichModul, e.CKontoIdentifikation, e.CTransaktionId }, "UQ_tZahlungsabgleichUmsatz_kZahlungsabgleichModul_cKontoIdentifikation_cTransaktionsID")
                    .IsUnique();

                entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CInternerKommentar)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CKonto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CKontozusatz)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKontozusatz");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTransaktionId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTransaktionID");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DAbgleichszeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbgleichszeitpunkt");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.NBuchungstyp).HasColumnName("nBuchungstyp");

                entity.Property(e => e.NSichtbar)
                    .IsRequired()
                    .HasColumnName("nSichtbar")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TZahlungsart>(entity =>
            {
                entity.HasKey(e => e.KZahlungsart);

                entity.ToTable("tZahlungsart");

                entity.HasIndex(e => e.CName, "IX_tZahlungsart_cName");

                entity.Property(e => e.KZahlungsart)
                    .ValueGeneratedNever()
                    .HasColumnName("kZahlungsart");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKonto)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPaymentOption)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentOption");

                entity.Property(e => e.CPrtString)
                    .IsUnicode(false)
                    .HasColumnName("cPrtString");

                entity.Property(e => e.CPrtStringVor)
                    .IsUnicode(false)
                    .HasColumnName("cPrtStringVor");

                entity.Property(e => e.FSkontoWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkontoWert");

                entity.Property(e => e.NAusliefernVorZahlung).HasColumnName("nAusliefernVorZahlung");

                entity.Property(e => e.NLastschrift).HasColumnName("nLastschrift");

                entity.Property(e => e.NMahnwesenAktiv).HasColumnName("nMahnwesenAktiv");

                entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");

                entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");

                entity.Property(e => e.NSkontoZeitraum).HasColumnName("nSkontoZeitraum");
            });

            modelBuilder.Entity<TZahlungsausgangLogeintrag>(entity =>
            {
                entity.HasKey(e => e.KZahlungsausgangLogeintrag);

                entity.ToTable("tZahlungsausgangLogeintrag");

                entity.Property(e => e.KZahlungsausgangLogeintrag).HasColumnName("kZahlungsausgangLogeintrag");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CMeldung)
                    .IsRequired()
                    .HasMaxLength(2048)
                    .IsUnicode(false)
                    .HasColumnName("cMeldung");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.DAnlagedatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dAnlagedatum");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.DZeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeitpunkt");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KAnlagebenutzer).HasColumnName("kAnlagebenutzer");

                entity.Property(e => e.KBuchungsbenutzer).HasColumnName("kBuchungsbenutzer");

                entity.Property(e => e.KGutschrift).HasColumnName("kGutschrift");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KZahlungsabgleichLogsitzung).HasColumnName("kZahlungsabgleichLogsitzung");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.NSchweregrad).HasColumnName("nSchweregrad");

                entity.HasOne(d => d.KZahlungsabgleichLogsitzungNavigation)
                    .WithMany(p => p.TZahlungsausgangLogeintrag)
                    .HasForeignKey(d => d.KZahlungsabgleichLogsitzung)
                    .HasConstraintName("FK_tZahlungsausgangLogeintrag_kZahlungsabgleichLogsitzung");
            });

            modelBuilder.Entity<TZalog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tZALog");

                entity.Property(e => e.CDatum)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cDatum");

                entity.Property(e => e.CString)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.DDate)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("dDate");
            });

            modelBuilder.Entity<TZavorlage>(entity =>
            {
                entity.HasKey(e => e.KZavorlage);

                entity.ToTable("tZAVorlage");

                entity.Property(e => e.KZavorlage)
                    .ValueGeneratedNever()
                    .HasColumnName("kZAVorlage");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CZahlungsArt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsArt");

                entity.Property(e => e.NPosDatum).HasColumnName("nPosDatum");

                entity.Property(e => e.NPosName).HasColumnName("nPosName");

                entity.Property(e => e.NPosUmsatz).HasColumnName("nPosUmsatz");

                entity.Property(e => e.NPosVerwendung).HasColumnName("nPosVerwendung");

                entity.Property(e => e.NPosVerwendung2).HasColumnName("nPosVerwendung2");

                entity.Property(e => e.NPosVerwendung3).HasColumnName("nPosVerwendung3");

                entity.Property(e => e.NPosVerwendung4).HasColumnName("nPosVerwendung4");

                entity.Property(e => e.NPosVerwendung5).HasColumnName("nPosVerwendung5");

                entity.Property(e => e.NPosVerwendung6).HasColumnName("nPosVerwendung6");

                entity.Property(e => e.NPosVorgang).HasColumnName("nPosVorgang");

                entity.Property(e => e.NPosVorname).HasColumnName("nPosVorname");

                entity.Property(e => e.NSpalten).HasColumnName("nSpalten");

                entity.Property(e => e.NTrenner).HasColumnName("nTrenner");

                entity.Property(e => e.NZeilen).HasColumnName("nZeilen");
            });

            modelBuilder.Entity<TZustand>(entity =>
            {
                entity.HasKey(e => e.KZustand);

                entity.ToTable("tZustand");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CColor)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("cColor");

                entity.Property(e => e.CSuffix)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cSuffix");

                entity.Property(e => e.NAktiv).HasColumnName("nAktiv");

                entity.Property(e => e.NAmazonCode).HasColumnName("nAmazonCode");

                entity.Property(e => e.NCode).HasColumnName("nCode");

                entity.Property(e => e.NEbayCode).HasColumnName("nEbayCode");

                entity.Property(e => e.NEinschraenkung).HasColumnName("nEinschraenkung");

                entity.Property(e => e.NFfncode).HasColumnName("nFFNCode");

                entity.Property(e => e.NLieferantenEntfernen).HasColumnName("nLieferantenEntfernen");

                entity.Property(e => e.NSort)
                    .HasColumnName("nSort")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<TZustandKategorie>(entity =>
            {
                entity.HasKey(e => e.KZustandKategorie);

                entity.ToTable("tZustandKategorie");

                entity.Property(e => e.KZustandKategorie).HasColumnName("kZustandKategorie");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NIstMarkiert).HasColumnName("nIstMarkiert");
            });

            modelBuilder.Entity<TZustandSprache>(entity =>
            {
                entity.HasKey(e => new { e.KZustand, e.KSprache });

                entity.ToTable("tZustandSprache");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<TZustandWarengruppe>(entity =>
            {
                entity.HasKey(e => e.KZustandWarengruppe);

                entity.ToTable("tZustandWarengruppe");

                entity.Property(e => e.KZustandWarengruppe).HasColumnName("kZustandWarengruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");
            });

            modelBuilder.Entity<Tangebotnr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tangebotnr");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KAngebotNr).HasColumnName("kAngebotNr");
            });

            modelBuilder.Entity<Tansprechpartner>(entity =>
            {
                entity.HasKey(e => e.KAnsprechpartner);

                entity.ToTable("tansprechpartner");

                entity.HasIndex(e => e.KKunde, "IX_tansprechpartner_kKunde");

                entity.HasIndex(e => e.KLieferant, "IX_tansprechpartner_kLieferant");

                entity.Property(e => e.KAnsprechpartner)
                    .ValueGeneratedNever()
                    .HasColumnName("kAnsprechpartner");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAbteilung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbteilung");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CFax)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTel)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CVorName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorName");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<Tartikeldownload>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KDownload });

                entity.ToTable("tartikeldownload");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KDownload).HasColumnName("kDownload");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");
            });

            modelBuilder.Entity<Tartikelkonfiggruppe>(entity =>
            {
                entity.HasKey(e => e.KArtikelkonfiggruppe);

                entity.ToTable("tartikelkonfiggruppe");

                entity.HasIndex(e => e.KArtikel, "IX_tartikelkonfiggruppe_kArtikel");

                entity.Property(e => e.KArtikelkonfiggruppe).HasColumnName("kArtikelkonfiggruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<Tbenutzer>(entity =>
            {
                entity.HasKey(e => e.KBenutzer);

                entity.ToTable("tbenutzer");

                entity.HasIndex(e => e.CLogin, "UQ_tbenutzer_cLogin")
                    .IsUnique();

                entity.Property(e => e.KBenutzer)
                    .ValueGeneratedNever()
                    .HasColumnName("kBenutzer");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAbteilung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAbteilung");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CLogin)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cLogin");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CPasswort)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cPasswort");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.ISalt)
                    .HasColumnName("iSalt")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");
            });

            modelBuilder.Entity<Tbenutzerrechte>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbenutzerrechte");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBenutzerRechte).HasColumnName("kBenutzerRechte");

                entity.Property(e => e.NRechte).HasColumnName("nRechte");
            });

            modelBuilder.Entity<Tbestelleigenschaft>(entity =>
            {
                entity.HasKey(e => e.KBestellEigenschaft);

                entity.ToTable("tbestelleigenschaft");

                entity.HasIndex(e => e.KArtikel, "IX_tbestelleigenschaft_kArtikel");

                entity.HasIndex(e => e.KBestellPos, "IX_tbestelleigenschaft_kBestellPos");

                entity.HasIndex(e => e.KEigenschaftWert, "IX_tbestelleigenschaft_kEigenschaftWert");

                entity.Property(e => e.KBestellEigenschaft)
                    .ValueGeneratedNever()
                    .HasColumnName("kBestellEigenschaft");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.FNettoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNettoPreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");
            });

            modelBuilder.Entity<Tbestellnr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbestellnr");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBestellNr).HasColumnName("kBestellNr");
            });

            modelBuilder.Entity<Tbestellpos>(entity =>
            {
                entity.HasKey(e => e.KBestellPos);

                entity.ToTable("tbestellpos");

                entity.HasIndex(e => e.TBestellungKBestellung, "IX_dbo_tbestellpos_tBestellung_kBestellung");

                entity.HasIndex(e => e.CString, "IX_tbestellpos_cString");

                entity.HasIndex(e => new { e.CUnique, e.KKonfigitem }, "IX_tbestellpos_cUnique_kKonfigItem");

                entity.HasIndex(e => e.KAmazonBestellungPos, "IX_tbestellpos_kAmazonBestellungPos");

                entity.HasIndex(e => new { e.KBestellStueckliste, e.TArtikelKArtikel }, "IX_tbestellpos_kBestellStueckliste_tArtikel_kArtikel_INCL");

                entity.HasIndex(e => e.KBestellStueckliste, "IX_tbestellpos_kBestellstueckliste_INCL");

                entity.HasIndex(e => new { e.NType, e.TBestellungKBestellung }, "IX_tbestellpos_nType_tBestellung_kBestellung_nAnzahl_fRabatt_fVKNetto_fEKNetto");

                entity.HasIndex(e => e.TArtikelKArtikel, "IX_tbestellpos_tArtikel_kArtikel_INCL");

                entity.HasIndex(e => e.TBestellungKBestellung, "IX_tbestellpos_tBestellung_kBestellung");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemID");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CStringStandard)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStringStandard");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionID");

                entity.Property(e => e.CUnique)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUnique");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.KBestellStueckliste)
                    .HasColumnName("kBestellStueckliste")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnzahl");

                entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NSort)
                    .HasColumnName("nSort")
                    .HasDefaultValueSql("((0.0))");

                entity.Property(e => e.NType).HasColumnName("nType");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");

                entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");
            });

            modelBuilder.Entity<Tdblog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tdblog");

                entity.HasIndex(e => e.DZeit, "IX_tdblog_dZeit");

                entity.Property(e => e.CException)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cException");

                entity.Property(e => e.CInfo)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cInfo");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.DZeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dZeit");
            });

            modelBuilder.Entity<Tdownloadsprache>(entity =>
            {
                entity.HasKey(e => new { e.KDownload, e.KSprache });

                entity.ToTable("tdownloadsprache");

                entity.Property(e => e.KDownload).HasColumnName("kDownload");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<Teigenschaft>(entity =>
            {
                entity.HasKey(e => e.KEigenschaft);

                entity.ToTable("teigenschaft");

                entity.HasIndex(e => new { e.KArtikel, e.CTyp }, "IX_teigenschaft_kArtikel_cTyp");

                entity.Property(e => e.KEigenschaft)
                    .ValueGeneratedNever()
                    .HasColumnName("kEigenschaft");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.CTyp)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cTyp")
                    .HasDefaultValueSql("('SELECTBOX')");

                entity.Property(e => e.CWaehlbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cWaehlbar")
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<Teigenschaftwert>(entity =>
            {
                entity.HasKey(e => e.KEigenschaftWert);

                entity.ToTable("teigenschaftwert");

                entity.HasIndex(e => e.CArtNr, "IX_teigenschaftwert_cArtNr");

                entity.HasIndex(e => e.CBarcode, "IX_teigenschaftwert_cBarcode");

                entity.HasIndex(e => e.KEigenschaft, "IX_teigenschaftwert_kEigenschaft");

                entity.Property(e => e.KEigenschaftWert)
                    .ValueGeneratedNever()
                    .HasColumnName("kEigenschaftWert");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.FAufpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufpreis");

                entity.Property(e => e.FAufpreisNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufpreisNetto");

                entity.Property(e => e.FGewichtDiff)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewichtDiff");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<Teinstellungen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("teinstellungen");

                entity.Property(e => e.CBeschreibung)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDrucker)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDrucker");

                entity.Property(e => e.CEtikettDrucker)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEtikettDrucker");

                entity.Property(e => e.CFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFaxParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFaxParam");

                entity.Property(e => e.CKopfPic)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKopfPic");

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull");

                entity.Property(e => e.CLagerbestand)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerbestand");

                entity.Property(e => e.CLieferschein2x)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLieferschein2x");

                entity.Property(e => e.CLogPfad)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cLogPfad");

                entity.Property(e => e.CLootSize)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLootSize");

                entity.Property(e => e.CRechnung2x)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cRechnung2x");

                entity.Property(e => e.CRechnungsDrucker)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsDrucker");

                entity.Property(e => e.CUst)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cUSt");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.KEinstellungen).HasColumnName("kEinstellungen");

                entity.Property(e => e.NAuftragAendern).HasColumnName("nAuftragAendern");

                entity.Property(e => e.NLagerAnzahl).HasColumnName("nLagerAnzahl");

                entity.Property(e => e.NLog).HasColumnName("nLog");

                entity.Property(e => e.NRunden)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("nRunden");

                entity.Property(e => e.NSnabfragen).HasColumnName("nSNAbfragen");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<Teklieferantpreise>(entity =>
            {
                entity.HasKey(e => e.KEklieferantPreise);

                entity.ToTable("teklieferantpreise");

                entity.HasIndex(e => e.KArtikel, "IX_teklieferantpreise_kArtikel");

                entity.Property(e => e.KEklieferantPreise)
                    .ValueGeneratedNever()
                    .HasColumnName("kEKLieferantPreise");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FPreis1)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis1");

                entity.Property(e => e.FPreis2)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis2");

                entity.Property(e => e.FPreis3)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis3");

                entity.Property(e => e.FPreis4)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis4");

                entity.Property(e => e.FPreis5)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis5");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NAnzahl1).HasColumnName("nAnzahl1");

                entity.Property(e => e.NAnzahl2).HasColumnName("nAnzahl2");

                entity.Property(e => e.NAnzahl3).HasColumnName("nAnzahl3");

                entity.Property(e => e.NAnzahl4).HasColumnName("nAnzahl4");

                entity.Property(e => e.NAnzahl5).HasColumnName("nAnzahl5");
            });

            modelBuilder.Entity<Tfirma>(entity =>
            {
                entity.HasKey(e => e.KFirma);

                entity.ToTable("tfirma");

                entity.Property(e => e.KFirma)
                    .ValueGeneratedNever()
                    .HasColumnName("kFirma");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.CBank)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBank");

                entity.Property(e => e.CBic)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBIC");

                entity.Property(e => e.CBlz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBLZ");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFusszeile)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFusszeile");

                entity.Property(e => e.CGlaeubigerId)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("cGlaeubigerID");

                entity.Property(e => e.CIban)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cIBAN");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIntrashipKdNr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cIntrashipKdNr");

                entity.Property(e => e.CKontoInhaber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKontoInhaber");

                entity.Property(e => e.CKontoNr)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKontoNr");

                entity.Property(e => e.CKopfGrafik)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKopfGrafik");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLandISO");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPayPalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("cPayPalEMail");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CSteuerNr)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("cSteuerNr");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CUnternehmer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUnternehmer");

                entity.Property(e => e.CUpskdNr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cUPSKdNr");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.NKleinunternehmer).HasColumnName("nKleinunternehmer");
            });

            modelBuilder.Entity<Tgutschrift>(entity =>
            {
                entity.HasKey(e => e.KGutschrift);

                entity.ToTable("tgutschrift");

                entity.HasIndex(e => e.KKunde, "IX_tgutschrift_kKunde");

                entity.HasIndex(e => e.KRechnung, "IX_tgutschrift_kRechnung");

                entity.Property(e => e.KGutschrift)
                    .ValueGeneratedNever()
                    .HasColumnName("kGutschrift");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGutschriftNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGutschriftNr");

                entity.Property(e => e.CKurzText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzText");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CText)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.CVersandlandWaehrung)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandWaehrung")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.FVersandlandWaehrungFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandlandWaehrungFaktor")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsAdresse).HasColumnName("kRechnungsAdresse");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NErweitert)
                    .HasColumnName("nErweitert")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Tgutschrifteigenschaft>(entity =>
            {
                entity.HasKey(e => e.KGutschriftEigenschaft);

                entity.ToTable("tgutschrifteigenschaft");

                entity.Property(e => e.KGutschriftEigenschaft)
                    .ValueGeneratedNever()
                    .HasColumnName("kGutschriftEigenschaft");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FNettoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNettoPreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            });

            modelBuilder.Entity<Tinetadress>(entity =>
            {
                entity.HasKey(e => new { e.KInetAdress, e.KShop });

                entity.ToTable("tinetadress");

                entity.Property(e => e.KInetAdress).HasColumnName("kInetAdress");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStadt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStadt");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<Tinetbestellpos>(entity =>
            {
                entity.HasKey(e => new { e.KInetBestellPos, e.KShop });

                entity.ToTable("tinetbestellpos");

                entity.Property(e => e.KInetBestellPos).HasColumnName("kInetBestellPos");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CUnique)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUnique");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.KArikel).HasColumnName("kArikel");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnzahl");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<Tinetbestellposeigenschaft>(entity =>
            {
                entity.HasKey(e => new { e.KInetBestellPosEigenschaft, e.KShop });

                entity.ToTable("tinetbestellposeigenschaft");

                entity.Property(e => e.KInetBestellPosEigenschaft).HasColumnName("kInetBestellPosEigenschaft");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.FAufpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufpreis");

                entity.Property(e => e.KEigenschaft).HasColumnName("kEigenschaft");

                entity.Property(e => e.KEigenschaftWert).HasColumnName("kEigenschaftWert");

                entity.Property(e => e.KInetBestellPos).HasColumnName("kInetBestellPos");
            });

            modelBuilder.Entity<Tinetbestellung>(entity =>
            {
                entity.HasKey(e => new { e.KInetBestellung, e.KShop });

                entity.ToTable("tinetbestellung");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAbgeholt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAbgeholt")
                    .IsFixedLength(true);

                entity.Property(e => e.CInetBestNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInetBestNr");

                entity.Property(e => e.CKampagne)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKampagne");

                entity.Property(e => e.CKampagneName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKampagneName");

                entity.Property(e => e.CKampagneParam)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKampagneParam");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CModulId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModulID");

                entity.Property(e => e.CPuizahlungsdaten)
                    .IsUnicode(false)
                    .HasColumnName("cPUIZahlungsdaten");

                entity.Property(e => e.CReferrer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cReferrer");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.CTracking)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTracking");

                entity.Property(e => e.CUserAgent)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cUserAgent");

                entity.Property(e => e.CVersandInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandInfo");

                entity.Property(e => e.DTimestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("dTimestamp");

                entity.Property(e => e.DVersandDatum)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("dVersandDatum");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(18, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.KBestellHinweis)
                    .HasColumnName("kBestellHinweis")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferAdresse).HasColumnName("kLieferAdresse");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KWaehrung).HasColumnName("kWaehrung");

                entity.Property(e => e.KWarenkorb).HasColumnName("kWarenkorb");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NMaxLiefertage).HasColumnName("nMaxLiefertage");

                entity.Property(e => e.NZahlungsTyp).HasColumnName("nZahlungsTyp");
            });

            modelBuilder.Entity<Tinetkunde>(entity =>
            {
                entity.HasKey(e => new { e.KInetKunde, e.KShop });

                entity.ToTable("tinetkunde");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CGeburtstag)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cGeburtstag");

                entity.Property(e => e.CHaendler)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cHaendler")
                    .IsFixedLength(true);

                entity.Property(e => e.CHerkunft)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunft");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.CNewsletter)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNewsletter")
                    .IsFixedLength(true);

                entity.Property(e => e.CPasswort)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cPasswort");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStadt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cStadt");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(45)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NAktiv)
                    .HasColumnName("nAktiv")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");
            });

            modelBuilder.Entity<Tinetzahlungsinfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tinetzahlungsinfo");

                entity.HasIndex(e => e.KBestellung, "IX_tinetzahlungsinfo_kBestellung")
                    .IsClustered();

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBankName");

                entity.Property(e => e.CBic)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cBIC");

                entity.Property(e => e.CBlz)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cBLZ");

                entity.Property(e => e.CCvv)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cCVV");

                entity.Property(e => e.CGueltigkeit)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cGueltigkeit");

                entity.Property(e => e.CIban)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cIBAN");

                entity.Property(e => e.CInhaber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInhaber");

                entity.Property(e => e.CKartenNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKartenNr");

                entity.Property(e => e.CKartenTyp)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKartenTyp");

                entity.Property(e => e.CKontoNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKontoNr");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KInetZahlungsInfo).HasColumnName("kInetZahlungsInfo");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<Tintervall>(entity =>
            {
                entity.HasKey(e => e.KIntervall);

                entity.ToTable("tintervall");

                entity.HasIndex(e => e.KBestellung, "IX_tintervall_kBestellung");

                entity.Property(e => e.KIntervall)
                    .ValueGeneratedNever()
                    .HasColumnName("kIntervall");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DEnddatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dEnddatum");

                entity.Property(e => e.DStartdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dStartdatum");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferAdresse).HasColumnName("kLieferAdresse");

                entity.Property(e => e.KRechnungsAdresse).HasColumnName("kRechnungsAdresse");

                entity.Property(e => e.NAlleXjahre).HasColumnName("nAlleXJahre");

                entity.Property(e => e.NAlleXmonate).HasColumnName("nAlleXMonate");

                entity.Property(e => e.NAlleXtage).HasColumnName("nAlleXTage");
            });

            modelBuilder.Entity<Tintervallauftrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tintervallauftrag");

                entity.HasIndex(e => e.KIntervall, "UQ_tintervallauftrag_kIntervall")
                    .IsUnique();

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dStart");

                entity.Property(e => e.KIntervall).HasColumnName("kIntervall");
            });

            modelBuilder.Entity<Tintervallpos>(entity =>
            {
                entity.HasKey(e => e.KIntervallPos);

                entity.ToTable("tintervallpos");

                entity.HasIndex(e => e.KIntervall, "IX_tintervallpos_kIntervall");

                entity.Property(e => e.KIntervallPos)
                    .ValueGeneratedNever()
                    .HasColumnName("kIntervallPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KIntervall).HasColumnName("kIntervall");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnzahl");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<Tintervallposeigenschaft>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tintervallposeigenschaft");

                entity.HasIndex(e => e.KIntervallPos, "IX_tintervallposeigenschaft_kIntervallPos");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KBestellEigenschaft).HasColumnName("kBestellEigenschaft");

                entity.Property(e => e.KIntervallPos).HasColumnName("kIntervallPos");
            });

            modelBuilder.Entity<Tkategorie>(entity =>
            {
                entity.HasKey(e => e.KKategorie);

                entity.ToTable("tkategorie");

                entity.HasIndex(e => e.CAktiv, "IX_tkategorie_cAktiv");

                entity.HasIndex(e => e.KOberKategorie, "IX_tkategorie_kOberKategorie");

                entity.HasIndex(e => e.NSort, "IX_tkategorie_nSort");

                entity.Property(e => e.KKategorie)
                    .ValueGeneratedNever()
                    .HasColumnName("kKategorie");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<Tkategorieartikel>(entity =>
            {
                entity.HasKey(e => e.KKategorieArtikel);

                entity.ToTable("tkategorieartikel");

                entity.HasIndex(e => e.KArtikel, "IX_tkategorieartikel_kArtikel");

                entity.HasIndex(e => e.KKategorie, "IX_tkategorieartikel_kKategorie");

                entity.HasIndex(e => new { e.KArtikel, e.KKategorie }, "UQ_tkategorieartikel_kArtikel_kKategorie")
                    .IsUnique();

                entity.Property(e => e.KKategorieArtikel)
                    .ValueGeneratedNever()
                    .HasColumnName("kKategorieArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            });

            modelBuilder.Entity<Tkonfiggruppe>(entity =>
            {
                entity.HasKey(e => e.KKonfiggruppe);

                entity.ToTable("tkonfiggruppe");

                entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.Bild)
                    .HasColumnType("image")
                    .HasColumnName("bild");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.NMax).HasColumnName("nMax");

                entity.Property(e => e.NMin).HasColumnName("nMin");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<Tkonfiggruppesprache>(entity =>
            {
                entity.HasKey(e => new { e.KKonfiggruppe, e.KSprache });

                entity.ToTable("tkonfiggruppesprache");

                entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<Tkonfigitem>(entity =>
            {
                entity.HasKey(e => e.KKonfigitem);

                entity.ToTable("tkonfigitem");

                entity.HasIndex(e => e.KArtikel, "IX_tkonfigitem_kArtikel");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.BEmpfohlen).HasColumnName("bEmpfohlen");

                entity.Property(e => e.BIgnoreMultiplier).HasColumnName("bIgnoreMultiplier");

                entity.Property(e => e.BName).HasColumnName("bName");

                entity.Property(e => e.BPreis).HasColumnName("bPreis");

                entity.Property(e => e.BRabatt)
                    .HasColumnName("bRabatt")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.BSelektiert).HasColumnName("bSelektiert");

                entity.Property(e => e.BZuschlag)
                    .HasColumnName("bZuschlag")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FInitial)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fInitial")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FMax)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMax")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FMin)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMin")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FStandardpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fStandardpreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKonfiggruppe).HasColumnName("kKonfiggruppe");

                entity.Property(e => e.NPosTyp).HasColumnName("nPosTyp");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<Tkonfigitempreis>(entity =>
            {
                entity.HasKey(e => new { e.KKonfigitem, e.KKundengruppe, e.KShop });

                entity.ToTable("tkonfigitempreis");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPreis");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.NTyp)
                    .HasColumnName("nTyp")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Tkonfigitemsprache>(entity =>
            {
                entity.HasKey(e => new { e.KKonfigitem, e.KSprache });

                entity.ToTable("tkonfigitemsprache");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<Tkonfigshop>(entity =>
            {
                entity.HasKey(e => new { e.Kkonfiggruppe, e.KShop });

                entity.ToTable("tkonfigshop");

                entity.Property(e => e.Kkonfiggruppe).HasColumnName("kkonfiggruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Tkontodaten>(entity =>
            {
                entity.HasKey(e => e.KKontoDaten);

                entity.ToTable("tkontodaten");

                entity.Property(e => e.KKontoDaten)
                    .ValueGeneratedNever()
                    .HasColumnName("kKontoDaten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBankName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBankName");

                entity.Property(e => e.CBic)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBIC");

                entity.Property(e => e.CBlz)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cBLZ");

                entity.Property(e => e.CCvv)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cCVV")
                    .IsFixedLength(true);

                entity.Property(e => e.CGueltigkeit)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cGueltigkeit");

                entity.Property(e => e.CIban)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cIBAN");

                entity.Property(e => e.CInhaber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInhaber");

                entity.Property(e => e.CKartenNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKartenNr");

                entity.Property(e => e.CKartenTyp)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKartenTyp");

                entity.Property(e => e.CKontoNr)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cKontoNr");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");
            });

            modelBuilder.Entity<Tkunde>(entity =>
            {
                entity.HasKey(e => e.KKunde);

                entity.ToTable("tkunde");

                entity.HasIndex(e => e.NDebitorennr, "IX_tKunde_nDebitorenNummer");

                entity.HasIndex(e => new { e.CKundenNr, e.KKunde }, "IX_tkunde_cKundenNr_kKunde_INCL");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CEbayName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayName")
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.CGeburtstag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cGeburtstag");

                entity.Property(e => e.CHerkunft)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunft");

                entity.Property(e => e.CHrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHRNr");

                entity.Property(e => e.CKassenKunde)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKassenKunde")
                    .IsFixedLength(true);

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CNewsletter)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNewsletter")
                    .IsFixedLength(true);

                entity.Property(e => e.CSperre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cSperre")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CSteuerNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSteuerNr");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FProvision)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fProvision");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FSkonto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkonto");

                entity.Property(e => e.KBuyer)
                    .HasColumnName("kBuyer")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");

                entity.Property(e => e.NDrittland).HasColumnName("nDrittland");

                entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");

                entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");

                entity.Property(e => e.NVertreter).HasColumnName("nVertreter");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<Tlager>(entity =>
            {
                entity.HasKey(e => e.KLager);

                entity.ToTable("tlager");

                entity.Property(e => e.KLager)
                    .ValueGeneratedNever()
                    .HasColumnName("kLager");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");
            });

            modelBuilder.Entity<Tlagerbestand>(entity =>
            {
                entity.HasKey(e => e.KArtikel);

                entity.ToTable("tlagerbestand");

                entity.Property(e => e.KArtikel)
                    .ValueGeneratedNever()
                    .HasColumnName("kArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FAufEinkaufsliste)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufEinkaufsliste");

                entity.Property(e => e.FAuslieferungGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuslieferungGesperrt");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FLagerbestandEigen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestandEigen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<TlagerbestandProLagerLagerartikel>(entity =>
            {
                entity.HasKey(e => new { e.KArtikel, e.KWarenlager });

                entity.ToTable("tlagerbestandProLagerLagerartikel");

                entity.HasIndex(e => new { e.KArtikel, e.KWarenlager }, "IX_kArtikel_kWarenlager");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.FAuslieferungGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuslieferungGesperrt");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");
            });

            modelBuilder.Entity<Tlagerort>(entity =>
            {
                entity.HasKey(e => e.KLagerOrt);

                entity.ToTable("tlagerort");

                entity.Property(e => e.KLagerOrt)
                    .ValueGeneratedNever()
                    .HasColumnName("kLagerOrt");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KLager).HasColumnName("kLager");
            });

            modelBuilder.Entity<Tland>(entity =>
            {
                entity.HasKey(e => e.CIso);

                entity.ToTable("tland");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDefaultCulture)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cDefaultCulture");

                entity.Property(e => e.CIso3)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO3");

                entity.Property(e => e.CKontinent)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKontinent");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameEng)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameEng");

                entity.Property(e => e.CNameFra)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameFra");

                entity.Property(e => e.CWaehrung)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung")
                    .HasDefaultValueSql("('')")
                    .IsFixedLength(true);

                entity.Property(e => e.NEu).HasColumnName("nEU");

                entity.Property(e => e.NIsonumeric).HasColumnName("nISONumeric");
            });

            modelBuilder.Entity<Tliefartikel>(entity =>
            {
                entity.HasKey(e => e.KLiefArtikel);

                entity.ToTable("tliefartikel");

                entity.HasIndex(e => e.CLiefArtNr, "IX_tliefartikel_cLiefArtNr");

                entity.HasIndex(e => e.TArtikelKArtikel, "IX_tliefartikel_tArtikel_kArtikel");

                entity.HasIndex(e => e.TLieferantKLieferant, "IX_tliefartikel_tLieferant_kLieferant");

                entity.HasIndex(e => new { e.TArtikelKArtikel, e.TLieferantKLieferant }, "UQ_tliefartikel_tArtikel_kArtikel_tLieferant_kLieferant_INCL")
                    .IsUnique();

                entity.Property(e => e.KLiefArtikel)
                    .ValueGeneratedNever()
                    .HasColumnName("kLiefArtikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CLiefArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLiefArtNr");

                entity.Property(e => e.CLiefFrist)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLiefFrist");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSonstiges)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cSonstiges");

                entity.Property(e => e.CVpeeinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVPEEinheit");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DLbgeaendert)
                    .HasColumnType("datetime")
                    .HasColumnName("dLBGeaendert");

                entity.Property(e => e.FDurchschnittlicheLieferzeit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDurchschnittlicheLieferzeit");

                entity.Property(e => e.FEkbrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKBrutto");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.NAbnahmeIntervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAbnahmeIntervall");

                entity.Property(e => e.NDropShipping).HasColumnName("nDropShipping");

                entity.Property(e => e.NDropShippingStandard).HasColumnName("nDropShippingStandard");

                entity.Property(e => e.NLagerBeachten).HasColumnName("nLagerBeachten");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");

                entity.Property(e => e.NLieferzeitAusLieferant)
                    .HasColumnName("nLieferzeitAusLieferant")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NMindestAbnahme).HasColumnName("nMindestAbnahme");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NVpemenge).HasColumnName("nVPEMenge");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");

                entity.Property(e => e.TLieferantKLieferant).HasColumnName("tLieferant_kLieferant");
            });

            modelBuilder.Entity<Tlieferadresse>(entity =>
            {
                entity.HasKey(e => e.KLieferAdresse);

                entity.ToTable("tlieferadresse");

                entity.Property(e => e.KLieferAdresse)
                    .ValueGeneratedNever()
                    .HasColumnName("kLieferAdresse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<Tlieferant>(entity =>
            {
                entity.HasKey(e => e.KLieferant);

                entity.ToTable("tlieferant");

                entity.HasIndex(e => e.CFirma, "IX_tlieferant_cFirma");

                entity.HasIndex(e => e.CFirmenZusatz, "IX_tlieferant_cFirmenZusatz");

                entity.HasIndex(e => e.CLiefNr, "IX_tlieferant_cLiefNr");

                entity.HasIndex(e => e.CLieferantId, "IX_tlieferant_cLieferantID");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdresszusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdresszusatz");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CExterneDatenUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExterneDatenUrl");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CFirmenZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmenZusatz");

                entity.Property(e => e.CHinweisLieferbedingung)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweisLieferbedingung");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKontakt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKontakt");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLiefNr)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLiefNr");

                entity.Property(e => e.CLieferantId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantID");

                entity.Property(e => e.CNachname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cNachname");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTelDurchwahl)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTelDurchwahl");

                entity.Property(e => e.CTelZentralle)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTelZentralle");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUstid");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FFrachtkosten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFrachtkosten");

                entity.Property(e => e.FMindermengenzuschlag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMindermengenzuschlag");

                entity.Property(e => e.FMindestbestellwert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMindestbestellwert");

                entity.Property(e => e.FMwStFreiposition)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwStFreiposition");

                entity.Property(e => e.FSkonto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkonto");

                entity.Property(e => e.FVersandfreiAb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandfreiAb");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NDropshipping).HasColumnName("nDropshipping");

                entity.Property(e => e.NDropshippingBeiNachnahme).HasColumnName("nDropshippingBeiNachnahme");

                entity.Property(e => e.NDropshippingFreipositionen).HasColumnName("nDropshippingFreipositionen");

                entity.Property(e => e.NJtlFulfillment).HasColumnName("nJtlFulfillment");

                entity.Property(e => e.NKeineEinkaufsliste).HasColumnName("nKeineEinkaufsliste");

                entity.Property(e => e.NKreditorennr).HasColumnName("nKreditorennr");

                entity.Property(e => e.NLieferzeit).HasColumnName("nLieferzeit");

                entity.Property(e => e.NSkontoTage).HasColumnName("nSkontoTage");

                entity.Property(e => e.NStaffelPreisProBestellung).HasColumnName("nStaffelPreisProBestellung");

                entity.Property(e => e.NStandardFirma).HasColumnName("nStandardFirma");

                entity.Property(e => e.NStandardLager).HasColumnName("nStandardLager");

                entity.Property(e => e.NVstfrei).HasColumnName("nVSTFrei");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<Tmahnung>(entity =>
            {
                entity.HasKey(e => e.KMahnung);

                entity.ToTable("tmahnung");

                entity.HasIndex(e => e.KRechnung, "IX_tmahnung_kRechnung");

                entity.Property(e => e.KMahnung)
                    .ValueGeneratedNever()
                    .HasColumnName("kMahnung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CKurzText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzText");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FBruttoBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBruttoBetrag");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NStuffe).HasColumnName("nStuffe");
            });

            modelBuilder.Entity<Tmahnungstext>(entity =>
            {
                entity.HasKey(e => e.KMahnungsText);

                entity.ToTable("tmahnungstext");

                entity.Property(e => e.KMahnungsText)
                    .ValueGeneratedNever()
                    .HasColumnName("kMahnungsText");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBetreff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.FGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGebuehr");

                entity.Property(e => e.NStuffe).HasColumnName("nStuffe");
            });

            modelBuilder.Entity<Tnews>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tnews");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBetreff)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBetreff");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CPicture)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPicture");

                entity.Property(e => e.CText)
                    .IsUnicode(false)
                    .HasColumnName("cText");

                entity.Property(e => e.DErstellt)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KNews).HasColumnName("kNews");
            });

            modelBuilder.Entity<Tnummern>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tnummern");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.KAngebot).HasColumnName("kAngebot");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");
            });

            modelBuilder.Entity<TotalsInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalsInvoice", "Report");

                entity.Property(e => e.DiscountValueTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.GrossPriceCodchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("GrossPriceCODChargeTotal");

                entity.Property(e => e.GrossPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.GrossPriceTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.NetPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.NetPriceTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.ShippingCostsVat)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("ShippingCostsVAT");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate");

                entity.Property(e => e.Vatsum)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATSum");
            });

            modelBuilder.Entity<TotalsInvoiceCorrection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalsInvoiceCorrection", "Report");

                entity.Property(e => e.GrossPriceDiscountTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis des Rabatts pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceShippingPositionTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis der Versandposition pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis pro MwSt aufsummiert");

                entity.Property(e => e.InvoiceCorrectionInternalId).HasComment("Interne ID der Rechnungskorrektur");

                entity.Property(e => e.NetPriceDiscountTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis des Rabatts pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceShippingPositionTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis der Versandposition pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("GesamtNettopreis pro MwSt aufsummiert");

                entity.Property(e => e.ShippingCostsVat)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("ShippingCostsVAT")
                    .HasComment("MwSt der Versandkosten pro MwSt aufsummiert");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt in Prozent");

                entity.Property(e => e.Vatsum)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATSum")
                    .HasComment("Summe der MwSt ");
            });

            modelBuilder.Entity<TotalsPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalsPurchaseOrder", "Report");

                entity.Property(e => e.GrossPriceDiscountTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis des Rabatts pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceMinimumQuantitySurchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis des Mindermengenzuschlags pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceShippingPositionTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis der Versandposition pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceShippingSurchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis des Versandzuschlags pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceDiscountTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis des Rabatts pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceMinimumQuantitySurchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis des Mindermengenzuschlags pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceShippingPositionTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis der Versandposition pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceShippingSurchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis des Versandzuschlags pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("GesamtNettopreis pro MwSt aufsummiert");

                entity.Property(e => e.PurchaseOrderInternalId).HasComment("Interne ID der Lieferantenbestellung");

                entity.Property(e => e.ShippingCostsVat)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("ShippingCostsVAT")
                    .HasComment("MwSt der Versandkosten pro MwSt aufsummiert");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt in Prozent");

                entity.Property(e => e.Vatsum)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATSum")
                    .HasComment("Summe der MwSt ");
            });

            modelBuilder.Entity<TotalsSalesOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalsSalesOrder", "Report");

                entity.Property(e => e.DiscountValueTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtrabattbetrag pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceCodchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("GrossPriceCODChargeTotal")
                    .HasComment("Bruttopreis der Nachnahmegebühr pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceShippingPositionTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Bruttopreis der Versandposition pro MwSt aufsummiert");

                entity.Property(e => e.GrossPriceTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Gesamtbruttopreis pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceShippingPositionTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("Nettopreis der Versandposition pro MwSt aufsummiert");

                entity.Property(e => e.NetPriceTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasComment("GesamtNettopreis pro MwSt aufsummiert");

                entity.Property(e => e.SalesOrderInternalId).HasComment("Interne ID des Auftrags");

                entity.Property(e => e.ShippingCostsVat)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("ShippingCostsVAT")
                    .HasComment("MwSt der Versandkosten pro MwSt aufsummiert");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate")
                    .HasComment("MwSt in Prozent");

                entity.Property(e => e.Vatsum)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATSum")
                    .HasComment("Summe der MwSt ");
            });

            modelBuilder.Entity<TotalsSalesQuotation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TotalsSalesQuotation", "Report");

                entity.Property(e => e.DiscountValueTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.GrossPriceCodchargeTotal)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("GrossPriceCODChargeTotal");

                entity.Property(e => e.GrossPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.GrossPriceTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.NetPriceShippingPositionTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.NetPriceTotal).HasColumnType("decimal(25, 13)");

                entity.Property(e => e.ShippingCostsVat)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("ShippingCostsVAT");

                entity.Property(e => e.Vatrate)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("VATRate");

                entity.Property(e => e.Vatsum)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("VATSum");
            });

            modelBuilder.Entity<Tpk>(entity =>
            {
                entity.HasKey(e => e.CName);

                entity.ToTable("tpk");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.DChanged)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("dChanged");

                entity.Property(e => e.Nummer).HasColumnName("nummer");
            });

            modelBuilder.Entity<Tprintform>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tprintform");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAngebotsText)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cAngebotsText");

                entity.Property(e => e.CAuftragsText)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsText");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit")
                    .HasDefaultValueSql("('Y')")
                    .IsFixedLength(true);

                entity.Property(e => e.CFdrucken)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cFdrucken")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CFirmendatendrucken)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cFirmendatendrucken")
                    .IsFixedLength(true);

                entity.Property(e => e.CFirmendatenklein)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cFirmendatenklein")
                    .IsFixedLength(true);

                entity.Property(e => e.CFuss)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFuss");

                entity.Property(e => e.CFusszeichnen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cFusszeichnen")
                    .IsFixedLength(true);

                entity.Property(e => e.CIgltext)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cIGLText");

                entity.Property(e => e.CKdNrDrucken)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKdNrDrucken")
                    .IsFixedLength(true);

                entity.Property(e => e.CKopfzeichnen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKopfzeichnen")
                    .IsFixedLength(true);

                entity.Property(e => e.CLieferText)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("cLieferText")
                    .HasDefaultValueSql("('LIEFERSCHEIN')");

                entity.Property(e => e.CMwStAusweisen)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cMwStAusweisen")
                    .HasDefaultValueSql("('N')")
                    .IsFixedLength(true);

                entity.Property(e => e.CRechnungZzglMwst)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungZzglMwst")
                    .IsFixedLength(true);

                entity.Property(e => e.CRechnungsText)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsText");

                entity.Property(e => e.CReverseCharge)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cReverseCharge");

                entity.Property(e => e.CUstFreiText)
                    .HasMaxLength(512)
                    .IsUnicode(false)
                    .HasColumnName("cUStFreiText");

                entity.Property(e => e.CZahlungsziel)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsziel")
                    .HasDefaultValueSql("('Das Zahlungsziel beträgt <T> Tage.')");

                entity.Property(e => e.CbzglAuftragDrucken)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cbzglAuftragDrucken")
                    .IsFixedLength(true);

                entity.Property(e => e.FFbreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFbreite")
                    .HasDefaultValueSql("((0.3))");

                entity.Property(e => e.FFdlinks)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFDLinks");

                entity.Property(e => e.FFdoben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFDOben");

                entity.Property(e => e.FFmitte)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFmitte")
                    .HasDefaultValueSql("((14.85))");

                entity.Property(e => e.FFoben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFoben")
                    .HasDefaultValueSql("((9.0))");

                entity.Property(e => e.FFunten)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFunten")
                    .HasDefaultValueSql("((20.3))");

                entity.Property(e => e.FGlinks)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGLinks");

                entity.Property(e => e.FGrechts)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGRechts");

                entity.Property(e => e.FKalinks)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKALinks");

                entity.Property(e => e.FKaoben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKAOben");

                entity.Property(e => e.NLadrDrucken).HasColumnName("nLAdrDrucken");

                entity.Property(e => e.NPixelFont)
                    .HasColumnName("nPixelFont")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NTelDrucken)
                    .HasColumnName("nTelDrucken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NVariationAufpreis)
                    .HasColumnName("nVariationAufpreis")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NZwischensumme)
                    .HasColumnName("nZwischensumme")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Trechnung>(entity =>
            {
                entity.HasKey(e => e.KRechnung);

                entity.ToTable("trechnung");

                entity.HasIndex(e => e.CBezahlt, "IX_trechnung_cBezahlt");

                entity.HasIndex(e => e.CRechnungsNr, "IX_trechnung_cRechnungsNr");

                entity.HasIndex(e => e.CStatus, "IX_trechnung_cStatus");

                entity.HasIndex(e => e.DErstellt, "IX_trechnung_dErstellt");

                entity.HasIndex(e => e.TKundeKKunde, "IX_trechnung_tKunde_kKunde");

                entity.HasIndex(e => e.TBestellungKBestellung, "UQ_trechnung_tBestellung_kBestellung")
                    .IsUnique();

                entity.Property(e => e.KRechnung)
                    .ValueGeneratedNever()
                    .HasColumnName("kRechnung");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CBezahlt)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBezahlt")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStatus")
                    .IsFixedLength(true);

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DEmailversandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dEmailversandt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.NInkassoStatus).HasColumnName("nInkassoStatus");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");

                entity.Property(e => e.TBenutzerKBenutzer).HasColumnName("tBenutzer_kBenutzer");

                entity.Property(e => e.TBestellungKBestellung).HasColumnName("tBestellung_kBestellung");

                entity.Property(e => e.TKundeKKunde).HasColumnName("tKunde_kKunde");
            });

            modelBuilder.Entity<Trechnungnr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("trechnungnr");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.KRechnungNr).HasColumnName("kRechnungNr");
            });

            modelBuilder.Entity<Trechnungsadresse>(entity =>
            {
                entity.HasKey(e => e.KRechnungsAdresse);

                entity.ToTable("trechnungsadresse");

                entity.Property(e => e.KRechnungsAdresse)
                    .ValueGeneratedNever()
                    .HasColumnName("kRechnungsAdresse");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZhaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cZHaenden");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<Tsynch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tsynch");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CIp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cIP");
            });

            modelBuilder.Entity<Tversandart>(entity =>
            {
                entity.HasKey(e => e.KVersandArt);

                entity.ToTable("tversandart");

                entity.Property(e => e.KVersandArt)
                    .ValueGeneratedNever()
                    .HasColumnName("kVersandArt");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAmazonCarrierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonCarrierCode");

                entity.Property(e => e.CAuftragsText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsText");

                entity.Property(e => e.CDruckText)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDruckText");

                entity.Property(e => e.CEbayCarrierCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCarrierCode");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTrackingIdregex)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingIDRegex");

                entity.Property(e => e.CTrackingUrlTemplate)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingUrlTemplate");

                entity.Property(e => e.CZahlungsInfo)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsInfo")
                    .IsFixedLength(true);

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.FVkfreiAb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKFreiAB");

                entity.Property(e => e.FZusatzGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzGewicht");

                entity.Property(e => e.KEtikettenFormular)
                    .HasColumnName("kEtikettenFormular")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KMainVersandart).HasColumnName("kMainVersandart");

                entity.Property(e => e.KShippingServiceProviderType).HasColumnName("kShippingServiceProviderType");

                entity.Property(e => e.KVersanddatenExportVorlage).HasColumnName("kVersanddatenExportVorlage");

                entity.Property(e => e.KVersanddatenImportVorlage).HasColumnName("kVersanddatenImportVorlage");

                entity.Property(e => e.NAmazonPrime).HasColumnName("nAmazonPrime");

                entity.Property(e => e.NEigeneVersandart).HasColumnName("nEigeneVersandart");

                entity.Property(e => e.NEtikettenDrucken)
                    .HasColumnName("nEtikettenDrucken")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NEtikettenStartRueckfrage)
                    .HasColumnName("nEtikettenStartRueckfrage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NExpress).HasColumnName("nExpress");

                entity.Property(e => e.NPrioritaet).HasColumnName("nPrioritaet");

                entity.Property(e => e.NTrackingIdbis)
                    .HasColumnName("nTrackingIDBis")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.NTrackingIdeingabePflicht).HasColumnName("nTrackingIDEingabePflicht");

                entity.Property(e => e.NTrackingIdvon)
                    .HasColumnName("nTrackingIDVon")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NVersandMailSenden)
                    .HasColumnName("nVersandMailSenden")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NVersandSchnittstelle)
                    .HasColumnName("nVersandSchnittstelle")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NVerwiegePflicht).HasColumnName("nVerwiegePflicht");
            });

            modelBuilder.Entity<Tversion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tversion");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CVersion)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersion");
            });

            modelBuilder.Entity<Twebversand>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("twebversand");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CApikey)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAPIKEY");

                entity.Property(e => e.CBenutzerFtp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerFtp");

                entity.Property(e => e.CBenutzerWeb)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzerWeb");

                entity.Property(e => e.CFtppath)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFTPPath");

                entity.Property(e => e.CPasswortFtp)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cPasswortFtp");

                entity.Property(e => e.CPasswortWeb)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPasswortWeb");

                entity.Property(e => e.CPasv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPASV")
                    .IsFixedLength(true);

                entity.Property(e => e.CServerFtp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cServerFtp");

                entity.Property(e => e.CServerUrl)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cServerURL");

                entity.Property(e => e.KWebVersand).HasColumnName("kWebVersand");

                entity.Property(e => e.NHttpPut)
                    .HasColumnName("nHttpPut")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NShopAuftragsNr)
                    .HasColumnName("nShopAuftragsNr")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("User", "Report");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne ID der Firma");

                entity.Property(e => e.Department)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Abteilung des Benutzers");

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("E-Mail-Adresse");

                entity.Property(e => e.Fax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Faxnummer");

                entity.Property(e => e.InternalId).HasComment("Interne ID des Benutzers");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Mobilnummer");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name des Benutzers");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Hinweis zum Benutzer");

                entity.Property(e => e.Phone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Telefonnummer");
            });

            modelBuilder.Entity<V360GradSicht>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v360GradSicht", "Kunde");

                entity.Property(e => e.AvgWarenkorb).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CGeburtstag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cGeburtstag");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.Gewinn).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KundeSeit).HasColumnType("datetime");

                entity.Property(e => e.KundenGruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KundenKategorie)
                    .HasMaxLength(128)
                    .IsUnicode(false);

                entity.Property(e => e.Kundenguthaben).HasColumnType("decimal(38, 14)");

                entity.Property(e => e.LetzteBestellung).HasColumnType("datetime");

                entity.Property(e => e.RabattKunde).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.StandartZahlungsart)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SummeBestellungOffen).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.SummeRechnungOffen).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.Umsatz).HasColumnType("decimal(38, 10)");
            });

            modelBuilder.Entity<VAbrechnung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAbrechnung", "FulfillmentNetwork");

                entity.Property(e => e.CAbrechnungsNummer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAbrechnungsNummer");

                entity.Property(e => e.CAnmerkung).HasColumnName("cAnmerkung");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.DAbrechnungBis)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungBis");

                entity.Property(e => e.DAbrechnungVon)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungVon");

                entity.Property(e => e.DAuftragErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAuftragErstellt");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFulfillmentLieferant).HasColumnName("kFulfillmentLieferant");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");
            });

            modelBuilder.Entity<VAmazonSfpOrderdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAmazonSfpOrderdata", "FulfillmentNetwork");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.SellerId)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VAmazonSfpShippingdata>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAmazonSfpShippingdata", "FulfillmentNetwork");

                entity.Property(e => e.KVersand).HasColumnName("kVersand");

                entity.Property(e => e.PackageWeight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ShippingMethodAutoCalcWeight).HasColumnName("ShippingMethod.AutoCalcWeight");

                entity.Property(e => e.ShippingMethodCarrierWillPickUp).HasColumnName("ShippingMethod.CarrierWillPickUp");

                entity.Property(e => e.ShippingMethodHeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("ShippingMethod.Height");

                entity.Property(e => e.ShippingMethodLength)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("ShippingMethod.Length");

                entity.Property(e => e.ShippingMethodMinWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("ShippingMethod.MinWeight");

                entity.Property(e => e.ShippingMethodUseInsurance).HasColumnName("ShippingMethod.UseInsurance");

                entity.Property(e => e.ShippingMethodUseWarhouseAddress).HasColumnName("ShippingMethod.UseWarhouseAddress");

                entity.Property(e => e.ShippingMethodWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("ShippingMethod.Weight");

                entity.Property(e => e.ShippingMethodWidth)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("ShippingMethod.Width");
            });

            modelBuilder.Entity<VAmeiseStandardArtikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAmeiseStandardArtikel");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonFNSKU");

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CKurzBeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzBeschreibung");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CLieferstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferstatus");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .IsFixedLength(true);

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTitleTag)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cTitleTag");

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.CUrlPfad)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUrlPfad");

                entity.Property(e => e.CVpeeinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVPEEinheit");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DLetzterEk)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzterEK");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DNeuImSortiment)
                    .HasColumnType("datetime")
                    .HasColumnName("dNeuImSortiment");

                entity.Property(e => e.DZulaufVerfuegbarAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dZulaufVerfuegbarAm");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FGrundpreisMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGrundpreisMenge");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FLetzterEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLetzterEK");

                entity.Property(e => e.FMassMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMassMenge");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVKbrutto");

                entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");

                entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");

                entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NEbayAbgleich).HasColumnName("nEbayAbgleich");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");

                entity.Property(e => e.NZulaufVerfuegbarMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nZulaufVerfuegbarMenge");
            });

            modelBuilder.Entity<VArtikelAttributSprachePlattform>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vArtikelAttributSprachePlattform");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelAttribut).HasColumnName("kArtikelAttribut");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<VArtikelHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vArtikelHistory");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.CKommentar)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.DGebucht)
                    .HasColumnType("datetime")
                    .HasColumnName("dGebucht");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FLagerBestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerBestand");

                entity.Property(e => e.FLagerBestandGesamt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerBestandGesamt");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelHistory)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kArtikelHistory");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KWarenEingang).HasColumnName("kWarenEingang");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            });

            modelBuilder.Entity<VArtikelMerkmalWertKombination>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vArtikelMerkmalWertKombination");

                entity.Property(e => e.BMerkmalBild)
                    .HasColumnType("image")
                    .HasColumnName("bMerkmalBild");

                entity.Property(e => e.BMerkmalVorschauBild)
                    .HasColumnType("image")
                    .HasColumnName("bMerkmalVorschauBild");

                entity.Property(e => e.BWertBild)
                    .HasColumnType("image")
                    .HasColumnName("bWertBild");

                entity.Property(e => e.BWertVorschauBild)
                    .HasColumnType("image")
                    .HasColumnName("bWertVorschauBild");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CMetaDescription)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cMetaDescription");

                entity.Property(e => e.CMetaKeywords)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaKeywords");

                entity.Property(e => e.CMetaTitle)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMetaTitle");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.CSprache)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSprache");

                entity.Property(e => e.CWert)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.KMerkmalWert).HasColumnName("kMerkmalWert");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");

                entity.Property(e => e.NVerwendungszweck).HasColumnName("nVerwendungszweck");
            });

            modelBuilder.Entity<VArtikelStuecklistenKomponenten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vArtikelStuecklistenKomponenten", "ArtikelVerwaltung");

                entity.Property(e => e.Abnahmeintervall).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.AmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AmazonFNSKU");

                entity.Property(e => e.Anmerkung).IsUnicode(false);

                entity.Property(e => e.Artikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Artikelnummer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Asin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.Bearbeiter)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Bearbeitungsdatum).HasColumnType("datetime");

                entity.Property(e => e.Beschreibung).IsUnicode(false);

                entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandEigen).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandGesamt).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Breite).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.DatumLetzerEinkauf).HasColumnType("datetime");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN");

                entity.Property(e => e.EbayBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("EBayBestand");

                entity.Property(e => e.Einheit)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EinkaufspreisDurchschnittNetto).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.EinkaufspreisLetzerEinkauf).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ErscheintAm).HasColumnType("datetime");

                entity.Property(e => e.Erstelldatum).HasColumnType("datetime");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.Gefahrennummer)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Gewicht).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Gewinn)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("gewinn");

                entity.Property(e => e.GewinnInProzent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.GrundpreisWert).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Grundpreiseinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Herkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Hersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Hoehe).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Isbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ISBN");

                entity.Property(e => e.IstMhd).HasColumnName("IstMHD");

                entity.Property(e => e.Jtlfpid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JTLFPID");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVaterStueckliste).HasColumnName("kVaterStueckliste");

                entity.Property(e => e.Kurzbeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false);

                entity.Property(e => e.Laenge).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Lieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Lieferstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Masseinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MetaDescription)
                    .HasMaxLength(4255)
                    .IsUnicode(false);

                entity.Property(e => e.MetaKeywords)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.MindestAbnahmemenge).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Mindestbestand).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PreisAmazon).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PreisEbay).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ReserviertGesamt).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Serie)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Steuerklasse)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TaricCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TitleTag)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Unnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UNNUmmer");

                entity.Property(e => e.Upc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPC");

                entity.Property(e => e.Uvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("UVP");

                entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.VerkaufspreisNetto).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Versandgewicht).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Versandklasse)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Vpe).HasColumnName("VPE");

                entity.Property(e => e.Warengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZustandName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VArtikelZustandMitStandardZustand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vArtikelZustandMitStandardZustand");

                entity.Property(e => e.KHauptartikel).HasColumnName("kHauptartikel");

                entity.Property(e => e.KZustandArtikel).HasColumnName("kZustandArtikel");
            });

            modelBuilder.Entity<VArtikelliste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vArtikelliste", "ArtikelVerwaltung");

                entity.Property(e => e.Abnahmeintervall).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.AmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AmazonFNSKU");

                entity.Property(e => e.Anmerkung).IsUnicode(false);

                entity.Property(e => e.Artikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Artikelnummer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Asin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ASIN");

                entity.Property(e => e.Bearbeiter)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Bearbeitungsdatum).HasColumnType("datetime");

                entity.Property(e => e.Beschreibung).IsUnicode(false);

                entity.Property(e => e.BestandAufEinkaufsliste).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandEigen).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandGesamt).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandImZulauf).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandInAuftraegen).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.BestandVerfuegbar).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Breite).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.DatumLetzerEinkauf).HasColumnType("datetime");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EAN");

                entity.Property(e => e.EbayBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("EBayBestand");

                entity.Property(e => e.Einheit)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.EinkaufspreisDurchschnittNetto).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.EinkaufspreisLetzerEinkauf).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ErscheintAm).HasColumnType("datetime");

                entity.Property(e => e.Erstelldatum).HasColumnType("datetime");

                entity.Property(e => e.Gefahrennummer)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Gewicht).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Gewinn)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("gewinn");

                entity.Property(e => e.GewinnInProzent).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.GrundpreisWert).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Grundpreiseinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Herkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.Hersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Hoehe).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Isbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ISBN");

                entity.Property(e => e.IstMhd).HasColumnName("IstMHD");

                entity.Property(e => e.Jtlfpid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JTLFPID");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelForKategorieArtikel).HasColumnName("kArtikelForKategorieArtikel");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.Kurzbeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false);

                entity.Property(e => e.Laenge).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Lieferant)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Lieferstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Masseinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MetaDescription)
                    .HasMaxLength(4255)
                    .IsUnicode(false);

                entity.Property(e => e.MetaKeywords)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.MindestAbnahmemenge).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Mindestbestand).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PreisAmazon).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.PreisEbay).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.ReserviertGesamt).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Serie)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Steuerklasse)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TaricCode)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TitleTag)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Unnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UNNUmmer");

                entity.Property(e => e.Upc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("UPC");

                entity.Property(e => e.Uvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("UVP");

                entity.Property(e => e.VerkaufspreisBrutto).HasColumnType("numeric(38, 7)");

                entity.Property(e => e.VerkaufspreisNetto).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Versandgewicht).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Versandklasse)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Vpe).HasColumnName("VPE");

                entity.Property(e => e.Warengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ZustandName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VAuftrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAuftrag", "FulfillmentNetwork");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBestellHinweis)
                    .IsUnicode(false)
                    .HasColumnName("cBestellHinweis");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CExterneNummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExterneNummer");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CLand)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLieferscheinnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinnummer");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.COutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundId");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(126)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CWarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cWarehouseId");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KZielLager).HasColumnName("kZielLager");

                entity.Property(e => e.NPlatform).HasColumnName("nPlatform");

                entity.Property(e => e.NPremium).HasColumnName("nPremium");

                entity.Property(e => e.NPrio).HasColumnName("nPrio");

                entity.Property(e => e.PlattformName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VAuftragPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAuftragPos", "FulfillmentNetwork");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.CPosName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPosName");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(38, 8)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KFulfillmentAuftragPos).HasColumnName("kFulfillmentAuftragPos");

                entity.Property(e => e.KStuecklistenVaterPos).HasColumnName("kStuecklistenVaterPos");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NStuecklistenVater).HasColumnName("nStuecklistenVater");
            });

            modelBuilder.Entity<VAuftragsfarben>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vAuftragsfarben", "Statistik");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KFarbe).HasColumnName("kFarbe");
            });

            modelBuilder.Entity<VBestand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestand", "Auslieferung");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            });

            modelBuilder.Entity<VBestand1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestand", "Maintenance");

                entity.Property(e => e.AnzahlInAufträgen)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Anzahl in Aufträgen");

                entity.Property(e => e.Artikelnummer)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CodeZumKorigieren)
                    .HasMaxLength(153)
                    .IsUnicode(false)
                    .HasColumnName("Code zum Korigieren");

                entity.Property(e => e.EigenerLagerbestand)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("Eigener Lagerbestand");

                entity.Property(e => e.FürVerfügbarkeitGesperrt)
                    .HasMaxLength(47)
                    .IsUnicode(false)
                    .HasColumnName("Für Verfügbarkeit gesperrt");

                entity.Property(e => e.GesamterLagerbestand)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("Gesamter Lagerbestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.VerfügbarerBestand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Verfügbarer Bestand");

                entity.Property(e => e.Zulauf)
                    .HasMaxLength(17)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBestellPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPos", "Auslieferung");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemID");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CStringStandard)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStringStandard");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionID");

                entity.Property(e => e.CUnique)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUnique");

                entity.Property(e => e.CVariationen)
                    .IsUnicode(false)
                    .HasColumnName("cVariationen");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVersandgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandgewicht");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.NBestellungTyp).HasColumnName("nBestellungTyp");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NIstChargenartikel).HasColumnName("nIstChargenartikel");

                entity.Property(e => e.NIstLagerfuehrend).HasColumnName("nIstLagerfuehrend");

                entity.Property(e => e.NIstMhdartikel).HasColumnName("nIstMHDArtikel");

                entity.Property(e => e.NIstSeriennummernartikel).HasColumnName("nIstSeriennummernartikel");

                entity.Property(e => e.NIstUmlagerung).HasColumnName("nIstUmlagerung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NSperrungStatus).HasColumnName("nSperrungStatus");

                entity.Property(e => e.NSplitAnzahl)
                    .HasColumnType("decimal(38, 10)")
                    .HasColumnName("nSplitAnzahl");

                entity.Property(e => e.NSplitMoeglichStatus).HasColumnName("nSplitMoeglichStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");

                entity.Property(e => e.NWarnungStatus).HasColumnName("nWarnungStatus");
            });

            modelBuilder.Entity<VBestellPosLieferInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfo", "Versand");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<VBestellPosLieferInfoFifo2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfoFIFO2012", "VersandIntern");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<VBestellPosLieferInfoNonFifo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfoNonFIFO", "VersandIntern");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<VBestellPosLieferInfoProLager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfoProLager", "Versand");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VBestellPosLieferInfoProLagerFifo2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfoProLagerFIFO2012", "VersandIntern");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<VBestellPosLieferInfoProLagerNonFifo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfoProLagerNonFIFO", "VersandIntern");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<VBestellPosLieferInfoProLagerVirtuell>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosLieferInfoProLagerVirtuell", "Versand");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlFehlbestandEigen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlFehlbestandEigen");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlReserviert)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlReserviert");

                entity.Property(e => e.FAnzahlReserviertEigen)
                    .HasColumnType("decimal(38, 6)")
                    .HasColumnName("fAnzahlReserviertEigen");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            });

            modelBuilder.Entity<VBestellPosOffen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosOffen", "Versand");

                entity.Property(e => e.FAnzahlNotwendigerBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlNotwendigerBestand");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            });

            modelBuilder.Entity<VBestellPosOffenFifo2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosOffenFIFO2012", "VersandIntern");

                entity.Property(e => e.FAnzahlNotwendigerBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlNotwendigerBestand");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            });

            modelBuilder.Entity<VBestellPosOffenNonFifo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellPosOffenNonFIFO", "VersandIntern");

                entity.Property(e => e.FAnzahlNotwendigerBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlNotwendigerBestand");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FAnzahlZuPicken)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZuPicken");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NArtikelTyp).HasColumnName("nArtikelTyp");
            });

            modelBuilder.Entity<VBestellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellung", "Auslieferung");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CIdentCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInetBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInetBestellNr");

                entity.Property(e => e.CKundeFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFax");

                entity.Property(e => e.CKundeFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKundeFirma");

                entity.Property(e => e.CKundeLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeLand");

                entity.Property(e => e.CKundeMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeMail");

                entity.Property(e => e.CKundeNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeNachname");

                entity.Property(e => e.CKundeOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeOrt");

                entity.Property(e => e.CKundePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cKundePlz");

                entity.Property(e => e.CKundeStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeStrasse");

                entity.Property(e => e.CKundeTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTelefon");

                entity.Property(e => e.CKundeTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeTitel");

                entity.Property(e => e.CKundeVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeVorname");

                entity.Property(e => e.CKundeZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundeZusatz");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CModulId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cModulID");

                entity.Property(e => e.CPuizahlungsdaten)
                    .IsUnicode(false)
                    .HasColumnName("cPUIZahlungsdaten");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTitel");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZusatz");

                entity.Property(e => e.CRueckhaltegrund)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhaltegrund");

                entity.Property(e => e.CStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cType")
                    .IsFixedLength(true);

                entity.Property(e => e.CUserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUserName");

                entity.Property(e => e.CVersandInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersandInfo");

                entity.Property(e => e.CVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.DBezahlt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahlt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.DMailVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dMailVersandt");

                entity.Property(e => e.DVersandMail)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandMail");

                entity.Property(e => e.DVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandt");

                entity.Property(e => e.DZahlungsMail)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsMail");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FSkonto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkonto");

                entity.Property(e => e.FVersandBruttoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandBruttoPreis");

                entity.Property(e => e.FZusatzGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzGewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellHinweis).HasColumnName("kBestellHinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundengruppe).HasColumnName("kKundengruppe");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSplitBestellung).HasColumnName("kSplitBestellung");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NIgl).HasColumnName("nIGL");

                entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");

                entity.Property(e => e.NPlatform).HasColumnName("nPlatform");

                entity.Property(e => e.NSplitMoeglichStatus).HasColumnName("nSplitMoeglichStatus");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");

                entity.Property(e => e.NUstFrei).HasColumnName("nUStFrei");

                entity.Property(e => e.NZahlungsTyp).HasColumnName("nZahlungsTyp");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<VBestellungBezahlt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungBezahlt", "VersandIntern");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<VBestellungDropshippingLieferbar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungDropshippingLieferbar", "VersandIntern");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");
            });

            modelBuilder.Entity<VBestellungEckdaten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungEckdaten");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CRechnungsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsnummer");

                entity.Property(e => e.CRueckhaltegrundName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhaltegrundName");

                entity.Property(e => e.CShopName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopName");

                entity.Property(e => e.CVersandartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartName");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMahndatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMahndatum");

                entity.Property(e => e.DRechnungErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dRechnungErstellt");

                entity.Property(e => e.DZahlungsfrist)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsfrist");

                entity.Property(e => e.FFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fFaktor");

                entity.Property(e => e.FGutschein)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschein");

                entity.Property(e => e.FGutschrift)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutschrift");

                entity.Property(e => e.FMahngebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahngebuehr");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.FWertNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWertNetto");

                entity.Property(e => e.FZahlung)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZahlung");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NExistiertLieferschein).HasColumnName("nExistiertLieferschein");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NRechnungZahlungsziel).HasColumnName("nRechnungZahlungsziel");
            });

            modelBuilder.Entity<VBestellungLieferInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungLieferInfo", "Versand");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
            });

            modelBuilder.Entity<VBestellungLieferInfoFifo2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungLieferInfoFIFO2012", "VersandIntern");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
            });

            modelBuilder.Entity<VBestellungLieferInfoNonFifo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungLieferInfoNonFIFO", "VersandIntern");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
            });

            modelBuilder.Entity<VBestellungLieferInfoProLager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungLieferInfoProLager", "Versand");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
            });

            modelBuilder.Entity<VBestellungLieferInfoProLagerFifo2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungLieferInfoProLagerFIFO2012", "VersandIntern");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
            });

            modelBuilder.Entity<VBestellungLieferInfoProLagerNonFifo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vBestellungLieferInfoProLagerNonFIFO", "VersandIntern");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NLieferbar).HasColumnName("nLieferbar");

                entity.Property(e => e.NLieferbarEigen).HasColumnName("nLieferbarEigen");
            });

            modelBuilder.Entity<VCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCategory", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.CImageHash)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cImageHash");

                entity.Property(e => e.CImageSource)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cImageSource");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DCreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreatedAt");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.DUpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dUpdatedAt");

                entity.Property(e => e.FDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDiscount");

                entity.Property(e => e.KCategory).HasColumnName("kCategory");

                entity.Property(e => e.KParentCategoryId).HasColumnName("kParentCategoryId");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<VCategoryFamilyTree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCategoryFamilyTree", "ArtikelVerwaltung");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");
            });

            modelBuilder.Entity<VConfigurationGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vConfigurationGroup", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.CName)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.KConfigurationGroup).HasColumnName("kConfigurationGroup");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NRequired).HasColumnName("nRequired");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<VConfigurationItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vConfigurationItem", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.CGroupName)
                    .IsUnicode(false)
                    .HasColumnName("cGroupName");

                entity.Property(e => e.CName)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.KConfigurationGroup).HasColumnName("kConfigurationGroup");

                entity.Property(e => e.KConfigurationItem).HasColumnName("kConfigurationItem");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.NInternalUse).HasColumnName("nInternalUse");

                entity.Property(e => e.NPreselection).HasColumnName("nPreselection");

                entity.Property(e => e.NRequired).HasColumnName("nRequired");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<VCustomer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustomer", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.CAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAddress");

                entity.Property(e => e.CAddressSupplement)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAddressSupplement");

                entity.Property(e => e.CCity)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCity");

                entity.Property(e => e.CCompany)
                    .IsRequired()
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cCompany");

                entity.Property(e => e.CCountry)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCountry");

                entity.Property(e => e.CCustomerNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cCustomerNumber");

                entity.Property(e => e.CDateOfBirth)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cDateOfBirth");

                entity.Property(e => e.CEmailAddress)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmailAddress");

                entity.Property(e => e.CFederalTaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFederalTaxId");

                entity.Property(e => e.CFirstName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirstName");

                entity.Property(e => e.CLastName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLastName");

                entity.Property(e => e.CPhone)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPhone");

                entity.Property(e => e.CPostalCode)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPostalCode");

                entity.Property(e => e.CSalutation)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cSalutation");

                entity.Property(e => e.CState)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cState");

                entity.Property(e => e.CTitle)
                    .IsRequired()
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.FDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDiscount");

                entity.Property(e => e.KCustomerGroupId).HasColumnName("kCustomerGroupId");

                entity.Property(e => e.KId).HasColumnName("kId");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<VCustomerGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCustomerGroup", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.FDiscountPercent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDiscountPercent");

                entity.Property(e => e.KCustomerGroup).HasColumnName("kCustomerGroup");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<VDeletedEntity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDeletedEntity", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.KEntityId).HasColumnName("kEntityId");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NEntityType).HasColumnName("nEntityType");
            });

            modelBuilder.Entity<VDeliveryMethod>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vDeliveryMethod", "Pos");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrderText)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrderText");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.FVkfreiAb)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKFreiAB");

                entity.Property(e => e.KDeliveryMethod).HasColumnName("kDeliveryMethod");
            });

            modelBuilder.Entity<VEbayUserBestellungen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vEbayUserBestellungen");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KEbayuser).HasColumnName("kEbayuser");
            });

            modelBuilder.Entity<VEbayVorlagen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vEbayVorlagen", "ArtikelVerwaltung");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<VFbabestand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFBABestand", "Amazon");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.NBestand).HasColumnName("nBestand");

                entity.Property(e => e.NBestandReserviert)
                    .HasColumnType("numeric(38, 1)")
                    .HasColumnName("nBestandReserviert");
            });

            modelBuilder.Entity<VFulfillerLieferscheinPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillerLieferscheinPos", "FulfillmentNetwork");

                entity.Property(e => e.CBatch)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBatch");

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CNote)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.CSerialNumbers).HasColumnName("cSerialNumbers");

                entity.Property(e => e.DBestBefore)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestBefore");

                entity.Property(e => e.FQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantity");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            });

            modelBuilder.Entity<VFulfillerLieferscheinWarehouseInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillerLieferscheinWarehouseInfo", "FulfillmentNetwork");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.COutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundId");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.NLagerplatzVerwaltung).HasColumnName("nLagerplatzVerwaltung");
            });

            modelBuilder.Entity<VFulfillerOutboundInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillerOutboundInfo", "FulfillmentNetwork");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnugnsadresse).HasColumnName("kRechnugnsadresse");

                entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");

                entity.Property(e => e.OutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VFulfillerPackages>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillerPackages", "FulfillmentNetwork");

                entity.Property(e => e.CNote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.CShipmentId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShipmentId");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingId");

                entity.Property(e => e.DEstimatedDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("dEstimatedDeliveryTime");

                entity.Property(e => e.DShippingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dShippingDate");

                entity.Property(e => e.FWeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWeight");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KVersand)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kVersand");

                entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");
            });

            modelBuilder.Entity<VFulfillerPendingLieferscheine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillerPendingLieferscheine", "FulfillmentNetwork");

                entity.Property(e => e.CFulfillerShippingNotificationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillerShippingNotificationNumber");

                entity.Property(e => e.CNote)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.COutboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOutboundId");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");
            });

            modelBuilder.Entity<VFulfillerProductPicture>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillerProductPicture", "FulfillmentNetwork");

                entity.Property(e => e.BBild)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bBild");

                entity.Property(e => e.BBildRowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bBildRowVersion");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KEbayUser).HasColumnName("kEbayUser");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NNr).HasColumnName("nNr");
            });

            modelBuilder.Entity<VFulfillmentKunde>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vFulfillmentKunde", "FulfillmentNetwork");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEMail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CFulfillmentSupplierId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentSupplierId");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CPrefixAbrechnung)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cPrefixAbrechnung");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CSuffixAbrechnung)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cSuffixAbrechnung");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DAbrechnungEnde)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungEnde");

                entity.Property(e => e.DAbrechnungInitial)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungInitial");

                entity.Property(e => e.DAbrechnungStart)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbrechnungStart");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KAbrechnung).HasColumnName("kAbrechnung");

                entity.Property(e => e.KFulfillerEinstellungen).HasColumnName("kFulfillerEinstellungen");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundeFirma).HasColumnName("kKundeFirma");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.NAbrechnungsZeitraum).HasColumnName("nAbrechnungsZeitraum");

                entity.Property(e => e.NBestandserfassungModus).HasColumnName("nBestandserfassungModus");

                entity.Property(e => e.NStandardFirma).HasColumnName("nStandardFirma");
            });

            modelBuilder.Entity<VGlobaleTexte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vGlobaleTexte");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CGruppeName)
                    .HasMaxLength(4000)
                    .HasColumnName("cGruppeName");

                entity.Property(e => e.CName)
                    .HasMaxLength(8000)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNameDeu)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cNameDeu");

                entity.Property(e => e.CWertVarchar).HasColumnName("cWertVarchar");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.KWawiAttribut).HasColumnName("kWawiAttribut");
            });

            modelBuilder.Entity<VIndividuellePreise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vIndividuellePreise", "Preisliste");

                entity.Property(e => e.FNettoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNettoPreis");

                entity.Property(e => e.FProzent)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fProzent");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");
            });

            modelBuilder.Entity<VInventur>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vInventur");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VKategorien>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vKategorien");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.Pfad)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Sort)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VKategorienMitSubKategorien>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vKategorienMitSubKategorien", "ArtikelVerwaltung");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");
            });

            modelBuilder.Entity<VKunde>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vKunde", "DEPRECATED");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv");

                entity.Property(e => e.CAnmerkung)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CEbayName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayName");

                entity.Property(e => e.CEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEmail");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CGeburtstag)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cGeburtstag");

                entity.Property(e => e.CHaendler)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cHaendler")
                    .IsFixedLength(true);

                entity.Property(e => e.CHerkunft)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunft");

                entity.Property(e => e.CHrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHRNr");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKassenKunde)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cKassenKunde")
                    .IsFixedLength(true);

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNewsletter)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNewsletter")
                    .IsFixedLength(true);

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CSperre)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cSperre")
                    .IsFixedLength(true);

                entity.Property(e => e.CStatus)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStatus");

                entity.Property(e => e.CSteuerNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSteuerNr");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CWww)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWWW");

                entity.Property(e => e.CZhaenden)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZHaenden");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FProvision)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fProvision");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FSkonto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSkonto");

                entity.Property(e => e.KBuyer).HasColumnName("kBuyer");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KKundenKategorie).HasColumnName("kKundenKategorie");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NDebitorennr).HasColumnName("nDebitorennr");

                entity.Property(e => e.NDrittland).HasColumnName("nDrittland");

                entity.Property(e => e.NKreditlimit).HasColumnName("nKreditlimit");

                entity.Property(e => e.NMahnrhythmus).HasColumnName("nMahnrhythmus");

                entity.Property(e => e.NMahnstopp).HasColumnName("nMahnstopp");

                entity.Property(e => e.NSkontoInTagen).HasColumnName("nSkontoInTagen");

                entity.Property(e => e.NVertreter).HasColumnName("nVertreter");

                entity.Property(e => e.NZahlungsziel).HasColumnName("nZahlungsziel");
            });

            modelBuilder.Entity<VKundenAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vKundenAttribute", "DEPRECATED");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue).HasColumnName("cValue");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<VKundenGruppeShop>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vKundenGruppeShop", "Kunde");

                entity.Property(e => e.CShopKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cShopKundenNr");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DKundeSeit)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("dKundeSeit");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.GutscheinGrund)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.KGutschein).HasColumnName("kGutschein");

                entity.Property(e => e.KInetKunde).HasColumnName("kInetKunde");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.Kundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NRegistriert).HasColumnName("nRegistriert");

                entity.Property(e => e.ShopName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VKundenGruppeShopVerfuegbar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vKundenGruppeShopVerfuegbar", "Kunde");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CWebShop)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWebShop");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.KKundenDrucktext).HasColumnName("kKundenDrucktext");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KWebShop).HasColumnName("kWebShop");

                entity.Property(e => e.NNettoPreise).HasColumnName("nNettoPreise");

                entity.Property(e => e.NShopLogin).HasColumnName("nShopLogin");

                entity.Property(e => e.NStandard).HasColumnName("nStandard");
            });

            modelBuilder.Entity<VLagerBestandProLagerAlle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerBestandProLagerAlle");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VLagerartikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerartikel", "Auslieferung");

                entity.Property(e => e.CBeschreibung1)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung1");

                entity.Property(e => e.CBeschreibung2)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung2");

                entity.Property(e => e.CSeriennr)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSeriennr");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KLagerartikel).HasColumnName("kLagerartikel");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KPicklistePos).HasColumnName("kPicklistePos");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VLagerbestand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestand", "MaintenanceIntern");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FBestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestandEigen");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<VLagerbestand1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestand", "Versand");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FBestandAuslieferungGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestandAuslieferungGesperrt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VLagerbestandEx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandEx");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FAufEinkaufsliste)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufEinkaufsliste");

                entity.Property(e => e.FEigenerBestand)
                    .HasColumnType("decimal(28, 15)")
                    .HasColumnName("fEigenerBestand");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FReserviert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReserviert");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarExtern)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fVerfuegbarExtern");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.FZulaufVerfuegbar)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fZulaufVerfuegbar");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<VLagerbestandFba>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandFBA");

                entity.Property(e => e.FAnzahlFba)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlFBA");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<VLagerbestandNormaleArtikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandNormaleArtikel", "MaintenanceIntern");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FBestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestandEigen");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<VLagerbestandProLager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandProLager");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VLagerbestandProLager1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandProLager", "Maintenance");

                entity.Property(e => e.Bestände)
                    .HasMaxLength(278)
                    .IsUnicode(false);

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CodeZumKorigieren)
                    .HasMaxLength(153)
                    .IsUnicode(false)
                    .HasColumnName("Code zum Korigieren");

                entity.Property(e => e.DatensätzeFehlen)
                    .HasMaxLength(315)
                    .IsUnicode(false)
                    .HasColumnName("Datensätze fehlen");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");
            });

            modelBuilder.Entity<VLagerbestandStueckliste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandStueckliste");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FAufEinkaufsliste)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAufEinkaufsliste");

                entity.Property(e => e.FAuslieferungGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuslieferungGesperrt");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.FLagerbestandEigen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestandEigen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");
            });

            modelBuilder.Entity<VLagerbestandStuecklisteProLager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandStuecklisteProLager");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.FAuslieferungGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuslieferungGesperrt");

                entity.Property(e => e.FLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLagerbestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VLagerbestandStuecklisten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandStuecklisten", "MaintenanceIntern");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FBestandEigen)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBestandEigen");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<VLagerbestandVariationen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandVariationen", "MaintenanceIntern");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FBestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestandEigen");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("numeric(1, 1)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("numeric(1, 1)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<VLagerbestandVarkombination>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLagerbestandVarkombination", "MaintenanceIntern");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.FBestandEigen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBestandEigen");

                entity.Property(e => e.FInAuftraegen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fInAuftraegen");

                entity.Property(e => e.FVerfuegbar)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbar");

                entity.Property(e => e.FVerfuegbarGesperrt)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fVerfuegbarGesperrt");

                entity.Property(e => e.FZulauf)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fZulauf");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NArtikeltyp).HasColumnName("nArtikeltyp");

                entity.Property(e => e.NLagerAktiv).HasColumnName("nLagerAktiv");

                entity.Property(e => e.NLagerKleinerNull).HasColumnName("nLagerKleinerNull");

                entity.Property(e => e.NTeilbar).HasColumnName("nTeilbar");
            });

            modelBuilder.Entity<VLieferantenbestand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLieferantenbestand", "Versand");

                entity.Property(e => e.FBestand)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fBestand");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<VLieferschein>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLieferschein", "Auslieferung");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CFirmaFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaFax");

                entity.Property(e => e.CFirmaLandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaLandISO");

                entity.Property(e => e.CFirmaMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaMail");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CFirmaOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaOrt");

                entity.Property(e => e.CFirmaPlz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaPlz");

                entity.Property(e => e.CFirmaStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaStrasse");

                entity.Property(e => e.CFirmaTelefon)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaTelefon");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAnrede");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseKundenNr");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobil");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTitel");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGedruckt)
                    .HasColumnType("datetime")
                    .HasColumnName("dGedruckt");

                entity.Property(e => e.DMailVersand)
                    .HasColumnType("datetime")
                    .HasColumnName("dMailVersand");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");

                entity.Property(e => e.NIstVersendet).HasColumnName("nIstVersendet");

                entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");
            });

            modelBuilder.Entity<VLieferscheinPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLieferscheinPos", "Auslieferung");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CHinweis)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweis");

                entity.Property(e => e.CHinweisBestellung)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cHinweisBestellung");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemID");

                entity.Property(e => e.COrderItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemId");

                entity.Property(e => e.CString)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cString");

                entity.Property(e => e.CStringStandard)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStringStandard");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionID");

                entity.Property(e => e.CUnique)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUnique");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FAnzahlBestellung)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahlBestellung");

                entity.Property(e => e.FAnzahlOffen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlOffen");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FRabatt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fRabatt");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVkpreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKPreis");

                entity.Property(e => e.KAmazonBestellungPos).HasColumnName("kAmazonBestellungPos");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellStueckliste).HasColumnName("kBestellStueckliste");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KKonfigitem).HasColumnName("kKonfigitem");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.NHatUpload).HasColumnName("nHatUpload");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<VLieferscheinPosDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLieferscheinPosDetail", "Auslieferung");

                entity.Property(e => e.CCharge)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCharge");

                entity.Property(e => e.CWarenlagerName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarenlagerName");

                entity.Property(e => e.CWarenlagerplatzName)
                    .HasMaxLength(157)
                    .IsUnicode(false)
                    .HasColumnName("cWarenlagerplatzName");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KLieferscheinPos).HasColumnName("kLieferscheinPos");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");
            });

            modelBuilder.Entity<VLogsitzung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLogsitzung");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CRechnername)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cRechnername");

                entity.Property(e => e.CStatusMeldung)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cStatusMeldung");

                entity.Property(e => e.DEnde)
                    .HasColumnType("date")
                    .HasColumnName("dEnde");

                entity.Property(e => e.DStart)
                    .HasColumnType("date")
                    .HasColumnName("dStart");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KLogsitzung).HasColumnName("kLogsitzung");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<VMappedProductKeys>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMappedProductKeys", "B2BNetzwerk");

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CJpid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cJpid");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NAktion).HasColumnName("nAktion");
            });

            modelBuilder.Entity<VMerchantFailureInbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantFailureInbound", "FulfillmentNetwork");

                entity.Property(e => e.ExternalInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");

                entity.Property(e => e.MerchantInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Rowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VMerchantInbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantInbound", "FulfillmentNetwork");

                entity.Property(e => e.ExternalInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");

                entity.Property(e => e.MerchantInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Rowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VMerchantInboundItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantInboundItem", "FulfillmentNetwork");

                entity.Property(e => e.Jfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JFSKU");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.SupplierProductName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierSku)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VMerchantPendingInbound>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantPendingInbound", "FulfillmentNetwork");

                entity.Property(e => e.ExternalInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KUmlagerung).HasColumnName("kUmlagerung");

                entity.Property(e => e.MerchantInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Rowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseName)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VMerchantPendingInboundShippingNotification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantPendingInboundShippingNotification", "FulfillmentNetwork");

                entity.Property(e => e.InboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InboundShippingNotificationId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.MerchantInboundNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantShippingNotificationNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VMerchantPendingStockChanges>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantPendingStockChanges", "FulfillmentNetwork");

                entity.Property(e => e.Batch)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.InboundItemItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("InboundItem.ItemId");

                entity.Property(e => e.InboundItemNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("InboundItem.Number");

                entity.Property(e => e.LevelAnnounced)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Level.Announced");

                entity.Property(e => e.LevelBlocked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Level.Blocked");

                entity.Property(e => e.LevelReserved)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Level.Reserved");

                entity.Property(e => e.LevelShippable)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Level.Shippable");

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OutboundItemItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OutboundItem.ItemId");

                entity.Property(e => e.OutboundItemNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OutboundItem.Number");

                entity.Property(e => e.OutboundShippingNotificationItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OutboundShippingNotification.ItemId");

                entity.Property(e => e.OutboundShippingNotificationNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("OutboundShippingNotification.Number");

                entity.Property(e => e.QuantityAnnounced)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Quantity.Announced");

                entity.Property(e => e.QuantityBlocked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Quantity.Blocked");

                entity.Property(e => e.QuantityBookedAnnounced)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("QuantityBooked.Announced");

                entity.Property(e => e.QuantityBookedBlocked)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("QuantityBooked.Blocked");

                entity.Property(e => e.QuantityBookedReserved)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("QuantityBooked.Reserved");

                entity.Property(e => e.QuantityBookedShippable)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("QuantityBooked.Shippable");

                entity.Property(e => e.QuantityReserved)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Quantity.Reserved");

                entity.Property(e => e.QuantityShippable)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Quantity.Shippable");

                entity.Property(e => e.StockChangeIdJfsku)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("StockChangeId.Jfsku");

                entity.Property(e => e.StockChangeIdStockVersion).HasColumnName("StockChangeId.StockVersion");

                entity.Property(e => e.StockChangeIdWarehouseId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("StockChangeId.WarehouseId");

                entity.Property(e => e.WawiInboundBestellPosKey).HasColumnName("WawiInbound.BestellPosKey");

                entity.Property(e => e.WawiInboundLieferantenBestellungKey).HasColumnName("WawiInbound.LieferantenBestellungKey");

                entity.Property(e => e.WawiInboundStreckenlagerWarenlagerPlatzKey).HasColumnName("WawiInbound.StreckenlagerWarenlagerPlatzKey");

                entity.Property(e => e.WawiInboundUmlagerungKey).HasColumnName("WawiInbound.UmlagerungKey");

                entity.Property(e => e.WawiProductArtikelKey).HasColumnName("WawiProduct.ArtikelKey");

                entity.Property(e => e.WawiProductIsBatch).HasColumnName("WawiProduct.IsBatch");

                entity.Property(e => e.WawiProductIsBestBefore).HasColumnName("WawiProduct.IsBestBefore");

                entity.Property(e => e.WawiProductIsBillOfMaterials).HasColumnName("WawiProduct.IsBillOfMaterials");

                entity.Property(e => e.WawiProductIsDivisible).HasColumnName("WawiProduct.IsDivisible");

                entity.Property(e => e.WawiProductIsSerialNumber).HasColumnName("WawiProduct.IsSerialNumber");

                entity.Property(e => e.WawiProductIsWarehouseActive).HasColumnName("WawiProduct.IsWarehouseActive");

                entity.Property(e => e.WawiProductMerchantSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("WawiProduct.MerchantSku");

                entity.Property(e => e.WawiProductNetRetailPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("WawiProduct.NetRetailPrice");

                entity.Property(e => e.WawiStockLevelStockLevel)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("WawiStockLevel.StockLevel");

                entity.Property(e => e.WawiStockLevelWarenlagerKey).HasColumnName("WawiStockLevel.WarenlagerKey");

                entity.Property(e => e.WawiStockLevelWarenlagerPlatzKey).HasColumnName("WawiStockLevel.WarenlagerPlatzKey");
            });

            modelBuilder.Entity<VMerchantProductPicture>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vMerchantProductPicture", "FulfillmentNetwork");

                entity.Property(e => e.BBild)
                    .IsRequired()
                    .HasColumnType("image")
                    .HasColumnName("bBild");

                entity.Property(e => e.BBildRowVersion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bBildRowVersion");

                entity.Property(e => e.BProductPictureRefBildRowVersion)
                    .HasMaxLength(8)
                    .HasColumnName("bProductPictureRefBildRowVersion")
                    .IsFixedLength(true);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelbildPlattform).HasColumnName("kArtikelbildPlattform");

                entity.Property(e => e.KBild).HasColumnName("kBild");

                entity.Property(e => e.KPlattform).HasColumnName("kPlattform");

                entity.Property(e => e.NFfnNumber).HasColumnName("nFfnNumber");

                entity.Property(e => e.NNr).HasColumnName("nNr");
            });

            modelBuilder.Entity<VNaechsterZulaufLagerartikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vNaechsterZulaufLagerartikel", "Abgleich");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("date")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlOffenGesamt)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlOffenGesamt");

                entity.Property(e => e.FAnzahlZulauf)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZulauf");

                entity.Property(e => e.FMengeNochZuLiefern)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fMengeNochZuLiefern");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NRowNumber).HasColumnName("nRowNumber");
            });

            modelBuilder.Entity<VObjectBrowserArtikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vObjectBrowserArtikel");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CKategorie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKategorie");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSuchnummer)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchnummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.CWarengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarengruppe");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KKategorieArtikel).HasColumnName("kKategorieArtikel");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");
            });

            modelBuilder.Entity<VOffeneBestellpositionen>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffeneBestellpositionen", "Abgleich");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("date")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FMengeNochZuLiefern)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fMengeNochZuLiefern");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");
            });

            modelBuilder.Entity<VOffenerPosten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffenerPosten", "Zahlungsabgleich");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CEbayBuyerUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayBuyerUserId");

                entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCheckoutVerwendungszweck");

                entity.Property(e => e.CExterneBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExterneBestellNr");

                entity.Property(e => e.CGutschriftNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGutschriftNr");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemID");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseName");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CPaymentBestellNr)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentBestellNr");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseName");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingID");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionID");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungIso");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FMahngebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahngebuehr");

                entity.Property(e => e.FSkontoBetrag)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("fSkontoBetrag");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.FWertOffen)
                    .HasColumnType("decimal(31, 14)")
                    .HasColumnName("fWertOffen");

                entity.Property(e => e.FZahlung)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZahlung");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.NPaketnummer).HasColumnName("nPaketnummer");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");
            });

            modelBuilder.Entity<VOffenerPostenEbay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffenerPostenEbay", "Zahlungsabgleich");

                entity.Property(e => e.CEbayBuyerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayBuyerName");

                entity.Property(e => e.CEbayBuyerUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayBuyerUserId");

                entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCheckoutVerwendungszweck");

                entity.Property(e => e.CEbayShippingAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayShippingAddressName");

                entity.Property(e => e.CItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cItemId");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungIso");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWert");

                entity.Property(e => e.KEbayCheckout).HasColumnName("kEbayCheckout");

                entity.Property(e => e.KEbayTransaction).HasColumnName("kEbayTransaction");
            });

            modelBuilder.Entity<VOffenerPostenEingangsrechnung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffenerPostenEingangsrechnung", "Zahlungsabgleich");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CStandardWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cStandardWaehrungISO");

                entity.Property(e => e.DBelegdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBelegdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FWert)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("fWert");

                entity.Property(e => e.FWertOffen)
                    .HasColumnType("numeric(38, 6)")
                    .HasColumnName("fWertOffen");

                entity.Property(e => e.FZahlung)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fZahlung");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.NDeleted).HasColumnName("nDeleted");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<VOffenerPostenEingangsrechnungZahlung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffenerPostenEingangsrechnungZahlung", "Zahlungsabgleich");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CStandardWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cStandardWaehrungISO");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.KEingangsrechnung).HasColumnName("kEingangsrechnung");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KZahlung).HasColumnName("kZahlung");

                entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");
            });

            modelBuilder.Entity<VOffenerPostenZahlung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffenerPostenZahlung", "Zahlungsabgleich");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CEbayCheckoutVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayCheckoutVerwendungszweck");

                entity.Property(e => e.CEbayItemId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayItemID");

                entity.Property(e => e.CEbayUserId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEbayUserId");

                entity.Property(e => e.CExterneBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExterneBestellNr");

                entity.Property(e => e.CGutschriftNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cGutschriftNr");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseName");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseName");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CTrackingId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTrackingID");

                entity.Property(e => e.CTransactionId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTransactionId");

                entity.Property(e => e.CVerwendungszweck)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrungIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungIso");

                entity.Property(e => e.DDatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.FBetragOffen)
                    .HasColumnType("decimal(31, 14)")
                    .HasColumnName("fBetragOffen");

                entity.Property(e => e.FBetragSkonto)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("fBetragSkonto");

                entity.Property(e => e.FMahngebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahngebuehr");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KZahlung).HasColumnName("kZahlung");

                entity.Property(e => e.NMatchingOptionen).HasColumnName("nMatchingOptionen");

                entity.Property(e => e.NPaketnummer).HasColumnName("nPaketnummer");
            });

            modelBuilder.Entity<VOffenerUmsatz>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOffenerUmsatz", "Zahlungsabgleich");

                entity.Property(e => e.CInternerKommentar)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cInternerKommentar");

                entity.Property(e => e.CKonto)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKonto");

                entity.Property(e => e.CKontoIdentifikation)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cKontoIdentifikation");

                entity.Property(e => e.CKontozusatz)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cKontozusatz");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTransaktionId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cTransaktionID");

                entity.Property(e => e.CVerwendungszweck)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false)
                    .HasColumnName("cVerwendungszweck");

                entity.Property(e => e.CWaehrungIso)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrungISO");

                entity.Property(e => e.DAbgleichszeitpunkt)
                    .HasColumnType("datetime")
                    .HasColumnName("dAbgleichszeitpunkt");

                entity.Property(e => e.DBuchungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBuchungsdatum");

                entity.Property(e => e.FBetrag)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBetrag");

                entity.Property(e => e.FBetragOffen)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fBetragOffen");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KZahlungsabgleichModul).HasColumnName("kZahlungsabgleichModul");

                entity.Property(e => e.KZahlungsabgleichUmsatz).HasColumnName("kZahlungsabgleichUmsatz");

                entity.Property(e => e.NBuchungstyp).HasColumnName("nBuchungstyp");

                entity.Property(e => e.NSichtbar).HasColumnName("nSichtbar");
            });

            modelBuilder.Entity<VOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrder", "Pos");

                entity.Property(e => e.CBillingAddressCompany)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cBillingAddressCompany");

                entity.Property(e => e.CBillingAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBillingAddressName");

                entity.Property(e => e.CComment)
                    .IsUnicode(false)
                    .HasColumnName("cComment");

                entity.Property(e => e.CCurrencyIso)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cCurrencyIso");

                entity.Property(e => e.CCustomerNumber)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cCustomerNumber");

                entity.Property(e => e.CDescriptionType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDescriptionType")
                    .IsFixedLength(true);

                entity.Property(e => e.CExternalOrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cExternalOrderNumber");

                entity.Property(e => e.CInvoiceNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cInvoiceNumber");

                entity.Property(e => e.CLanguageIso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cLanguageIso");

                entity.Property(e => e.CNote)
                    .HasMaxLength(4500)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.COrderNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cOrderNumber");

                entity.Property(e => e.CPaymentMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentMethodName");

                entity.Property(e => e.CShippingAddressCompany)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cShippingAddressCompany");

                entity.Property(e => e.CShippingAddressName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShippingAddressName");

                entity.Property(e => e.CShippingInfo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShippingInfo");

                entity.Property(e => e.CShippingName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cShippingName");

                entity.Property(e => e.CTaxId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaxId");

                entity.Property(e => e.DCreationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreationDate");

                entity.Property(e => e.DShippingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dShippingDate");

                entity.Property(e => e.KBillToAddress).HasColumnName("kBillToAddress");

                entity.Property(e => e.KInvoice).HasColumnName("kInvoice");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");

                entity.Property(e => e.KShipToAddress).HasColumnName("kShipToAddress");

                entity.Property(e => e.NChangeable).HasColumnName("nChangeable");
            });

            modelBuilder.Entity<VOrderBillingAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrderBillingAddress", "Pos");

                entity.Property(e => e.CAddressAddition)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cAddressAddition");

                entity.Property(e => e.CCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCity");

                entity.Property(e => e.CCompany)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cCompany");

                entity.Property(e => e.CDateOfBirth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cDateOfBirth");

                entity.Property(e => e.CExtraAddressLine)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExtraAddressLine");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirstName");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLastName");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobile)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobile");

                entity.Property(e => e.CPhone)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cPhone");

                entity.Property(e => e.CSalutation)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cSalutation");

                entity.Property(e => e.CState)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cState");

                entity.Property(e => e.CStreet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreet");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CToTheAttention)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cToTheAttention");

                entity.Property(e => e.CZip)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cZip");

                entity.Property(e => e.FDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDiscount");

                entity.Property(e => e.KCustomerGroupId).HasColumnName("kCustomerGroupId");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");
            });

            modelBuilder.Entity<VOrderItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrderItem", "Pos");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNote)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cNote");

                entity.Property(e => e.CSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSku");

                entity.Property(e => e.CUniqueId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cUniqueId");

                entity.Property(e => e.CUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUnit");

                entity.Property(e => e.FDiscount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fDiscount");

                entity.Property(e => e.FPriceGross)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPriceGross");

                entity.Property(e => e.FPriceNet)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPriceNet");

                entity.Property(e => e.FPurchasePriceNet)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPurchasePriceNet");

                entity.Property(e => e.FVat)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVat");

                entity.Property(e => e.KConfigurationitem).HasColumnName("kConfigurationitem");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");

                entity.Property(e => e.KOrderPos)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kOrderPos");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");

                entity.Property(e => e.NQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nQuantity");

                entity.Property(e => e.NType).HasColumnName("nType");
            });

            modelBuilder.Entity<VOrderLotNumberBestBeforeDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrderLotNumberBestBeforeDate", "Pos");

                entity.Property(e => e.CLotNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLotNumber");

                entity.Property(e => e.DBestBeforeDate)
                    .HasColumnType("datetime")
                    .HasColumnName("dBestBeforeDate");

                entity.Property(e => e.FQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantity");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");

                entity.Property(e => e.KOrderPos).HasColumnName("kOrderPos");
            });

            modelBuilder.Entity<VOrderPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrderPayment", "Pos");

                entity.Property(e => e.CPaymentMethodName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPaymentMethodName");

                entity.Property(e => e.FAmount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmount");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");

                entity.Property(e => e.KPayment).HasColumnName("kPayment");
            });

            modelBuilder.Entity<VOrderSerialNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrderSerialNumber", "Pos");

                entity.Property(e => e.CSerialNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cSerialNumber");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");

                entity.Property(e => e.KOrderPos).HasColumnName("kOrderPos");
            });

            modelBuilder.Entity<VOrderShippingAddress>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vOrderShippingAddress", "Pos");

                entity.Property(e => e.CCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cCity");

                entity.Property(e => e.CCompany)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cCompany");

                entity.Property(e => e.CCountryIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cCountryIso");

                entity.Property(e => e.CDeliveryInstruction)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cDeliveryInstruction");

                entity.Property(e => e.CExtraAddressLine)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExtraAddressLine");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFirstName");

                entity.Property(e => e.CLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLastName");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobile)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobile");

                entity.Property(e => e.CPhone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPhone");

                entity.Property(e => e.CSalutation)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cSalutation");

                entity.Property(e => e.CState)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cState");

                entity.Property(e => e.CStreet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStreet");

                entity.Property(e => e.CTitle)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitle");

                entity.Property(e => e.CZip)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cZip");

                entity.Property(e => e.KOrder).HasColumnName("kOrder");
            });

            modelBuilder.Entity<VPendingStocks>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPendingStocks", "FulfillmentNetwork");

                entity.Property(e => e.Batch)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BestBeforeDay).HasColumnName("BestBefore.Day");

                entity.Property(e => e.BestBeforeMonth).HasColumnName("BestBefore.Month");

                entity.Property(e => e.BestBeforeYear).HasColumnName("BestBefore.Year");

                entity.Property(e => e.CInboundId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cInboundId");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.COwnerId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cOwnerId");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.Jfsku)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBuchungsart).HasColumnName("kBuchungsart");

                entity.Property(e => e.KLieferantenBestellungPos).HasColumnName("kLieferantenBestellungPos");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NChangeState).HasColumnName("nChangeState");

                entity.Property(e => e.Note)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.QuantityBlocked).HasColumnType("decimal(30, 14)");

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VPreislisteNetto>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPreislisteNetto", "Preisliste");

                entity.Property(e => e.FNettoPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fNettoPreis");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KKundenGruppe).HasColumnName("kKundenGruppe");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.NAnzahlAb).HasColumnName("nAnzahlAb");
            });

            modelBuilder.Entity<VProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProduct", "B2BNetzwerk");

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CGrundpreisCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cGrundpreisCode");

                entity.Property(e => e.CGrundpreisDisplayCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGrundpreisDisplayCode");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CJpid)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cJpid");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CMassEinheitCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cMassEinheitCode");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DZulaufVerfuegbarAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dZulaufVerfuegbarAm");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FGrundpreisMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGrundpreisMenge");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FMassMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMassMenge");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.HerstellerName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.NAktion).HasColumnName("nAktion");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");

                entity.Property(e => e.NZulaufVerfuegbarMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nZulaufVerfuegbarMenge");
            });

            modelBuilder.Entity<VProduct1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProduct", "FulfillmentNetwork");

                entity.Property(e => e.DimensionsHeight)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Dimensions.Height");

                entity.Property(e => e.DimensionsLength)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Dimensions.Length");

                entity.Property(e => e.DimensionsWidth)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("Dimensions.Width");

                entity.Property(e => e.IdentifierAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Identifier.Asin");

                entity.Property(e => e.IdentifierEan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Identifier.Ean");

                entity.Property(e => e.IdentifierIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Identifier.Isbn");

                entity.Property(e => e.IdentifierMpnManufacturer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Identifier.Mpn.Manufacturer");

                entity.Property(e => e.IdentifierMpnPartNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Identifier.Mpn.PartNumber");

                entity.Property(e => e.IdentifierUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Identifier.Upc");

                entity.Property(e => e.Jfsku)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Manufacturer)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MerchantSku)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NetRetailPriceAmount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("NetRetailPrice.Amount");

                entity.Property(e => e.NetRetailPriceCurrency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("NetRetailPrice.Currency");

                entity.Property(e => e.NetWeight).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.OriginCountry)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ProductGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SpecificationsFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Specifications.Fnsku");

                entity.Property(e => e.SpecificationsHazardIdentifier)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Specifications.HazardIdentifier");

                entity.Property(e => e.SpecificationsIsBatch).HasColumnName("Specifications.IsBatch");

                entity.Property(e => e.SpecificationsIsBestBefore).HasColumnName("Specifications.IsBestBefore");

                entity.Property(e => e.SpecificationsIsBillOfMaterials).HasColumnName("Specifications.IsBillOfMaterials");

                entity.Property(e => e.SpecificationsIsConfiguration).HasColumnName("Specifications.IsConfiguration");

                entity.Property(e => e.SpecificationsIsDivisible).HasColumnName("Specifications.IsDivisible");

                entity.Property(e => e.SpecificationsIsSerialNumber).HasColumnName("Specifications.IsSerialNumber");

                entity.Property(e => e.SpecificationsIsVariationCombination).HasColumnName("Specifications.IsVariationCombination");

                entity.Property(e => e.SpecificationsTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Specifications.Taric");

                entity.Property(e => e.SpecificationsUnNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Specifications.UnNumber");

                entity.Property(e => e.WawiProductNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(28, 14)");
            });

            modelBuilder.Entity<VProduct2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProduct", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.CAnnotation)
                    .IsUnicode(false)
                    .HasColumnName("cAnnotation");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHasSerialNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cHasSerialNumber")
                    .IsFixedLength(true);

                entity.Property(e => e.CImageHash)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cImageHash");

                entity.Property(e => e.CImageSource)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("cImageSource");

                entity.Property(e => e.CIsQuantityDivisible)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cIsQuantityDivisible")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIsbn");

                entity.Property(e => e.CKurzBeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzBeschreibung");

                entity.Property(e => e.CManufacturerName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cManufacturerName");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSku)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSKU");

                entity.Property(e => e.CUnit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUnit");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.CUseStock)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cUseStock")
                    .IsFixedLength(true);

                entity.Property(e => e.CVoucherCampaign)
                    .HasMaxLength(255)
                    .HasColumnName("cVoucherCampaign");

                entity.Property(e => e.CVoucherCurrency)
                    .HasMaxLength(5)
                    .HasColumnName("cVoucherCurrency");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DCreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dCreatedAt");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.DUpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("dUpdatedAt");

                entity.Property(e => e.Discount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.FPurchasingPrice)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPurchasingPrice");

                entity.Property(e => e.FQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantity");

                entity.Property(e => e.FReservedQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fReservedQuantity");

                entity.Property(e => e.KCompany).HasColumnName("kCompany");

                entity.Property(e => e.KParentId).HasColumnName("kParentId");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.NHasBestBeforeDate).HasColumnName("nHasBestBeforeDate");

                entity.Property(e => e.NHasLotNumber).HasColumnName("nHasLotNumber");

                entity.Property(e => e.NIsCompositeProduct).HasColumnName("nIsCompositeProduct");

                entity.Property(e => e.NIsParent).HasColumnName("nIsParent");

                entity.Property(e => e.NProductType).HasColumnName("nProductType");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");

                entity.Property(e => e.NVoucherAmount)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nVoucherAmount");

                entity.Property(e => e.Tags)
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.TaxRate2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Variants)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VProductAttrAndValues>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductAttrAndValues", "B2BNetzwerk");

                entity.Property(e => e.CIso)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue).HasColumnName("cValue");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KAttribut).HasColumnName("kAttribut");

                entity.Property(e => e.NIstFreifeld).HasColumnName("nIstFreifeld");

                entity.Property(e => e.NIstMehrsprachig).HasColumnName("nIstMehrsprachig");
            });

            modelBuilder.Entity<VProductAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductAttribute", "Pos");

                entity.Property(e => e.CAttributeName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAttributeName");

                entity.Property(e => e.CGroup)
                    .HasMaxLength(150)
                    .HasColumnName("cGroup");

                entity.Property(e => e.FPrice)
                    .HasColumnType("numeric(1, 1)")
                    .HasColumnName("fPrice");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");

                entity.Property(e => e.KType).HasColumnName("kType");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<VProductBundles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductBundles", "FulfillmentNetwork");

                entity.Property(e => e.Ean)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Upc)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VProductComposite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductComposite", "Pos");

                entity.Property(e => e.BLastChanged)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bLastChanged");

                entity.Property(e => e.DActive)
                    .HasColumnType("datetime")
                    .HasColumnName("dActive");

                entity.Property(e => e.DInactive)
                    .HasColumnType("datetime")
                    .HasColumnName("dInactive");

                entity.Property(e => e.DLastModified)
                    .HasColumnType("datetime")
                    .HasColumnName("dLastModified");

                entity.Property(e => e.FQuantity)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fQuantity");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");

                entity.Property(e => e.KProductIdComponent).HasColumnName("kProductIdComponent");

                entity.Property(e => e.KShop).HasColumnName("kShop");
            });

            modelBuilder.Entity<VProductOption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductOption", "Pos");

                entity.Property(e => e.COptionName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOptionName");

                entity.Property(e => e.COptionValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOptionValue");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");
            });

            modelBuilder.Entity<VProductPosAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductPosAttribute", "Pos");

                entity.Property(e => e.CName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CValue).HasColumnName("cValue");

                entity.Property(e => e.FValueDecimal)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fValueDecimal");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");
            });

            modelBuilder.Entity<VProductVariant>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductVariant", "Pos");

                entity.Property(e => e.CVariantName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVariantName");

                entity.Property(e => e.KProduct).HasColumnName("kProduct");
            });

            modelBuilder.Entity<VProzentGeliefert>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProzentGeliefert", "Auftrag");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.ProzAufLieferschein).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ProzGeliefert).HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<VRetoure>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetoure", "FulfillmentNetwork");

                entity.Property(e => e.CAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAdressZusatz");

                entity.Property(e => e.CAnrede)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cAnrede");

                entity.Property(e => e.CAnsprechpartner)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cAnsprechpartner");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CExternalNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cExternalNumber");

                entity.Property(e => e.CFax)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFfnReturnId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFfnReturnId");

                entity.Property(e => e.CFfnWarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFfnWarehouseId");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cISO");

                entity.Property(e => e.CKommentarExtern)
                    .IsUnicode(false)
                    .HasColumnName("cKommentarExtern");

                entity.Property(e => e.CKommentarIntern)
                    .IsUnicode(false)
                    .HasColumnName("cKommentarIntern");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLieferantId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantID");

                entity.Property(e => e.CMail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CMobil)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cMobil");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CPostId)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cPostID");

                entity.Property(e => e.CRetoureNr)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRetoureNr");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CTitel)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cTitel");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.CZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cZusatz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.KRmstatus).HasColumnName("kRMStatus");

                entity.Property(e => e.NFulfillment).HasColumnName("nFulfillment");

                entity.Property(e => e.NHerkunft).HasColumnName("nHerkunft");

                entity.Property(e => e.NStatusTyp).HasColumnName("nStatusTyp");
            });

            modelBuilder.Entity<VRetoureBestellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetoureBestellung", "RM");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");
            });

            modelBuilder.Entity<VRetoureEtikett>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetoureEtikett", "FulfillmentNetwork");

                entity.Property(e => e.CIdentCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cIdentCode");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.KRmretourenEtikett)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kRMRetourenEtikett");
            });

            modelBuilder.Entity<VRetoureInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetoureInfo", "FulfillmentNetwork");

                entity.Property(e => e.FfnReturnId)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.LieferantId)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VRetourePositionenExportData>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetourePositionenExportData", "RM");

                entity.Property(e => e.Anzahl).HasColumnType("decimal(28, 14)");

                entity.Property(e => e.Beschreibung)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GewichtGesamt).HasColumnType("decimal(38, 9)");

                entity.Property(e => e.KRmretoure).HasColumnName("kRMRetoure");

                entity.Property(e => e.PreisGesamt).HasColumnType("decimal(38, 9)");
            });

            modelBuilder.Entity<VRetouren>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetouren", "Amazon");

                entity.Property(e => e.CArtikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelname");

                entity.Property(e => e.CArtikelzustand)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelzustand");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CFehler)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("cFehler");

                entity.Property(e => e.CFremdSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cFremdSKU");

                entity.Property(e => e.CFulfillmentCenter)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentCenter");

                entity.Property(e => e.CFulfillmentId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFulfillmentId");

                entity.Property(e => e.CLicencePlateNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLicencePlateNumber");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.COrderItemCode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderItemCode");

                entity.Property(e => e.CRechnungsNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNr");

                entity.Property(e => e.CRueckgabegrund)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRueckgabegrund");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.DEingelesen)
                    .HasColumnType("datetime")
                    .HasColumnName("dEingelesen");

                entity.Property(e => e.DRetourzeit)
                    .HasColumnType("datetime")
                    .HasColumnName("dRetourzeit");

                entity.Property(e => e.DVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandt");

                entity.Property(e => e.FAmountPerItem)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("fAmountPerItem");

                entity.Property(e => e.FAuftragsWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragsWert");

                entity.Property(e => e.FGutschrift)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fGutschrift");

                entity.Property(e => e.KAmazonBestellung).HasColumnName("kAmazonBestellung");

                entity.Property(e => e.KAmazonRetourPos).HasColumnName("kAmazonRetourPos");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KUser).HasColumnName("kUser");

                entity.Property(e => e.KundenName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.MarkteplaceName)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.NGutschriftStatus).HasColumnName("nGutschriftStatus");

                entity.Property(e => e.NIsVcs).HasColumnName("nIsVcs");

                entity.Property(e => e.NMenge).HasColumnName("nMenge");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            modelBuilder.Entity<VRetourenposition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vRetourenposition", "Amazon");

                entity.Property(e => e.CArtNr)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.COrderId)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cOrderId");

                entity.Property(e => e.CSellerSku)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cSellerSKU");

                entity.Property(e => e.FAmountPerItem)
                    .HasColumnType("decimal(25, 13)")
                    .HasColumnName("fAmountPerItem");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.NAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nAnzahl");

                entity.Property(e => e.NMaxRetoureMenge).HasColumnName("nMaxRetoureMenge");

                entity.Property(e => e.NMenge).HasColumnName("nMenge");

                entity.Property(e => e.NMengeGutgeschrieben)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("nMengeGutgeschrieben");

                entity.Property(e => e.NOffeneMenge).HasColumnName("nOffeneMenge");

                entity.Property(e => e.NPlatform).HasColumnName("nPlatform");

                entity.Property(e => e.NRetourMenge).HasColumnName("nRetourMenge");
            });

            modelBuilder.Entity<VStandardArtikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStandardArtikel");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonFNSKU");

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CKurzBeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzBeschreibung");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CLieferstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferstatus");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .IsFixedLength(true);

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.CVpeeinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVPEEinheit");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DNeuImSortiment)
                    .HasColumnType("datetime")
                    .HasColumnName("dNeuImSortiment");

                entity.Property(e => e.DZulaufVerfuegbarAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dZulaufVerfuegbarAm");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FGrundpreisMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGrundpreisMenge");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FMassMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMassMenge");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVKbrutto");

                entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");

                entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");

                entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");
            });

            modelBuilder.Entity<VStandardBestellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStandardBestellung", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobiltelefonnummer");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsNummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNummer");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobiltelefonnummer");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRueckhaltegrundName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhaltegrundName");

                entity.Property(e => e.CShopName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopName");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cType")
                    .IsFixedLength(true);

                entity.Property(e => e.CVersandartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO");

                entity.Property(e => e.CVersandlandWaehrung)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandWaehrung");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartName");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DRechnungErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dRechnungErstellt");

                entity.Property(e => e.DVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandt");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsfrist)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsfrist");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.FAuftragswertBrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertBrutto");

                entity.Property(e => e.FAuftragswertNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertNetto");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FMahnGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahnGebuehr");

                entity.Property(e => e.FVersandlandWaehrungFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandlandWaehrungFaktor");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");

                entity.Property(e => e.NExistiertLieferschein).HasColumnName("nExistiertLieferschein");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");

                entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");

                entity.Property(e => e.NRechnungZahlungsziel).HasColumnName("nRechnungZahlungsziel");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
            });

            modelBuilder.Entity<VStandardBestellungCache>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStandardBestellungCache", "Verkauf");

                entity.Property(e => e.CAnmerkung)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CAuftragsnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAuftragsnummer");

                entity.Property(e => e.CBeschreibung)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung")
                    .IsFixedLength(true);

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CFirmaName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cFirmaName");

                entity.Property(e => e.CIstBezahlt)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("cIstBezahlt");

                entity.Property(e => e.CLieferadresseAdressZusatz)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseAdressZusatz");

                entity.Property(e => e.CLieferadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseBundesland");

                entity.Property(e => e.CLieferadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFax");

                entity.Property(e => e.CLieferadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseFirma");

                entity.Property(e => e.CLieferadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLand");

                entity.Property(e => e.CLieferadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseLandIso");

                entity.Property(e => e.CLieferadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMail");

                entity.Property(e => e.CLieferadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseMobiltelefonnummer");

                entity.Property(e => e.CLieferadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseNachname");

                entity.Property(e => e.CLieferadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseOrt");

                entity.Property(e => e.CLieferadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadressePlz");

                entity.Property(e => e.CLieferadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseStrasse");

                entity.Property(e => e.CLieferadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseTelefon");

                entity.Property(e => e.CLieferadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseVorname");

                entity.Property(e => e.CLieferadresseZusatz)
                    .HasMaxLength(60)
                    .IsUnicode(false)
                    .HasColumnName("cLieferadresseZusatz");

                entity.Property(e => e.CRechnungsNummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsNummer");

                entity.Property(e => e.CRechnungsadresseBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseBundesland");

                entity.Property(e => e.CRechnungsadresseFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFax");

                entity.Property(e => e.CRechnungsadresseFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseFirma");

                entity.Property(e => e.CRechnungsadresseKundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseKundennummer");

                entity.Property(e => e.CRechnungsadresseLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLand");

                entity.Property(e => e.CRechnungsadresseLandIso)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseLandIso");

                entity.Property(e => e.CRechnungsadresseMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMail");

                entity.Property(e => e.CRechnungsadresseMobiltelefonnummer)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseMobiltelefonnummer");

                entity.Property(e => e.CRechnungsadresseNachname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseNachname");

                entity.Property(e => e.CRechnungsadresseOrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseOrt");

                entity.Property(e => e.CRechnungsadressePlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadressePlz");

                entity.Property(e => e.CRechnungsadresseStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseStrasse");

                entity.Property(e => e.CRechnungsadresseTelefon)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseTelefon");

                entity.Property(e => e.CRechnungsadresseVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseVorname");

                entity.Property(e => e.CRechnungsadresseZuHaenden)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cRechnungsadresseZuHaenden");

                entity.Property(e => e.CRueckhaltegrundName)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cRueckhaltegrundName");

                entity.Property(e => e.CShopName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopName");

                entity.Property(e => e.CShopbestellnummer)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cShopbestellnummer");

                entity.Property(e => e.CStatustext)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cStatustext");

                entity.Property(e => e.CType)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cType")
                    .IsFixedLength(true);

                entity.Property(e => e.CVersandartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cVersandartName");

                entity.Property(e => e.CVersandinfo)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cVersandinfo");

                entity.Property(e => e.CVersandlandIso)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandISO");

                entity.Property(e => e.CVersandlandWaehrung)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cVersandlandWaehrung");

                entity.Property(e => e.CWaehrung)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cWaehrung");

                entity.Property(e => e.CZahlungsartName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsartName");

                entity.Property(e => e.CZahlungsmodulId)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cZahlungsmodulID");

                entity.Property(e => e.CeBayBenutzername)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("ceBayBenutzername");

                entity.Property(e => e.CeBayVerwendungszweck)
                    .HasMaxLength(140)
                    .IsUnicode(false)
                    .HasColumnName("ceBayVerwendungszweck");

                entity.Property(e => e.DBezahldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahldatum");

                entity.Property(e => e.DDruckdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dDruckdatum");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DMaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dMaildatum");

                entity.Property(e => e.DRechnungErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dRechnungErstellt");

                entity.Property(e => e.DVersandt)
                    .HasColumnType("datetime")
                    .HasColumnName("dVersandt");

                entity.Property(e => e.DVoraussichtlichesLieferdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dVoraussichtlichesLieferdatum");

                entity.Property(e => e.DZahlungsfrist)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsfrist");

                entity.Property(e => e.DZahlungsmaildatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dZahlungsmaildatum");

                entity.Property(e => e.FAuftragswertBrutto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertBrutto");

                entity.Property(e => e.FAuftragswertNetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAuftragswertNetto");

                entity.Property(e => e.FBereitsgezahltWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBereitsgezahltWert");

                entity.Property(e => e.FGutgeschriebenerWert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGutgeschriebenerWert");

                entity.Property(e => e.FKundenguthaben)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fKundenguthaben");

                entity.Property(e => e.FMahnGebuehr)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMahnGebuehr");

                entity.Property(e => e.FVersandlandWaehrungFaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVersandlandWaehrungFaktor");

                entity.Property(e => e.FWaehrungsfaktor)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fWaehrungsfaktor");

                entity.Property(e => e.FZusatzgewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fZusatzgewicht");

                entity.Property(e => e.KAdresse).HasColumnName("kAdresse");

                entity.Property(e => e.KBenutzer).HasColumnName("kBenutzer");

                entity.Property(e => e.KBestellhinweis).HasColumnName("kBestellhinweis");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KColor).HasColumnName("kColor");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KInetBestellung).HasColumnName("kInetBestellung");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferadresse).HasColumnName("kLieferadresse");

                entity.Property(e => e.KRechnung).HasColumnName("kRechnung");

                entity.Property(e => e.KRechnungsadresse).HasColumnName("kRechnungsadresse");

                entity.Property(e => e.KRueckhalteGrund).HasColumnName("kRueckhalteGrund");

                entity.Property(e => e.KShop).HasColumnName("kShop");

                entity.Property(e => e.KSprache).HasColumnName("kSprache");

                entity.Property(e => e.KText).HasColumnName("kText");

                entity.Property(e => e.KVersandart).HasColumnName("kVersandart");

                entity.Property(e => e.KZahlungsart).HasColumnName("kZahlungsart");

                entity.Property(e => e.NAuftragsprioritaet).HasColumnName("nAuftragsprioritaet");

                entity.Property(e => e.NExistiertLieferschein).HasColumnName("nExistiertLieferschein");

                entity.Property(e => e.NInet).HasColumnName("nInet");

                entity.Property(e => e.NInnergemeinschaftlicheLieferung).HasColumnName("nInnergemeinschaftlicheLieferung");

                entity.Property(e => e.NIstExterneRechnung).HasColumnName("nIstExterneRechnung");

                entity.Property(e => e.NIstReadOnly).HasColumnName("nIstReadOnly");

                entity.Property(e => e.NKomplettAusgeliefert).HasColumnName("nKomplettAusgeliefert");

                entity.Property(e => e.NMahnstufe).HasColumnName("nMahnstufe");

                entity.Property(e => e.NPlattform).HasColumnName("nPlattform");

                entity.Property(e => e.NPlattformTyp).HasColumnName("nPlattformTyp");

                entity.Property(e => e.NRechnungZahlungsziel).HasColumnName("nRechnungZahlungsziel");

                entity.Property(e => e.NStorniert).HasColumnName("nStorniert");

                entity.Property(e => e.NStorno).HasColumnName("nStorno");

                entity.Property(e => e.NUmsatzsteuerfrei).HasColumnName("nUmsatzsteuerfrei");

                entity.Property(e => e.NZahlungszielInTagen).HasColumnName("nZahlungszielInTagen");
            });

            modelBuilder.Entity<VStandardKategorie>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStandardKategorie");

                entity.Property(e => e.CAktiv)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.KKategorie).HasColumnName("kKategorie");

                entity.Property(e => e.KOberKategorie).HasColumnName("kOberKategorie");

                entity.Property(e => e.NSort).HasColumnName("nSort");
            });

            modelBuilder.Entity<VStandardMerkmal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStandardMerkmal");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CTyp)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cTyp");

                entity.Property(e => e.KMerkmal).HasColumnName("kMerkmal");

                entity.Property(e => e.NGlobal).HasColumnName("nGlobal");

                entity.Property(e => e.NMehrfachauswahl).HasColumnName("nMehrfachauswahl");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVerwendungszweck).HasColumnName("nVerwendungszweck");
            });

            modelBuilder.Entity<VStandardadresse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStandardadresse", "Verkauf");

                entity.Property(e => e.CBundesland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cBundesland");

                entity.Property(e => e.CFax)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cFax");

                entity.Property(e => e.CFirma)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cFirma");

                entity.Property(e => e.CKundeEbayName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cKundeEbayName");

                entity.Property(e => e.CKundenNr)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cKundenNr");

                entity.Property(e => e.CKundengruppe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKundengruppe");

                entity.Property(e => e.CLand)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CMail)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cMail");

                entity.Property(e => e.CName)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("cPlz");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CTel)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTel");

                entity.Property(e => e.CUstid)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cUSTID");

                entity.Property(e => e.CVorname)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cVorname");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");
            });

            modelBuilder.Entity<VSteuercache>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSteuercache");

                entity.Property(e => e.FSteuersatz)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fSteuersatz");

                entity.Property(e => e.KFirma).HasColumnName("kFirma");

                entity.Property(e => e.KSteuerKlasse).HasColumnName("kSteuerKlasse");

                entity.Property(e => e.KSteuerZone).HasColumnName("kSteuerZone");
            });

            modelBuilder.Entity<VStuecklisteGutschriftPos>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStuecklisteGutschriftPos");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(38, 10)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KGutschriftPos).HasColumnName("kGutschriftPos");
            });

            modelBuilder.Entity<VStuecklisteInBestellung>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStuecklisteInBestellung");

                entity.Property(e => e.MengeInBestellung).HasColumnType("decimal(38, 10)");

                entity.Property(e => e.TArtikelKArtikel).HasColumnName("tArtikel_kArtikel");
            });

            modelBuilder.Entity<VStuecklisten>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vStuecklisten", "Maintenance");

                entity.Property(e => e.Artikelgewicht)
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.Bearbeitungszeit)
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.Einkaufspreis)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.Lagerführung)
                    .HasMaxLength(19)
                    .IsUnicode(false);

                entity.Property(e => e.Lieferzeitberechnung)
                    .HasMaxLength(27)
                    .IsUnicode(false);

                entity.Property(e => e.Teilbarkeit)
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Versandgewicht)
                    .HasMaxLength(21)
                    .IsUnicode(false);

                entity.Property(e => e.Überverkäufe)
                    .HasMaxLength(19)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VTicketLabels>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTicketLabels", "Ticketsystem");

                entity.Property(e => e.ColorCode)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Displayname)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VTicketliste>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTicketliste", "Ticketsystem");

                entity.Property(e => e.AssigneeFullName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(642)
                    .IsUnicode(false);

                entity.Property(e => e.DatumNeuesteNachricht).HasColumnType("datetime");

                entity.Property(e => e.Kundennummer)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.LieferantName)
                    .HasMaxLength(511)
                    .IsUnicode(false);

                entity.Property(e => e.Lieferantennummer)
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.ReminderDate).HasColumnType("datetime");

                entity.Property(e => e.TargetDate).HasColumnType("datetime");

                entity.Property(e => e.TicketId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TicketStatusName).HasMaxLength(255);

                entity.Property(e => e.Title)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VTrackAndTraceConfigurations>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vTrackAndTraceConfigurations", "Shipping");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.KVersandArt).HasColumnName("kVersandArt");

                entity.Property(e => e.NIsEnabled).HasColumnName("nIsEnabled");

                entity.Property(e => e.NTrackAndTraceProviderType).HasColumnName("nTrackAndTraceProviderType");
            });

            modelBuilder.Entity<VVersandlager>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vVersandlager", "VersandIntern");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.NTyp).HasColumnName("nTyp");
            });

            modelBuilder.Entity<VVorgang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vVorgang", "FulfillmentNetwork");

                entity.Property(e => e.CComment)
                    .IsUnicode(false)
                    .HasColumnName("cComment");

                entity.Property(e => e.CFfnKey)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cFfnKey");

                entity.Property(e => e.CScopeId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cScopeId");

                entity.Property(e => e.CUserId)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cUserId");

                entity.Property(e => e.CVorgangTypeId)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cVorgangTypeId");

                entity.Property(e => e.CWawiNumber)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("cWawiNumber");

                entity.Property(e => e.DErrorSince).HasColumnName("dErrorSince");

                entity.Property(e => e.DUpdatedAt).HasColumnName("dUpdatedAt");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KArtikelHistory).HasColumnName("kArtikelHistory");

                entity.Property(e => e.KAuftrag).HasColumnName("kAuftrag");

                entity.Property(e => e.KFulfillmentAuftrag).HasColumnName("kFulfillmentAuftrag");

                entity.Property(e => e.KKunde).HasColumnName("kKunde");

                entity.Property(e => e.KLieferant).HasColumnName("kLieferant");

                entity.Property(e => e.KLieferantenBestellung).HasColumnName("kLieferantenBestellung");

                entity.Property(e => e.KLieferschein).HasColumnName("kLieferschein");

                entity.Property(e => e.KScopeType).HasColumnName("kScopeType");

                entity.Property(e => e.KUserType).HasColumnName("kUserType");

                entity.Property(e => e.KVorgang).HasColumnName("kVorgang");

                entity.Property(e => e.KVorgangType).HasColumnName("kVorgangType");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWawiKey).HasColumnName("kWawiKey");

                entity.Property(e => e.NErrorCount).HasColumnName("nErrorCount");
            });

            modelBuilder.Entity<VWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWarehouse", "FulfillmentNetwork");

                entity.Property(e => e.AddressCity)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.City");

                entity.Property(e => e.AddressCompany)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Company");

                entity.Property(e => e.AddressCountry)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Country");

                entity.Property(e => e.AddressEmail)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Email");

                entity.Property(e => e.AddressFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Fax");

                entity.Property(e => e.AddressFirstname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Firstname");

                entity.Property(e => e.AddressLastname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Lastname");

                entity.Property(e => e.AddressPhone)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Phone");

                entity.Property(e => e.AddressSalutation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Salutation");

                entity.Property(e => e.AddressState)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Address.State");

                entity.Property(e => e.AddressStreet)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Street");

                entity.Property(e => e.AddressZip)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Address.Zip");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WarehouseId)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VWarehouseMerchant>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWarehouseMerchant", "FulfillmentNetwork");

                entity.Property(e => e.MerchantId)
                    .HasMaxLength(64)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VWareneingangsarchiv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWareneingangsarchiv");

                entity.Property(e => e.CArtikelname)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelname");

                entity.Property(e => e.CArtikelnummer)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtikelnummer");

                entity.Property(e => e.CBenutzername)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBenutzername");

                entity.Property(e => e.CBestellkommentar)
                    .IsUnicode(false)
                    .HasColumnName("cBestellkommentar");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.CEigeneBestellnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEigeneBestellnummer");

                entity.Property(e => e.CFremdbelegnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cFremdbelegnummer");

                entity.Property(e => e.CLiefArtNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLiefArtNr");

                entity.Property(e => e.CLieferantFirma)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferantFirma");

                entity.Property(e => e.CLieferscheinNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferscheinNr");

                entity.Property(e => e.CWarenLager)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cWarenLager");

                entity.Property(e => e.CWarenLagerPlatz)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cWarenLagerPlatz");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.DGeliefertAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dGeliefertAm");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.FEkeinzel)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKEinzel");

                entity.Property(e => e.KWarenLager).HasColumnName("kWarenLager");

                entity.Property(e => e.KWarenLagerEingang).HasColumnName("kWarenLagerEingang");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            });

            modelBuilder.Entity<VWarenlagerEingang>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWarenlagerEingang", "Auslieferung");

                entity.Property(e => e.CChargenNr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cChargenNr");

                entity.Property(e => e.DMhd)
                    .HasColumnType("datetime")
                    .HasColumnName("dMHD");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KBestellPos).HasColumnName("kBestellPos");

                entity.Property(e => e.KSessionId).HasColumnName("kSessionId");

                entity.Property(e => e.KWarenlager).HasColumnName("kWarenlager");

                entity.Property(e => e.KWarenlagerEingang).HasColumnName("kWarenlagerEingang");
            });

            modelBuilder.Entity<VWarenlagerPlatzArtikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWarenlagerPlatzArtikel");

                entity.Property(e => e.CKommentar1)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar_1");

                entity.Property(e => e.CKommentar2)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKommentar_2");

                entity.Property(e => e.FAnzahl)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahl");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KWarenLagerPlatz).HasColumnName("kWarenLagerPlatz");
            });

            modelBuilder.Entity<VWmsartikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWMSArtikel");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CKurzBeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzBeschreibung");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CLieferstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferstatus");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .IsFixedLength(true);

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.CVpeeinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVPEEinheit");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DletzterEk)
                    .HasColumnType("datetime")
                    .HasColumnName("dletzterEK");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FGrundpreisMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGrundpreisMenge");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FLetzterEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLetzterEK");

                entity.Property(e => e.FMassMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMassMenge");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVKbrutto");

                entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");

                entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");
            });

            modelBuilder.Entity<VWmsartikelSimple>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWMSArtikel_Simple");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .IsFixedLength(true);

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DletzterEk)
                    .HasColumnType("datetime")
                    .HasColumnName("dletzterEK");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FLetzterEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLetzterEK");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KArtikel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("kArtikel");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");
            });

            modelBuilder.Entity<VWmsartikelWe>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWMSArtikelWE");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CBeschreibung)
                    .IsUnicode(false)
                    .HasColumnName("cBeschreibung");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CHersteller)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHersteller");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CKurzBeschreibung)
                    .HasMaxLength(4255)
                    .IsUnicode(false)
                    .HasColumnName("cKurzBeschreibung");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CLieferstatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLieferstatus");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .IsFixedLength(true);

                entity.Property(e => e.CSeo)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSeo");

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.CVpeeinheit)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVPEEinheit");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DletzterEk)
                    .HasColumnType("datetime")
                    .HasColumnName("dletzterEK");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FLetzterEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLetzterEK");

                entity.Property(e => e.FMwSt)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMwSt");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVkbrutto)
                    .HasColumnType("decimal(38, 9)")
                    .HasColumnName("fVKbrutto");

                entity.Property(e => e.FVkhaendlerBrutto).HasColumnName("fVKHaendlerBrutto");

                entity.Property(e => e.FVkhaendlerNetto).HasColumnName("fVKHaendlerNetto");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");
            });

            modelBuilder.Entity<VWmsboxArtikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vWMSBoxArtikel");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CBestellNr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cBestellNr");

                entity.Property(e => e.CEinheit)
                    .HasMaxLength(259)
                    .IsUnicode(false)
                    .HasColumnName("cEinheit");

                entity.Property(e => e.CLand)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLand");

                entity.Property(e => e.CLhmid)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("cLHMID");

                entity.Property(e => e.CLogistikName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cLogistikName");

                entity.Property(e => e.CName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.COrt)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cOrt");

                entity.Property(e => e.CPlz)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("cPLZ");

                entity.Property(e => e.CStrasse)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cStrasse");

                entity.Property(e => e.CVersName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cVersName");

                entity.Property(e => e.DBezahlt)
                    .HasColumnType("datetime")
                    .HasColumnName("dBezahlt");

                entity.Property(e => e.DErstellt)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstellt");

                entity.Property(e => e.FAnzahlAuftrag)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlAuftrag");

                entity.Property(e => e.FAnzahlGes)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlGes");

                entity.Property(e => e.FAnzahlInBox)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlInBox");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBestellung).HasColumnName("kBestellung");

                entity.Property(e => e.KBestellungDerLhm).HasColumnName("kBestellungDerLHM");

                entity.Property(e => e.KLhm).HasColumnName("kLHM");

                entity.Property(e => e.KLhmstatus).HasColumnName("kLHMStatus");

                entity.Property(e => e.KWarenlagerPlatz).HasColumnName("kWarenlagerPlatz");

                entity.Property(e => e.NSperre).HasColumnName("nSperre");
            });

            modelBuilder.Entity<VZulaufLagerartikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vZulaufLagerartikel", "Abgleich");

                entity.Property(e => e.DLieferdatum)
                    .HasColumnType("date")
                    .HasColumnName("dLieferdatum");

                entity.Property(e => e.FAnzahlFehlbestand)
                    .HasColumnType("decimal(29, 14)")
                    .HasColumnName("fAnzahlFehlbestand");

                entity.Property(e => e.FAnzahlOffenGesamt)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlOffenGesamt");

                entity.Property(e => e.FAnzahlZulauf)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fAnzahlZulauf");

                entity.Property(e => e.FMengeNochZuLiefern)
                    .HasColumnType("decimal(38, 14)")
                    .HasColumnName("fMengeNochZuLiefern");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.NRowNumber).HasColumnName("nRowNumber");
            });

            modelBuilder.Entity<VZustandsartikel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vZustandsartikel");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CAmazonFnsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cAmazonFNSKU");

                entity.Property(e => e.CAnmerkung)
                    .IsUnicode(false)
                    .HasColumnName("cAnmerkung");

                entity.Property(e => e.CArtNr)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("cArtNr");

                entity.Property(e => e.CAsin)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cASIN");

                entity.Property(e => e.CBarcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cBarcode");

                entity.Property(e => e.CDelInet)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cDelInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CEpid)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cEPID");

                entity.Property(e => e.CErloeskonto)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cErloeskonto");

                entity.Property(e => e.CGefahrnr)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cGefahrnr");

                entity.Property(e => e.CHan)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cHAN");

                entity.Property(e => e.CHerkunftsland)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("cHerkunftsland");

                entity.Property(e => e.CInet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cInet")
                    .IsFixedLength(true);

                entity.Property(e => e.CIsbn)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cISBN");

                entity.Property(e => e.CJfsku)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("cJfsku");

                entity.Property(e => e.CLagerAktiv)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerAktiv")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerKleinerNull)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerKleinerNull")
                    .IsFixedLength(true);

                entity.Property(e => e.CLagerVariation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cLagerVariation")
                    .IsFixedLength(true);

                entity.Property(e => e.CNeu)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cNeu")
                    .IsFixedLength(true);

                entity.Property(e => e.CPreisliste)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cPreisliste")
                    .IsFixedLength(true);

                entity.Property(e => e.CSerie)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSerie");

                entity.Property(e => e.CSuchbegriffe)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cSuchbegriffe");

                entity.Property(e => e.CTaric)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("cTaric");

                entity.Property(e => e.CTeilbar)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTeilbar")
                    .IsFixedLength(true);

                entity.Property(e => e.CTopArtikel)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("cTopArtikel")
                    .IsFixedLength(true);

                entity.Property(e => e.CUnnummer)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUNNummer");

                entity.Property(e => e.CUpc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cUPC");

                entity.Property(e => e.DErscheinungsdatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErscheinungsdatum");

                entity.Property(e => e.DErstelldatum)
                    .HasColumnType("datetime")
                    .HasColumnName("dErstelldatum");

                entity.Property(e => e.DLetzterEk)
                    .HasColumnType("datetime")
                    .HasColumnName("dLetzterEK");

                entity.Property(e => e.DMod)
                    .HasColumnType("datetime")
                    .HasColumnName("dMod");

                entity.Property(e => e.DNeuImSortiment)
                    .HasColumnType("datetime")
                    .HasColumnName("dNeuImSortiment");

                entity.Property(e => e.DZulaufVerfuegbarAm)
                    .HasColumnType("datetime")
                    .HasColumnName("dZulaufVerfuegbarAm");

                entity.Property(e => e.FAbnahmeintervall)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAbnahmeintervall");

                entity.Property(e => e.FAmazonVk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fAmazonVK");

                entity.Property(e => e.FArtGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fArtGewicht");

                entity.Property(e => e.FBreite)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fBreite");

                entity.Property(e => e.FEbayPreis)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEbayPreis");

                entity.Property(e => e.FEknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fEKNetto");

                entity.Property(e => e.FGewicht)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGewicht");

                entity.Property(e => e.FGrundpreisMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fGrundpreisMenge");

                entity.Property(e => e.FHoehe)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fHoehe");

                entity.Property(e => e.FLaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLaenge");

                entity.Property(e => e.FLetzterEk)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fLetzterEK");

                entity.Property(e => e.FMassMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fMassMenge");

                entity.Property(e => e.FPackeinheit)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fPackeinheit");

                entity.Property(e => e.FUvp)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fUVP");

                entity.Property(e => e.FVknetto)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVKNetto");

                entity.Property(e => e.FVpewert)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("fVPEWert");

                entity.Property(e => e.KArtikel).HasColumnName("kArtikel");

                entity.Property(e => e.KBenutzerLetzteAenderung).HasColumnName("kBenutzerLetzteAenderung");

                entity.Property(e => e.KEigenschaftKombi).HasColumnName("kEigenschaftKombi");

                entity.Property(e => e.KGrundPreisEinheit).HasColumnName("kGrundPreisEinheit");

                entity.Property(e => e.KHersteller).HasColumnName("kHersteller");

                entity.Property(e => e.KLieferStatus).HasColumnName("kLieferStatus");

                entity.Property(e => e.KMassEinheit).HasColumnName("kMassEinheit");

                entity.Property(e => e.KSteuerklasse).HasColumnName("kSteuerklasse");

                entity.Property(e => e.KStueckliste).HasColumnName("kStueckliste");

                entity.Property(e => e.KVaterArtikel).HasColumnName("kVaterArtikel");

                entity.Property(e => e.KVerkaufsEinheit).HasColumnName("kVerkaufsEinheit");

                entity.Property(e => e.KVersandklasse).HasColumnName("kVersandklasse");

                entity.Property(e => e.KVpeeinheit).HasColumnName("kVPEEinheit");

                entity.Property(e => e.KWarengruppe).HasColumnName("kWarengruppe");

                entity.Property(e => e.KZustand).HasColumnName("kZustand");

                entity.Property(e => e.NAutomatischeLiefertageberechnung).HasColumnName("nAutomatischeLiefertageberechnung");

                entity.Property(e => e.NBearbeitungszeit).HasColumnName("nBearbeitungszeit");

                entity.Property(e => e.NCharge).HasColumnName("nCharge");

                entity.Property(e => e.NDelete).HasColumnName("nDelete");

                entity.Property(e => e.NEbayAbgleich).HasColumnName("nEbayAbgleich");

                entity.Property(e => e.NIstMindestbestand).HasColumnName("nIstMindestbestand");

                entity.Property(e => e.NIstVater).HasColumnName("nIstVater");

                entity.Property(e => e.NLagerbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nLagerbestand");

                entity.Property(e => e.NLiefertageWennAusverkauft).HasColumnName("nLiefertageWennAusverkauft");

                entity.Property(e => e.NMhd).HasColumnName("nMHD");

                entity.Property(e => e.NMidestbestand)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMidestbestand");

                entity.Property(e => e.NMindestbestellmaenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nMindestbestellmaenge");

                entity.Property(e => e.NNichtBestellbar).HasColumnName("nNichtBestellbar");

                entity.Property(e => e.NPaketlaufzeitMax).HasColumnName("nPaketlaufzeitMax");

                entity.Property(e => e.NPaketlaufzeitMin).HasColumnName("nPaketlaufzeitMin");

                entity.Property(e => e.NProzentualePreisStaffelAktiv).HasColumnName("nProzentualePreisStaffelAktiv");

                entity.Property(e => e.NPuffer).HasColumnName("nPuffer");

                entity.Property(e => e.NPufferTyp).HasColumnName("nPufferTyp");

                entity.Property(e => e.NSeriennummernVerfolgung).HasColumnName("nSeriennummernVerfolgung");

                entity.Property(e => e.NSort).HasColumnName("nSort");

                entity.Property(e => e.NVpe).HasColumnName("nVPE");

                entity.Property(e => e.NZulaufVerfuegbarMenge)
                    .HasColumnType("decimal(28, 14)")
                    .HasColumnName("nZulaufVerfuegbarMenge");
            });

            modelBuilder.Entity<Voucher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Voucher", "Report");

                entity.Property(e => e.CompanyInternalId).HasComment("Interne Id der Firma");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Bezeichnung für den Gutschein");

                entity.Property(e => e.SalesOrderInternalId).HasComment("Interne Id der Bestellung");

                entity.Property(e => e.SalesOrderPositionInternalId).HasComment("Interne ID der Auftragsposition");
            });

            modelBuilder.Entity<Warehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Warehouse", "Report");

                entity.Property(e => e.Address)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Strasse des Warenlagers");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Ort des Warenlagers");

                entity.Property(e => e.Code)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Kürzel des Warenlagers");

                entity.Property(e => e.ContactDepartment)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Abteilung des Ansprechpartners");

                entity.Property(e => e.ContactEmailAddress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("E-Mail-Adresse des Ansprechpartners");

                entity.Property(e => e.ContactFax)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Faxnummer des Ansprechpartners");

                entity.Property(e => e.ContactFirstName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Vorname des Ansprechpartners");

                entity.Property(e => e.ContactLastName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Nachname des Ansprechpartners");

                entity.Property(e => e.ContactPhoneNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Telefonnummer des Ansprechpartners");

                entity.Property(e => e.ContactSalutation)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Anrede des Ansprechpartners");

                entity.Property(e => e.Country)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Land des Warenlagers");

                entity.Property(e => e.Description)
                    .HasMaxLength(1024)
                    .IsUnicode(false)
                    .HasComment("Beschreibung des Warenlagers");

                entity.Property(e => e.InternalId)
                    .ValueGeneratedOnAdd()
                    .HasComment("Interne ID des Warenlagers");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("Name des Warenlagers");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasComment("PLZ des Warenlagers");

                entity.Property(e => e.State)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasComment("Bundesland des Warenlagers");

                entity.Property(e => e.WarehouseType)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasComment("Typ des Warenlagers (Fulfillment, JTL-Wawi, JTL-WMS usw.)");
            });

            modelBuilder.Entity<ZM1Rabattgruppen>(entity =>
            {
                entity.HasKey(e => e.KRabattGruppe);

                entity.ToTable("z_m1_Rabattgruppen");

                entity.Property(e => e.KRabattGruppe)
                    .ValueGeneratedNever()
                    .HasColumnName("kRabattGruppe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CName)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("cName");

                entity.Property(e => e.NR1).HasColumnName("nR1");

                entity.Property(e => e.NR2).HasColumnName("nR2");

                entity.Property(e => e.NR3).HasColumnName("nR3");

                entity.Property(e => e.NS1).HasColumnName("nS1");

                entity.Property(e => e.NS2).HasColumnName("nS2");

                entity.Property(e => e.NS3).HasColumnName("nS3");
            });

            modelBuilder.Entity<ZZmListe>(entity =>
            {
                entity.HasKey(e => e.KListe);

                entity.ToTable("z_zm_Liste");

                entity.Property(e => e.KListe)
                    .ValueGeneratedNever()
                    .HasColumnName("kListe");

                entity.Property(e => e.BRowversion)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("bRowversion");

                entity.Property(e => e.CDesc)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cDesc");

                entity.Property(e => e.CKey)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("cKey");

                entity.Property(e => e.NStatus).HasColumnName("nStatus");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
